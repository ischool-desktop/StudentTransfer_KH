<?xml version="1.0"?>
<doc>
    <assembly>
        <name>K12.Data</name>
    </assembly>
    <members>
        <member name="T:K12.Data.LeaveInfo">
            <summary>
            學生離校資訊類別，提供方法用來取得及修改學生地址資訊
            </summary>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectAll">
            <summary>
            取得所有學生離校資訊物件列表。
            </summary>
            <returns>List&lt;LeaveInfoRecord&gt;，代表多筆學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;LeaveInfoRecord&gt; records = LeaveInfo.SelectAll();
                
                foreach(LeaveInfoRecord record in records)
                    Console.WrlteLine(record.Reason);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectAll``1">
            <summary>
            取得所有學生離校資訊物件列表。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生離校資訊物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>LeaveInfoRecord，代表學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                LeaveInfoRecord record = LeaveInfo.SelectByStudent(Student);
                
               if (record != null)
                   System.Console.WriteLine(record.Reason);
                </code>
            </example>
            <remarks>若是Student不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生離校資訊物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>LeaveInfoRecord，代表學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                LeaveInfoRecord record = LeaveInfo.SelectByStudent(Student);
            </example>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生離校資訊物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>LeaveInfoRecord，代表學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                LeaveInfoRecord record = LeaveInfo.SelectByStudentID(StudentID);
                
                if (record != null)
                   System.Console.WriteLine(record.Reason);
                </code>
            </example>
            <remarks>若是StudentID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生離校資訊物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>LeaveInfoRecord，代表學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                LeaveInfoRecord record = LeaveInfo.SelectByStudent(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudents(System.Collections.Generic.List{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生離校資訊物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;LeaveInfoRecord&gt;，代表多筆學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;LeaveInfoRecord&gt; records = LeaveInfo.SelectByStudents(Students);
                
                foreach(LeaveInfoRecord record in records)
                    Console.WrlteLine(record.Reason);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudents``1(System.Collections.Generic.List{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生離校資訊物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;LeaveInfoRecord&gt;，代表多筆學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;LeaveInfoRecord&gt; records = LeaveInfo.SelectByStudents(Students);
            </example>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生離校資訊物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;LeaveInfoRecord&gt;，代表多筆學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;LeaveInfoRecord&gt; records = LeaveInfo.SelectByStudentIDs(StudentIDs);
                
                foreach(LeaveInfoRecord record in records)
                    Console.WrlteLine(record.Reason);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.LeaveInfo.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生離校資訊物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;LeaveInfoRecord&gt;，代表多筆學生離校資訊物件。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;LeaveInfoRecord&gt; records = LeaveInfo.SelectByStudents(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.LeaveInfo.Update(K12.Data.LeaveInfoRecord)">
            <summary>
            更新單筆學生離校資訊
            </summary>
            <param name="LeaveInfoRecord">學生離校資訊物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                LeaveInfoRecord record = LeaveInfo.SelectByStudentID(StudentID);
                record.Reason = (new System.Random()).NextDouble().ToString();
                int UpdateCount = LeaveInfo.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.LeaveInfo.Update(System.Collections.Generic.IEnumerable{K12.Data.LeaveInfoRecord})">
            <summary>
            更新多筆學生離校資訊
            </summary>
            <param name="LeaveInfoRecords">多筆學生離校資訊物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.LeaveInfoRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                LeaveInfoRecord record = LeaveInfo.SelectByStudentID(StudentID);
                record.Reason = (new System.Random()).NextDouble().ToString();
                List&lt;LeaveInfoRecord&gt; records = new List&lt;LeaveInfoRecord&gt;();
                records.Add(record);
                int UpdateCount = LeaveInfo.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.LeaveInfo.GetDetailList(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            取得詳細資料列表
            </summary>
            <returns></returns>
        </member>
        <member name="E:K12.Data.LeaveInfo.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.GeneralTagRecord">
            <summary>
            標籤系統，用來分類Student、Class、Teacher及Course，先運用TagConfig及TagConfigRecord來
            設定標籤值，再套用至四個Entity上。
            </summary>
        </member>
        <member name="M:K12.Data.GeneralTagRecord.Load(System.Xml.XmlElement)">
            <summary>
            載入XML參數設定值
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.GeneralTagRecord.ToXml">
            <summary>
            輸出成XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.GeneralTagRecord.GetID(System.Xml.XmlElement)">
            <summary>
            ID，系統編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.GeneralTagRecord.GetEntityID(System.Xml.XmlElement)">
            <summary>
            EntityID 屬性的名稱，每個 Entity 都不同，所以使用 Template Method Pattern。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.ID">
            <summary>
            ID，系統編號
            </summary>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.RefEntityID">
            <summary>
            目前EntityID可能為Student、Class、Teacher及Course的編號
            </summary>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.RefTagID">
            <summary>
            標籤設定編號
            </summary>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.Prefix">
            <summary>
            標籤前置詞
            </summary>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.Name">
            <summary>
            標籤名稱
            </summary>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.Color">
            <summary>
            標籤顏色
            </summary>
        </member>
        <member name="P:K12.Data.GeneralTagRecord.FullName">
            <summary>
            標籤完整名稱，包含標籤前置詞及標籤名稱
            </summary>
        </member>
        <member name="T:K12.Data.AssessmentSetupRecord">
            <summary>
            評量設定資訊
            </summary>
        </member>
        <member name="M:K12.Data.AssessmentSetupRecord.#ctor">
            <summary>
            預設建構式，初始化ID、Name、Descripton為空字串。
            </summary>
        </member>
        <member name="M:K12.Data.AssessmentSetupRecord.#ctor(System.String)">
            <summary>
            新增評量設定記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="Name">評量設定記錄名稱</param>
        </member>
        <member name="M:K12.Data.AssessmentSetupRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.AssessmentSetupRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.Name">
            <summary>
            名稱，必填
            </summary>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.StartTime">
            <summary>
            總成績上傳開始時間
            </summary>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.EndTime">
            <summary>
            總成績上傳結束時間
            </summary>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.AllowUpload">
            <summary>
            是否允許上傳課程成績
            </summary>
        </member>
        <member name="P:K12.Data.AssessmentSetupRecord.Extension">
            <summary>
            延伸欄位資訊
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.BigEvent">
            <summary>
            負責大型事件的管理。
            引發事件過程中，所有被引發的方法都會被例外保護，不會因為其中一個方法產生錯誤，而使得後面的事件接收者無法接收事件。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.BigEvent.#ctor(System.Delegate,System.Object,System.Object[])">
            <summary>
            建立事件管理器實體。
            </summary>
            <param name="eventHandler">要管理的事件實體。</param>
            <param name="sender">事件傳送者。</param>
            <param name="args">事件參數。</param>
        </member>
        <member name="M:K12.Data.Configuration.BigEvent.#ctor(System.String,System.Delegate,System.Object,System.Object[])">
            <summary>
            建立事件管理器實體。
            </summary>
            <param name="eventName">事件名稱，可利於除錯。</param>
            <param name="eventHandler">要管理的事件實體。</param>
            <param name="sender">事件傳送者。</param>
            <param name="args">事件參數。</param>
        </member>
        <member name="M:K12.Data.Configuration.BigEvent.UIRaise">
            <summary>
            引發事件，所有被引發的方法都會被例外保護，不會因為其中一個方法產生錯誤，而使得後面的事件接收者無法接收事件。
            不管呼叫端是在哪一執行緒，引發的事件會在 UI 執行緒執行，適合用於引發 UI 相關事件。
            使用此方法會誇執行緒引發 UI 事件請注意死結問題。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.BigEvent.UIRaiseAsync">
            <summary>
            引發事件，所有被引發的方法都會被例外保護，不會因為其中一個方法產生錯誤，而使得後面的事件接收者無法接收事件。
            不管呼叫端是在哪一執行緒，引發的事件會在 UI 執行緒執行，適合用於引發 UI 相關事件。
            此方法是 UIRaise 的非同步版本。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.BigEvent.Raise">
            <summary>
            引發事件，所有被引發的方法都會被例外保護，不會因為其中一個方法產生錯誤，而使得後面的事件接收者無法接收事件。
            </summary>
        </member>
        <member name="E:K12.Data.Configuration.BigEvent.UIRaiseAsyncComplete">
            <summary>
            當非同步引發 UI 事件完成時發生。這個事件會在背景執行緒引發。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.BigEvent.EventHandler">
            <summary>
            取得事件實體。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.BigEvent.Sender">
            <summary>
            取得傳送事件的物件 
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.BigEvent.Arguments">
            <summary>
            取得事件參數。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.BigEvent.EventName">
            <summary>
            取得或設定事件名稱，用於除錯，如果有提供將會對除錯很有幫助。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.BigEvent.Exceptions">
            <summary>
            取得引發事件中所發生的錯誤。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.BigEvent.HasException">
            <summary>
            指示事件引發途中是否有錯誤。
            </summary>
        </member>
        <member name="F:K12.Data.DateTimeHelper.StdDateTimeFormat">
            <summary>
            標準日期時間格式，例：2007/05/10 14:30:05
            </summary>
        </member>
        <member name="F:K12.Data.DateTimeHelper.StdDateFormat">
            <summary>
            標準日期格式，例：2007/05/10
            </summary>
        </member>
        <member name="F:K12.Data.DateTimeHelper.StdTimeFormat">
            <summary>
            標準時間格式，例：14:30:05
            </summary>
        </member>
        <member name="M:K12.Data.DateTimeHelper.IsNullOrEmpty(System.Nullable{System.DateTime})">
            <summary>
            判斷DateTime?是否為null以及是否有值
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.DateTimeHelper.ParseGregorian(System.String)">
            <summary>
            將日期當作是「西元」年處理。
            </summary>
            <param name="dtString">日期字串。</param>
        </member>
        <member name="M:K12.Data.DateTimeHelper.ParseGregorian(System.String,K12.Data.PaddingMethod)">
            <summary>
            將日期當作是「西元」年處理。
            </summary>
            <param name="dtString">日期字串。 </param>
            <param name="method">如果日期缺少的欄位用何種方式補上。</param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.DateTimeHelper.ParseTaiwan(System.String)">
            <summary>
            將日期當作是「民國」年處理。
            </summary>
            <param name="dtString">日期字串。</param>
        </member>
        <member name="M:K12.Data.DateTimeHelper.ParseTaiwan(System.String,K12.Data.PaddingMethod)">
            <summary>
            將日期當作是「民國」年處理。
            </summary>
            <param name="dtString">日期字串。</param>
            <param name="method">如果日期中缺少的欄位用何種方式補上。</param>
        </member>
        <member name="M:K12.Data.DateTimeHelper.Parse(System.String)">
            <summary>
            使用內鍵的 DateTime 的 TryParse 處理。
            </summary>
            <param name="dtString">日期字串。</param>
            <returns></returns>
        </member>
        <member name="T:K12.Data.StudentRecord">
            <summary>
            學生資訊
            </summary>
        </member>
        <member name="M:K12.Data.StudentRecord.#ctor">
            <summary>
            空建構式，將狀態設為一般、學生名稱為空白。
            </summary>
        </member>
        <member name="M:K12.Data.StudentRecord.#ctor(System.String,System.String)">
            <summary>
            參數建構式，用來新增記錄，必填欄位為學生姓名及性別。
            </summary>
            <param name="Name">姓名</param>
            <param name="Gender">性別</param>
        </member>
        <member name="P:K12.Data.StudentRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Status">
            <summary>
            狀態
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.StatusStr">
            <summary>
            狀態，用字串表示，若要指定請使用Status屬性
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.SeatNo">
            <summary>
            座號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Name">
            <summary>
            姓名，必填欄位
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.EnglishName">
            <summary>
            英文姓名
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.StudentNumber">
            <summary>
            學號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Gender">
            <summary>
            性別，必填欄位
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.IDNumber">
            <summary>
            身分證號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.BirthPlace">
            <summary>
            出生地
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Nationality">
            <summary>
            國籍
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.OverrideDepartmentID">
            <summary>
            覆蓋後的科別編號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.OverrideProgramPlanID">
            <summary>
            覆蓋後的課程規劃表編號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.OverrideProgramPlan">
            <summary>
            覆蓋後的課程規劃
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.ProgramPlan">
            <summary>
            自動判斷所屬課程規劃，若是學生身上有課程規劃，則用學生的，否則取得班級的課程規劃
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.OverrideScoreCalcRuleID">
            <summary>
            覆蓋後的成績計算規則編號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.OverrideScoreCalcRule">
            <summary>
            覆蓋後的成績計算規則
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.ScoreCalcRule">
            <summary>
            自動判斷所屬成績計算規則，若是學生身上有成績計算規則，則用學生的，否則取得班級的課程規劃
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.RefClassID">
            <summary>
            所屬班級編號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Class">
            <summary>
            所屬班級
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.AccountType">
            <summary>
            帳號類型
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.SALoginName">
            <summary>
            School Access登入帳號
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.SAPassword">
            <summary>
            School Access登入密碼
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.HomeSchooling">
            <summary>
            在家自學
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.EnrollmentCategory">
            <summary>
            入學身分
            </summary>
        </member>
        <member name="P:K12.Data.StudentRecord.Comment">
            <summary>
            備註
            </summary>
        </member>
        <member name="T:K12.Data.StudentRecord.StudentStatus">
            <summary>
            學生狀態
            </summary>
        </member>
        <member name="T:K12.Data.SemesterHistory">
            <summary>
            學期歷程類別，提供方法用來取得及修改學期歷程資訊
            </summary>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectAllDetail">
            <summary>
            取得所有學生學期歷程細項列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectAll">
            <summary>
            取得所有學生學期歷程列表。
            </summary>
            <returns>List&lt;SemesterHistoryRecord&gt;，代表多筆學期歷程物件。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;SemesterHistoryRecord&gt; records = SemesterHistory.SelectAll();
                    
                    foreach(SemesterHistoryRecord record in records)
                        System.Console.Writeln(record.SchoolYear); 
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectAll``1">
            <summary>
            取得所有學生學期歷程列表。
            </summary>
            <returns>List&lt;SemesterHistoryRecord&gt;，代表多筆學期歷程物件。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;SemesterHistoryRecord&gt; records = SemesterHistory.SelectAll();
                    
                    foreach(SemesterHistoryRecord record in records)
                        System.Console.Writeln(record.SchoolYear); 
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudentID(System.String)">
            <summary>
            根據學生編號取得學期歷程。
            </summary>
            <param name="StudentID">學生編號</param>
            <returns>SemesterHistoryRecord，代表學期歷程物件。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                SemesterHistoryRecord record = SemesterHistory.SelectByStudentID(StudentID);
                
                if (record != null)
                {
                   System.Console.WriteLine(record.SchoolYear);
                   System.Console.WriteLine(record.Semester);
                }
                </code>
            </example>
            <remarks>若是StudentID不存在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudentID``1(System.String)">
            <summary>
            根據學生編號取得學期歷程。
            </summary>
            <param name="StudentID">學生編號</param>
            <returns>SemesterHistoryRecord，代表學期歷程物件。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                SemesterHistoryRecord records = SemesterHistory.SelectByStudentID(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudent(K12.Data.StudentRecord)">
             <summary>
             根據學生物件取得學期歷程。
             </summary>
             <param name="Student">學生物件</param>
             <returns>SemesterHistoryRecord，代表學期歷程物件。</returns>
             <seealso cref="T:K12.Data.StudentRecord"/>
             <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
             <exception cref="T:System.Exception">
             </exception>
             <sample>
                 <code>
                 SemesterHistoryRecord record = SemesterHistory.SelectByStudent(Student);
                 
                 if (record != null)
                 {
                    System.Console.WriteLine(record.SchoolYear);
                    System.Console.WriteLine(record.Semester);
                 }
                 </code>
            </sample>
             <remarks>若是StudentID不存在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據學生物件取得學期歷程。
            </summary>
            <param name="Student">學生物件</param>
            <returns>SemesterHistoryRecord，代表學期歷程物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                SemesterHistoryRecord records = SemesterHistory.SelectByStudentID(Student);
            </example>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudents(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生物件取得學期歷程列表。
            </summary>
            <param name="Students">多筆學生物件</param>
            <returns>List&lt;SemesterHistoryRecord&gt;，代表多筆學期歷程物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;SemesterHistoryRecord&gt; records = SemesterHistory.SelectByStudents(Students);
                    
                    foreach(SemesterHistoryRecord record in records)
                        System.Console.Writeln(record.SchoolYear); 
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudents``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生物件取得學期歷程列表。
            </summary>
            <param name="Students">多筆學生物件</param>
            <returns>List&lt;SemesterHistoryRecord&gt;，代表多筆學期歷程物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterHistoryRecord&gt; records = SemesterHistory.SelectByStudentIDs(Students);
            </example>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學期歷程列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SemesterHistoryRecord&gt;，代表多筆學期歷程物件。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;SemesterHistoryRecord&gt; records = SemesterHistory.SelectByStudentIDs(StudentIDs);
                    
                    foreach(SemesterHistoryRecord record in records)
                        System.Console.Writeln(record.SchoolYear); 
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.SemesterHistory.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學期歷程列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SemesterHistoryRecord&gt;，代表多筆學期歷程物件。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterHistoryRecord&gt; records = SemesterHistory.SelectByStudentIDs(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.SemesterHistory.Update(K12.Data.SemesterHistoryRecord)">
            <summary>
            更新單筆學期歷程記錄
            </summary>
            <param name="SemesterHistoryRecord">學期歷程記錄</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                SemesterHistoryRecord record = SmesterHistory.SelectByStudentID(StudentID);
                record.SchoolYear = 100;
                int UpdateCount = SmesterHistory.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.SemesterHistory.Update(System.Collections.Generic.IEnumerable{K12.Data.SemesterHistoryRecord})">
            <summary>
            更新多筆學期歷程記錄
            </summary>
            <param name="SemesterHistoryRecords">多筆學期歷程記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SemesterHistoryRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                SemesterHistoryRecord record = SemesterHistory.SelectByStudentID(StudentID);
                record.SchoolYear = 100;
                List&lt;SemesterHistoryRecord&gt; records = new List&lt;SemesterHistoryRecord&gt;();
                records.Add(record);
                int UpdateCount = SemesterHistory.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.SemesterHistory.GetDetailList(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            取得詳細資料列表
            </summary>
            <returns></returns>
        </member>
        <member name="E:K12.Data.SemesterHistory.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.SemesterScore">
            <summary>
            學生學期成績類別，提供方法用來取得、新增、修改及刪除學生學期成績資訊
            </summary>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectAllSubjectScore">
            <summary>
            取得所有科目成績
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectAll">
            <summary>
            取得所有學生學期成績記錄物件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectAll``1">
            <summary>
            取得所有學生學期成績記錄物件。
            </summary>
            <typeparam name="T">學期成績記錄物件型別，繼承至SemesterScoreRecord。</typeparam>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectBySchoolYearAndSemester(System.String,System.Int32,System.Int32)">
            <summary>
            根據學生編號、學年度及學期取得學生學期成績。
            </summary>
            <param name="StudentID">學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <returns>SemesterScoreRecord，代表學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                SemesterScoreRecord record = SelectBySchoolYearAndSemester(StudentID,SchoolYear,Semester);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectBySchoolYearAndSemester``1(System.String,System.Int32,System.Int32)">
            <summary>
            根據學生編號、學年度及學期取得學生學期成績。
            </summary>
            <typeparam name="T">學生學期成績記錄物件型別，K12共用為K12.Data.SemesterScoreRecord</typeparam>
            <param name="StudentID">學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <returns>SemesterScoreRecord，代表學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                SemesterScoreRecord rerecord = SelectBySchoolYearAndSemester&lt;K12.Data.SemesterScoreRecord&gt;(StudentID,SchoolYear,Semester);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectBySchoolYearAndSemester(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據多筆學生編號、學年度、學期取得學生學期成績列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectBySchoolYearAndSemester(StudentIDs,SchoolYear,Semester);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectBySchoolYearAndSemester``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據多筆學生編號、學年度、學期取得學生學期成績列表。
            </summary>
            <typeparam name="T">學生學期成績記錄物件型別，K12共用為K12.Data.SemesterScoreRecord</typeparam>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectBySchoolYearAndSemester&lt;K12.Data.SemesterScoreRecord&gt;(StudentIDs,SchoolYear,Semester);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生學期成績列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudentIDs(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生學期成績列表。
            </summary>
            <typeparam name="T">學生學期成績記錄物件型別，K12共用為K12.Data.SemesterScoreRecord</typeparam>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudentIDs&lt;K12.Data.SemesterScoreRecord&gt;(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudents(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生學期成績列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudents(Students);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudents``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生學期成績列表。
            </summary>
            <typeparam name="T">學生學期成績記錄物件型別，K12共用為K12.Data.SemesterScoreRecord</typeparam>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudents&lt;K12.Data.SemesterScoreRecord&gt;(Students);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudentID(System.String)">
            <summary>
            根據學生編號取得學生學期成績列表。
            </summary>
            <param name="StudentID">學生編號</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudentID(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudentID``1(System.String)">
            <summary>
            根據學生編號取得學生學期成績列表。
            </summary>
            <typeparam name="T">學生學期成績記錄物件型別，K12共用為K12.Data.SemesterScoreRecord</typeparam>
            <param name="StudentID">學生編號</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudentID&lt;K12.Data.SemesterScoreRecord&gt;(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據學生記錄物件取得學生學期成績列表。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudent(Student);
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據學生記錄物件取得學生學期成績列表。
            </summary>
            <typeparam name="T">學生學期成績記錄物件型別，K12共用為K12.Data.SemesterScoreRecord</typeparam>
            <param name="Student">學生記錄物件</param>
            <returns>List&lt;SemesterScoreRecord&gt;，代表多筆學生學期成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SemesterScoreRecord&gt; records = SemesterScore.SelectByStudent&lt;K12.Data.SemesterScoreRecord&gt;(Student);
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.SemesterScore.Insert(K12.Data.SemesterScoreRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.SemesterScore.Insert(System.Collections.Generic.IEnumerable{K12.Data.SemesterScoreRecord})" -->
        <member name="M:K12.Data.SemesterScore.Update(K12.Data.SemesterScoreRecord)">
            <summary>
            更新單筆學生學期成績記錄
            </summary>
            <param name="SemesterScoreRecord">學生學期成績記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.Update(System.Collections.Generic.IEnumerable{K12.Data.SemesterScoreRecord})">
            <summary>
            更新多筆學生學期成績記錄
            </summary>
            <param name="SemesterScoreRecords">多筆學生學期成績記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.Delete(K12.Data.SemesterScoreRecord)">
            <summary>
            刪除單筆學生學期成績記錄
            </summary>
            <param name="SemesterScoreRecord">學生學期成績記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.Delete(System.String)">
            <summary>
            刪除單筆學生學期成績記錄
            </summary>
            <param name="SemesterScoreID">學生學期成績編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.Delete(System.Collections.Generic.IEnumerable{K12.Data.SemesterScoreRecord})">
            <summary>
            刪除多筆學生學期成績記錄
            </summary>
            <param name="SemesterScoreRecords">多筆學生學期成績記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.SemesterScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SemesterScore.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生學期成績記錄
            </summary>
            <param name="SemesterScoreIDs">多筆學生學期成績編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.UpdateHelper">
            <summary>
            資料更新。
            </summary>
        </member>
        <member name="M:K12.Data.UpdateHelper.SetDefaultDataSource(FISCA.DSAClient.Connection)">
            <summary>
            設定 QueryHelper 預設的資料來源連線。
            </summary>
            <param name="datasource"></param>
        </member>
        <member name="M:K12.Data.UpdateHelper.#ctor">
            <summary>
            使用系統預設的連線建立 QueryHelper 實體。
            </summary>
        </member>
        <member name="M:K12.Data.UpdateHelper.#ctor(FISCA.DSAClient.Connection)">
            <summary>
            使用指定的連線建立 QueryHelper 實體。
            </summary>
            <param name="datasource"></param>
        </member>
        <member name="T:K12.Data.UpdateRecordRecord">
            <summary>
            學生異動記錄資訊
            </summary>
        </member>
        <member name="M:K12.Data.UpdateRecordRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.UpdateRecordRecord.#ctor(System.String,System.String)">
            <summary>
            新增學生異動記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="StudentID">所屬學生編號</param>
            <param name="UpdateDate">異動日期</param>
        </member>
        <member name="M:K12.Data.UpdateRecordRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.UpdateRecordRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.ID">
            <summary>
            異動編號
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.StudentID">
            <summary>
            學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.UpdateDate">
            <summary>
            異動日期，必填
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.SchoolYear">
            <summary>
            學年度
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Semester">
            <summary>
            學期
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.ADDate">
            <summary>
            核準日期(回填)
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.ADNumber">
            <summary>
            核準文號(回填)
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Birthdate">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Comment">
            <summary>
            備註
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Gender">
            <summary>
            性別
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.GradeYear">
            <summary>
            年級
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.IDNumber">
            <summary>
            身份證號
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.LastADDate">
            <summary>
            最後核準日期
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.LastADNumber">
            <summary>
            最後核準文號
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.StudentName">
            <summary>
            學生姓名
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.StudentNumber">
            <summary>
            學生學號
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.UpdateCode">
            <summary>
            異動代碼，高中異動代碼對照表請參考SHSchool.Data.UpdateCodeMapping、SHSchool.Data.UpdateCodeMappingInfo。
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.UpdateDescription">
            <summary>
            異動原因，高中一般參考對照表內的異動原因，高中異動代碼對照表請參考SHSchool.Data.UpdateCodeMapping、SHSchool.Data.UpdateCodeMappingInfo。
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Department">
            <summary>
            異動科別
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordRecord.Attributes">
            <summary>
            擴充欄位
            </summary>
        </member>
        <member name="T:K12.Data.UpdateRecord">
            <summary>
            學生異動記錄類別，提供方法用來取得、新增、修改及刪除學生異動記錄
            </summary>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectAll">
            <summary>
            取得所有學生異動記錄列表。
            </summary>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectAll();
                
                foreach(UpdateRecordRecord record in records)
                    Console.WrlteLine(record.StudentName);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectAll``1">
            <summary>
            取得所有學生異動記錄列表。
            </summary>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生編號取得學生異動記錄列表。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄列表。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; record = UpdateRecord.SelectByStudentID(StudentID);
                
                if (record != null)
                   System.Console.WriteLine(record.StudentName);
                </code>
            </example>
            <remarks>若是StudentID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生編號取得學生異動記錄列表。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄列表。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByStudentID(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生編號取得學生異動記錄列表。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄列表。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; record = UpdateRecord.SelectByStudent(Student);
                
                if (record != null)
                   System.Console.WriteLine(record.StudentName);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生編號取得學生異動記錄列表。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄列表。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByStudentID(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生異動記錄列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByStudentIDs(StudentIDs);
                
                foreach(UpdateRecordRecord record in records)
                    System.Console.WriteLine(record.StudentName);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生異動記錄列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByStudentIDs(StudentIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆異動記錄編號取得學生異動記錄列表。
            </summary>
            <param name="IDs">多筆異動記錄編號</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByIDs(IDs);
                
                foreach(UpdateRecordRecord record in records)
                    System.Console.WriteLine(record.StudentName);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆異動記錄編號取得學生異動記錄列表。
            </summary>
            <param name="IDs">多筆異動記錄編號</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByIDs(IDs);
                
                foreach(UpdateRecordRecord record in records)
                    System.Console.WriteLine(record.StudentName);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudents(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生物件取得學生異動記錄列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByStudents(Students);
                
                foreach(UpdateRecordRecord record in records)
                    System.Console.WriteLine(record.StudentName);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByStudents``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生物件取得學生異動記錄列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByStudents(Students);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByUpdateCodes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據異動代碼取得學生異動記錄列表。
            </summary>
            <param name="UpdateCodes">多個異動代碼</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByUpdateCodes(UpdateCodes);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.SelectByUpdateCodes``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據異動代碼取得學生異動記錄列表。
            </summary>
            <param name="UpdateCodes">多個異動代碼</param>
            <returns>List&lt;UpdateRecordRecord&gt;，代表多筆學生異動記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByUpdateCodes(UpdateCodes);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.Insert(K12.Data.UpdateRecordRecord)">
            <summary>
            新增單筆學生異動記錄
            </summary>
            <param name="UpdateRecordRecord">學生異動記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    UpdateRecordRecord newrecord = new UpdateRecordRecord();
                    newrecord.StudentID = StudentID;
                    newrecord.UpdateDate = "2009/9/9";
                    strng NewID = UpdateRecord.Insert(newrecord)
                    UpdateRecordRecord record = UpdateRecord.SelectByID(NewID);
                    System.Console.Writeln(record.Name);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為學生編號及異動日期。
            </remarks>
        </member>
        <member name="M:K12.Data.UpdateRecord.Insert(System.Collections.Generic.IEnumerable{K12.Data.UpdateRecordRecord})">
            <summary>
            新增多筆學生異動記錄
            </summary>
            <param name="UpdateRecordRecord">多筆學生異動記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    UpdateRecordRecord record = new UpdateRecordRecord();
                    record.StudentID = StudentID;
                    record.UpdateDate = "2009/9/9";
                    List&lt;UpdateRecordRecord&gt; records = new List&lt;UpdateRecordRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = UpdateRecord.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.Update(K12.Data.UpdateRecordRecord)">
            <summary>
            更新單筆學生異動記錄
            </summary>
            <param name="UpdateRecordRecord">學生異動記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                UpdateRecordRecord record = UpdateRecord.SelectByID(ClassID);
                record.StudentName = (new System.Random()).NextDouble().ToString();
                int UpdateCount = UpdateRecord.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecord.Update(System.Collections.Generic.IEnumerable{K12.Data.UpdateRecordRecord})">
            <summary>
            更新多筆學生異動記錄
            </summary>
            <param name="UpdateRecordRecords">多筆學生異動記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                UpdateRecordRecord record = UpdateRecord.SelectByID(UpdateRecordID);
                record.StudentName = (new System.Random()).NextDouble().ToString();
                List&lt;UpdateRecordRecord&gt; records = new List&lt;UpdateRecordRecord&gt;();
                records.Add(record);
                int UpdateCount = UpdateRecord.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecord.Delete(System.Collections.Generic.IEnumerable{K12.Data.UpdateRecordRecord})">
            <summary>
            刪除多筆學生異動記錄
            </summary>
            <param name="UpdateRecordRecords">多筆學生異動記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.UpdateRecordRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;UpdateRecordRecord&gt; records = UpdateRecord.SelectByIDs(UpdateRecordIDs);
                  int DeleteCount = UpdateRecord.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecord.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生異動記錄
            </summary>
            <param name="UpdateRecordIDs">多筆學生異動記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
               <code>
               int DeleteCount = UpdateRecord.Delete(UpdateRecordIDs);
               </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecord.Delete(K12.Data.UpdateRecordRecord)">
            <summary>
            刪除單筆學生異動記錄
            </summary>
            <param name="UpdateRecordRecord">單筆學生異動記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  UpdateRecordRecord&gt; record = UpdateRecord.SelectByID(UpdateRecordID);
                  int DeleteCount = UpdateRecord.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecord.Delete(System.String)">
            <summary>
            刪除單筆學生異動記錄
            </summary>
            <param name="UpdateRecordID">單筆學生異動記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = UpdateRecord.Delete(UpdateRecordID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.UpdateRecord.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.UpdateRecord.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.UpdateRecord.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.UpdateRecord.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.LeaveInfoRecord">
            <summary>
            學生離校資訊
            </summary>
        </member>
        <member name="M:K12.Data.LeaveInfoRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.LeaveInfoRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.LeaveInfoRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.ClassName">
            <summary>
            班級名稱
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.Memo">
            <summary>
            備忘資訊
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.Reason">
            <summary>
            離校原因
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.SchoolYear">
            <summary>
            離校學年度
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.DiplomaNumber">
            <summary>
            畢業證書字號
            </summary>
        </member>
        <member name="P:K12.Data.LeaveInfoRecord.DepartmentName">
            <summary>
            離校時的科別
            </summary>
        </member>
        <member name="T:K12.Data.AddressRecord">
            <summary>
            學生地址資訊
            </summary>
        </member>
        <member name="M:K12.Data.AddressRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.AddressRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.AddressRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.AddressRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Student">
            <summary>
            所屬學生記錄物件
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Permanent">
            <summary>
            戶籍地址
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentZipCode">
            <summary>
            戶籍郵遞區號，此為唯讀屬性，要修改請使用Permanent.ZipCode屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentCounty">
            <summary>
            戶籍縣市，此為唯讀屬性，要修改請使用Permanent.County屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentTown">
            <summary>
            戶籍鄉鎮市區，此為唯讀屬性，要修改請使用Permanent.Town屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentDistrict">
            <summary>
            戶籍村里，此為唯讀屬性，要修改請使用Permanent.District屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentArea">
            <summary>
            戶籍鄰，此為唯讀屬性，要修改請使用Permanent.Area屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentDetail">
            <summary>
            戶籍其他，此為唯讀屬性，要修改請使用Permanent.Detail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentAddress">
            <summary>
            戶籍完整地址，此為唯讀屬性，要修改請使用Permanent物件屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentLongitude">
            <summary>
            戶籍經度，此為唯讀屬性，要修改請使用Permanent.Longitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.PermanentLatitude">
            <summary>
            戶籍緯度，此為唯讀屬性，要修改請使用Permanent.Latitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Mailing">
            <summary>
            聯絡地址
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingZipCode">
            <summary>
            聯絡郵遞區號，此為唯讀屬性，要修改請使用Mailing.ZipCode屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingCounty">
            <summary>
            聯絡縣市，此為唯讀屬性，要修改請使用Mailing.County屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingTown">
            <summary>
            聯絡鄉鎮市區，此為唯讀屬性，要修改請使用Mailing.Town屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingDistrict">
            <summary>
            聯絡村里，此為唯讀屬性，要修改請使用Mailing.District屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingArea">
            <summary>
            聯絡鄰，此為唯讀屬性，要修改請使用Mailing.Area屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingDetail">
            <summary>
            聯絡其他，此為唯讀屬性，要修改請使用Mailing.Detail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingAddress">
            <summary>
            聯絡地址，此為唯讀屬性，要修改請使用Mailing物件屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingLongitude">
            <summary>
            聯絡經度，此為唯讀屬性，要修改請使用Mailing.Longitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.MailingLatitude">
            <summary>
            聯絡緯度，此為唯讀屬性，要修改請使用Mailing.Latitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1">
            <summary>
            其他地址一
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1ZipCode">
            <summary>
            其他地址一郵遞區號，此為唯讀屬性，要修改請使用Address1.ZipCode屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1County">
            <summary>
            其他地址一縣市，此為唯讀屬性，要修改請使用Address1.County屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1Town">
            <summary>
            其他地址一鄉鎮市區，此為唯讀屬性，要修改請使用Address1.Town屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1District">
            <summary>
            其他地址一村里，此為唯讀屬性，要修改請使用Address1.District屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1Area">
            <summary>
            其他地址一鄰，此為唯讀屬性，要修改請使用Address1.Area屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1Detail">
            <summary>
            其他地址一其他，此為唯讀屬性，要修改請使用Address1.Detail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1Address">
            <summary>
            其他地址一完整地址，此為唯讀屬性，要修改請使用Address1物件屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1Longitude">
            <summary>
            其他地址一經度，此為唯讀屬性，要修改請使用Address1.Longitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address1Latitude">
            <summary>
            其他地址一緯度，此為唯讀屬性，要修改請使用Address1.Latitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2">
            <summary>
            其他地址二
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2ZipCode">
            <summary>
            其他地址二郵遞區號，此為唯讀屬性，要修改請使用Address2.ZipCode屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2County">
            <summary>
            其他地址二縣市，此為唯讀屬性，要修改請使用Address2.County屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2Town">
            <summary>
            其他地址二鄉鎮市區，此為唯讀屬性，要修改請使用Address2.Town屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2District">
            <summary>
            其他地址二村里，此為唯讀屬性，要修改請使用Address2.District屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2Area">
            <summary>
            其他地址二鄰，要修改請使用Address2.Area屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2Detail">
            <summary>
            其他地址二其他，要修改請使用Address2.Detail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2Address">
            <summary>
            其他地址二完整地址，要修改請使用Address2物件屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2Longitude">
            <summary>
            其他地址二經度，要修改請使用Address2.Longitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address2Latitude">
            <summary>
            其他地址二緯度，要修改請使用Address2.Latitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3">
            <summary>
            其他地址三
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3ZipCode">
            <summary>
            其他地址三郵遞區號，要修改請使用Address3.ZipCode屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3County">
            <summary>
            其他地址三縣市，要修改請使用Address3.County屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3Town">
            <summary>
            其他地址三鄉鎮市區，要修改請使用Address3.Town屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3District">
            <summary>
            其他地址三村里，要修改請使用Address3.District屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3Area">
            <summary>
            其他地址三鄰，要修改請使用Address3.Area屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3Detail">
            <summary>
            其他地址三其他，要修改請使用Address3.Detail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3Address">
            <summary>
            其他地址三完整地址，要修改請使用Address3物件屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3Longitude">
            <summary>
            其他地址三經度，要修改請使用Address3.Longitude屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AddressRecord.Address3Latitude">
            <summary>
            其他地址三緯度，要修改請使用Address3.Latitude屬性。
            </summary>
        </member>
        <member name="T:K12.Data.AddressItem">
            <summary>
            詳細地址資料
            </summary>
        </member>
        <member name="M:K12.Data.AddressItem.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.AddressItem.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.AddressItem.ToString">
            <summary>
            輸出成字串
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.AddressItem.ZipCode">
            <summary>
            郵遞區號
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.County">
            <summary>
            縣市
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.Town">
            <summary>
            鄉鎮市區
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.District">
            <summary>
            村里
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.Area">
            <summary>
            鄰
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.Detail">
            <summary>
            其他
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.Longitude">
            <summary>
            經度
            </summary>
        </member>
        <member name="P:K12.Data.AddressItem.Latitude">
            <summary>
            緯度
            </summary>
        </member>
        <member name="T:K12.Data.ProgramPlanRecord">
            <summary>
            課程規劃資訊
            </summary>
        </member>
        <member name="M:K12.Data.ProgramPlanRecord.#ctor">
            <summary>
            預設建構式，將ID及Name設為空字串，並且初始化Subjects。
            </summary>
        </member>
        <member name="M:K12.Data.ProgramPlanRecord.#ctor(System.String)">
            <summary>
            新增課程規劃記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="Name">名稱</param>
        </member>
        <member name="M:K12.Data.ProgramPlanRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.ProgramPlanRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.ProgramPlanRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.ProgramPlanRecord.Name">
            <summary>
            名稱，必填
            </summary>
        </member>
        <member name="P:K12.Data.ProgramPlanRecord.Subjects">
            <summary>
            課程規劃科目列表
            </summary>
        </member>
        <member name="T:K12.Data.ProgramSubject">
            <summary>
            課程規劃科目記錄
            </summary>
        </member>
        <member name="M:K12.Data.ProgramSubject.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.ProgramSubject.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.ProgramSubject.Clone">
            <summary>
            複製課程規劃科目物件
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.ProgramSubject.ID">
            <summary>
            系統編號，唯讀屬性，若需設定請使用ProgramPlan的ID屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Name">
            <summary>
            名稱，必填；在此為唯讀屬性，若需設定請使用ProgramPlan的Name屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.GradeYear">
            <summary>
            年級
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Semester">
            <summary>
            學期
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Credit">
            <summary>
            學分數
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.FullName">
            <summary>
            完整名稱
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.SubjectName">
            <summary>
            科目名稱
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.RowIndex">
            <summary>
            介面索引
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.CalcFlag">
            <summary>
            是否計算成績，國中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Period">
            <summary>
            上課時段，國中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Domain">
            <summary>
            所屬領域，國中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Category">
            <summary>
            分類，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Entry">
            <summary>
            分項，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Level">
            <summary>
            級別，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.NotIncludedInCalc">
            <summary>
            不需評分，若資料庫值為空白，預設為false，亦即計入，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.NotIncludedInCredit">
            <summary>
            不計學分，若資料庫值為空白，預設為false，亦即計入學分，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.RequiredBy">
            <summary>
            校部訂，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.Required">
            <summary>
            必選修，高中專屬
            </summary>
        </member>
        <member name="P:K12.Data.ProgramSubject.StartLevel">
            <summary>
            開始級別，高中專屬
            </summary>
        </member>
        <member name="T:K12.Data.CourseTag">
            <summary>
            課程標籤類別，提供方法用來取得、新增、修改及刪除課程標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.CourseTag.SelectAll">
            <summary>
            取得所有課程標籤列表。
            </summary>
            <returns>List&lt;CourseTagRecord&gt;，代表多筆課程標籤物件。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;CourseTagRecord&gt; records = CourseTag.SelectAll();
                    foreach(CourseTagRecord record in records)
                        System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.CourseTag.SelectAll``1">
            <summary>
            取得所有課程標籤列表。
            </summary>
            <returns>List&lt;CourseTagRecord&gt;，代表多筆課程標籤物件。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;CourseTagRecord&gt; records = CourseTag.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.CourseTag.SelectByCourseID(System.String)">
            <summary>
            根據單筆課程編號取得課程標籤列表。
            </summary>
            <param name="CourseID">課程編號</param>
            <returns>List&lt;CourseTagRecord&gt;，代表多筆課程標籤物件。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseID(CourseID);
                  
                  foreach(CourseTagRecord record in records)
                      System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.CourseTag.SelectByCourseID``1(System.String)">
            <summary>
            根據單筆課程編號取得課程標籤列表。
            </summary>
            <param name="CourseID">課程編號</param>
            <returns>List&lt;CourseTagRecord&gt;，代表多筆課程標籤物件。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseID(ClassID);
            </example>
        </member>
        <member name="M:K12.Data.CourseTag.SelectByCourseIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號取得課程標籤列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;CourseTagRecord&gt;，代表多筆課程標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseIDs(CourseIDs);
                    
                    forech(CourseTagRecord record in records)
                        System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.CourseTag.SelectByCourseIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號取得課程標籤列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;CourseTagRecord&gt;，代表多筆課程標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseIDs(CourseIDs);
            </example>
        </member>
        <member name="M:K12.Data.CourseTag.Insert(K12.Data.CourseTagRecord)">
            <summary>
            新增單筆課程標籤記錄
            </summary>
            <param name="CourseTagRecord">課程標籤記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
               <code>
                CourseTagRecord  record = new CourseTagRecord(CourseID, TagConfigID); 
                string NewID = CourseTag.Insert(record);  
               </code>
            </example>
            <remarks>
            1.新增傳入的參數為課程編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks> 
        </member>
        <member name="M:K12.Data.CourseTag.Insert(System.Collections.Generic.IEnumerable{K12.Data.CourseTagRecord})">
            <summary>
            新增多筆課程標籤記錄
            </summary>
            <param name="CourseTagRecords">多筆課程記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                CourseTagRecord record = new CourseTagRecord(CourseID, TagConfigID); 
                List&lt;CourseTagRecord&gt; records = new List&lt;CourseTagRecord&gt;();
                records.Add(record);
                List&lt;string&gt; NewIDs = CourseTag.Insert(records);  
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為課程編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks>
        </member>
        <member name="M:K12.Data.CourseTag.Update(K12.Data.CourseTagRecord)">
            <summary>
            更新單筆課程標籤記錄
            </summary>
            <param name="CourseTagRecord">課程標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseID(CourseID);        
                    records[0].RefEntityID = CourseID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = CourseTag.Update(record[0]);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.CourseTag.Update(System.Collections.Generic.IEnumerable{K12.Data.CourseTagRecord})">
            <summary>
            更新多筆課程標籤記錄
            </summary>
            <param name="CourseTagRecords">多筆課程標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseID(CourseID);        
                    records[0].RefEntityID = CourseID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = CourseTag.Update(records);
                </code>
            </example>
            <remarks>
            1.更新的欄位值只有CourseID及TagConfigID，其它為唯讀欄位。
            2.傳回值為成功更新的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.CourseTag.Delete(System.Collections.Generic.IEnumerable{K12.Data.CourseTagRecord})">
            <summary>
            刪除多筆課程標籤記錄
            </summary>
            <param name="CourseTagRecords">多筆班級課程記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseID(CourseID);
                    int DeleteCount = CourseTag.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.CourseTag.Delete(K12.Data.CourseTagRecord)">
            <summary>
            刪除單筆課程標籤記錄
            </summary>
            <param name="CourseTagRecord">課程標籤記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.CourseTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;CourseTagRecord&gt; records = CourseTag.SelectByCourseID(CourseID);
                    int DeleteCount = CourseTag.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.CourseTag.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.CourseTag.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.CourseTag.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.AutoDictionary">
            <summary>
            神奇的自動字典，在取值或寫值時，不會產生錯誤，會自動增加 Key 到字典中，但 ContainsKey 不會自動增加 Key。
            </summary>
        </member>
        <member name="M:K12.Data.AutoDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            用指定的 Dictionary 當作基底資料。
            </summary>
            <param name="copySource"></param>
            <param name="readOnly">資料是否可寫入。</param>
        </member>
        <member name="M:K12.Data.AutoDictionary.#ctor(System.Xml.XmlElement,System.Boolean)">
            <summary>
            解析 Xml 內容到 Dictionary 中，如果有重覆的 Element 資料，會產生 Exception。
            </summary>
            <param name="data">Xml 資料，用 Element.LocalName 當作 Key， InnerXml 當作 Value。</param>
            <param name="readOnly">資料是否可寫入。</param>
        </member>
        <member name="M:K12.Data.AutoDictionary.#ctor(System.Xml.XmlNodeList,System.String,System.Boolean)">
            <param name="data">Xml 資料，用指定的屬性值當作 Key，InnerText 當作 Value。</param>
            <param name="keyAttName">屬性名稱，該屬性的值會被當作是 Dictionary 的 Key，如果該屬性不存在會產生 Exception。</param>
            <param name="readOnly">資料是否可寫入。</param>
        </member>
        <member name="M:K12.Data.AutoDictionary.#ctor(System.Xml.XmlNodeList,System.String,System.String,System.Boolean)">
            <param name="data">Xml 資料，使用指定的屬性值當作 Key 與 Value。</param>
            <param name="keyAttName">屬性名稱，該屬性的值會被當作 Dictionary 的 Key，如果該屬性不存在會產生 Exception。</param>
            <param name="valueAttName">屬性名稱，該屬性的值會被當作 Dictionary 的 Value，如果該屬性不存在會產生 Exception。</param>
            <param name="readOnly">資料是否可寫入。</param>
        </member>
        <member name="M:K12.Data.AutoDictionary.Add(System.String)">
            <summary>
            新增 Key 到 Dictionary 中，值為 string.Empty，如果已經存在該 Key 會產生 Exception。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:K12.Data.AutoDictionary.Equals(K12.Data.AutoDictionary)">
            <summary>
            比較兩個 AutoDictionary 是否相同。
            </summary>
            <param name="obj">要比較的 AutoDictionary。</param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.AutoDictionary.Clone">
            <summary>
            複製一份相同資料並且可讀寫的 AutoDictioanry。
            </summary>
            <returns></returns>
        </member>
        <member name="T:K12.Data.School">
            <summary>
            提供學校相關資訊。
            </summary>
        </member>
        <member name="M:K12.Data.School.SelectElementarySchools">
            <summary>
            取得所有國小學校列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.School.SelectJuniorSchools">
            <summary>
            取得學所有國中學校列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.School.Configuration">
            <summary>
            取得學校的組態資料。
            </summary>
        </member>
        <member name="P:K12.Data.School.Code">
            <summary>
            取得學校代碼。
            </summary>
        </member>
        <member name="P:K12.Data.School.DefaultSchoolYear">
            <summary>
            取得預設學年度。
            </summary>
        </member>
        <member name="P:K12.Data.School.DefaultSemester">
            <summary>
            取得預設學期。
            </summary>
        </member>
        <member name="P:K12.Data.School.ChineseName">
            <summary>
            取得學校中文名稱。
            </summary>
        </member>
        <member name="P:K12.Data.School.EnglishName">
            <summary>
            取得學校英文名稱。
            </summary>
        </member>
        <member name="P:K12.Data.School.Address">
            <summary>
            取得學校地址。
            </summary>
        </member>
        <member name="P:K12.Data.School.Telephone">
            <summary>
            取得學生電話資料。
            </summary>
        </member>
        <member name="P:K12.Data.School.Fax">
            <summary>
            取得學校傳真。
            </summary>
        </member>
        <member name="T:K12.Data.Sibling">
            <summary>
            手足名單類別，提供方法用來取得及修改手足名單資訊
            </summary>
        </member>
        <member name="E:K12.Data.Sibling.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.FieldAttribute">
            <summary>
            標示在Vlaue Object上的屬性Attribute
            </summary>
        </member>
        <member name="M:K12.Data.FieldAttribute.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="P:K12.Data.FieldAttribute.Caption">
            <summary>
            顯示名稱
            </summary>
        </member>
        <member name="P:K12.Data.FieldAttribute.EntityName">
            <summary>
            所屬Entity，例如Student、Class、Teacher、Course
            </summary>
        </member>
        <member name="P:K12.Data.FieldAttribute.EntityCaption">
            <summary>
            所屬Entity顯示名稱，例如學生、班級、教師、課程
            </summary>
        </member>
        <member name="P:K12.Data.FieldAttribute.IsEntityPrimaryKey">
            <summary>
            所屬的Entity中是否為主鍵
            </summary>
        </member>
        <member name="P:K12.Data.FieldAttribute.Remark">
            <summary>
            備註資訊
            </summary>
        </member>
        <member name="T:K12.Data.CacheSet`1">
            <summary>
            快取集合類別，提供實際提供快取的類別或是介面，一般使用在向快取類別要資料時，快取類別傳回快取資料，並告知沒有資料的編號列表。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:K12.Data.CacheSet`1.WantIDs">
            <summary>
            缺乏的資料編號列表
            </summary>
        </member>
        <member name="F:K12.Data.CacheSet`1.Records">
            <summary>
            實際的快取資料
            </summary>
        </member>
        <member name="M:K12.Data.CacheSet`1.#ctor">
            <summary>
            無參數建構式，會初始化NoExistIDs及Records
            </summary>
        </member>
        <member name="T:K12.Data.TeacherTag">
            <summary>
            教師標籤類別，提供方法用來取得、新增、修改及刪除班級標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.TeacherTag.SelectAll">
            <summary>
            取得所有教師標籤列表。
            </summary>
            <returns>List&lt;TeacherTagRecord&gt;，代表多筆教師標籤物件。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectAll();
                   
                    foreach(TeacherTagRecord record in records)
                        System.Console.WriteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TeacherTag.SelectAll``1">
            <summary>
            取得所有教師標籤列表。
            </summary>
            <returns>List&lt;TeacherTagRecord&gt;，代表多筆教師標籤物件。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.TeacherTag.SelectByTeacherID(System.String)">
            <summary>
            根據單筆教師編號取得教師標籤列表。
            </summary>
            <param name="TeacherID">教師編號</param>
            <returns>List&lt;TeacherTagRecord&gt;，代表多筆教師標籤物件。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <sample>
                <code>
                    List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherID(TeacherID);
                   
                    foreach(TeacherTagRecord record in records)
                      System.Console.WriteLine(record.Name);
                </code>
            </sample>
        </member>
        <member name="M:K12.Data.TeacherTag.SelectByTeacherID``1(System.String)">
            <summary>
            根據單筆教師編號取得教師標籤列表。
            </summary>
            <param name="TeacherID">教師編號</param>
            <returns>List&lt;TeacherTagRecord&gt;，代表多筆教師標籤物件。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherID(TeacherID);
            </example>
        </member>
        <member name="M:K12.Data.TeacherTag.SelectByTeacherIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號取得教師標籤列表。
            </summary>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TeacherTagRecord&gt;，代表多筆教師標籤物件。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherIDs(TeacherIDs);
               
                forech(TeacherTagRecord record in records)
                    System.Console.WriteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TeacherTag.SelectByTeacherIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號取得教師標籤列表。
            </summary>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TeacherTagRecord&gt;，代表多筆教師標籤物件。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherIDs(TeacherIDs);
            </example>
        </member>
        <member name="M:K12.Data.TeacherTag.Insert(K12.Data.TeacherTagRecord)">
            <summary>
            新增單筆教師標籤記錄
            </summary>
            <param name="TeacherTagRecord">教師標籤記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TeacherTagRecord  record = new TeacherTagRecord(TeacherID, TagConfigID);
                string NewID = TeacherTag.Insert(record); 
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為教師編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks>
        </member>
        <member name="M:K12.Data.TeacherTag.Insert(System.Collections.Generic.IEnumerable{K12.Data.TeacherTagRecord})">
            <summary>
            新增多筆教師標籤記錄
            </summary>
            <param name="TeacherTagRecords">多筆教師編號記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TeacherTagRecord record = new TeacherTagRecord(TeacherID, TagConfigID);
                List&lt;TeacherTagRecord&gt; records = new List&lt;TeacherTagRecord&gt;();
                records.Add(record);
                List&lt;string&gt; NewIDs = TeacherTag.Insert(records); 
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為班級編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks>
        </member>
        <member name="M:K12.Data.TeacherTag.Update(K12.Data.TeacherTagRecord)">
            <summary>
            更新單筆教師標籤記錄
            </summary>
            <param name="TeacherTagRecord"> 教師標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherID(TeacherID);       
                    records[0].RefEntityID = TeacherID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = TeacherTag.Update(record[0]);
                </code>
            </example>
            <remarks>
            1.更新的欄位值只有TeacherID及TagConfigID，其它為唯讀欄位。
            2.傳回值為成功更新的筆數。
            </remarks>       
        </member>
        <member name="M:K12.Data.TeacherTag.Update(System.Collections.Generic.IEnumerable{K12.Data.TeacherTagRecord})">
            <summary>
            更新多筆教師標籤記錄
            </summary>
            <param name="TeacherTagRecords">多筆教師標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherID(TeacherID);       
                    records[0].RefEntityID = TeacherID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = TeacherTag.Update(records);
                </code>
            </example>
            <remarks>
            1.更新的欄位值只有TeacherID及TagConfigID，其它為唯讀欄位。
            2.傳回值為成功更新的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.TeacherTag.Delete(System.Collections.Generic.IEnumerable{K12.Data.TeacherTagRecord})">
            <summary>
            刪除多筆教師標籤記錄
            </summary>
            <param name="TeacherTagRecords">多筆教師標籤記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherID(TeacherID);
                    int DeleteCount = TeacherTag.Delete(records);
                </code>
            </example>
            <remarks>
            傳回值為成功刪除的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.TeacherTag.Delete(K12.Data.TeacherTagRecord)">
            <summary>
            刪除單筆教師記錄
            </summary>
            <param name="TeacherTagRecord">教師標籤記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TeacherTagRecord&gt; records = TeacherTag.SelectByTeacherID(TeacherID);
                    int DeleteCount = TeacherTag.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.TeacherTag.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.TeacherTag.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.TeacherTag.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.Teacher">
            <summary>
            教師類別，提供方法用來取得、新增、修改及刪除教師資訊
            </summary>
        </member>
        <member name="M:K12.Data.Teacher.#cctor">
            <summary>
            Static建構式
            </summary>
        </member>
        <member name="M:K12.Data.Teacher.SelectAll">
            <summary>
            取得所有教師記錄列表。
            </summary>
            <returns>List&lt;TeacherRecord&gt;，代表多筆教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TeacherRecord&gt; records = Teacher.SelectAll();
                
                foreach(TeacherRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Teacher.SelectAll``1">
            <summary>
            取得所有教師記錄列表。
            </summary>
            <typeparam name="T">教師記錄物件型別，K12共用為K12.Data.TeacherRecord</typeparam>
            <returns>List&lt;TeacherRecord&gt;，代表多筆教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherRecord&gt; teacherrecs = Teacher.SelectAll&lt;K12.Data.TeacherRecord&gt;();
            </example>
        </member>
        <member name="M:K12.Data.Teacher.SelectByID(System.String)">
            <summary>
            根據單筆教師編號取得教師記錄物件。
            </summary>
            <param name="TeacherID">教師編號</param>
            <returns>TeacherRecord，代表教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TeacherRecord record = Teacher.SelectByID(TeacherID);
                
               if (record != null)
                   System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks>若是TeacherID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Teacher.SelectByID``1(System.String)">
            <summary>
            根據單筆教師編號取得教師記錄物件。
            </summary>
            <typeparam name="T">教師記錄物件型別，K12共用為K12.Data.TeacherRecord</typeparam>
            <param name="TeacherID">教師編號</param>
            <returns>TeacherRecord，代表教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                TeacherRecord teacherrec = Teacher.SelectByID&lt;K12.Data.TeacherRecord&gt;(TeacherID);
            </example>
        </member>
        <member name="M:K12.Data.Teacher.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號取得教師記錄列表。
            </summary>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TeacherRecord&gt;，代表多教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TeacherRecord&gt; records = Teacher.SelectByIDs(TeacherIDs);
                
                foreach(TeacherRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Teacher.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號取得教師記錄列表。
            </summary>
            <typeparam name="T">教師記錄物件型別，K12共用為K12.Data.TeacherRecord</typeparam>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TeacherRecord&gt;，代表多教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherRecord&gt; teacherrecs = Teacher.SelectByIDs&lt;K12.Data.TeacherRecord&gt;(TeacherIDs);
            </example>
        </member>
        <member name="M:K12.Data.Teacher.GetCacheData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號取得教師記錄列表。
            </summary>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TeacherRecord&gt;，代表多教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherRecord&gt; teacherrecs = Teacher.SelectByIDs(TeacherIDs);
            </example>
        </member>
        <member name="M:K12.Data.Teacher.GetDirectData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號取得教師記錄列表。
            </summary>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TeacherRecord&gt;，代表多教師記錄物件。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TeacherRecord&gt; teacherrecs = Teacher.SelectByIDs(TeacherIDs);
            </example>
        </member>
        <member name="M:K12.Data.Teacher.Insert(K12.Data.TeacherRecord)">
            <summary>
            新增單筆教師記錄
            </summary>
            <param name="TeacherRecord">教師記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    TeacherRecord newrecord = new TeacherRecord();
                    newrecord.Name = (new System.Random()).NextDouble().ToString();
                    strng NewID = Teacher.Insert(newrecord)
                    TeacherRecord record = Teacher.SelectByID(NewID);
                    System.Console.Writeln(record.Name);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為課程名稱（Name）。
            </remarks>
        </member>
        <member name="M:K12.Data.Teacher.Insert(System.Collections.Generic.IEnumerable{K12.Data.TeacherRecord})">
            <summary>
            新增多筆教師記錄
            </summary>
            <param name="TeacherRecords">多筆教師記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    TeacherRecord record = new TeacherRecord();
                    record.Name = (new System.Random()).NextDouble().ToString();
                    List&lt;TeacherRecord&gt; records = new List&lt;TeacherRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = Teacher.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Teacher.Update(K12.Data.TeacherRecord)">
            <summary>
            更新單筆教師記錄
            </summary>
            <param name="TeacherRecord">教師記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TeacherRecord record = Teacher.SelectByID(TeacherID);
                record.Name = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Teacher.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Teacher.Update(System.Collections.Generic.IEnumerable{K12.Data.TeacherRecord})">
            <summary>
            更新多筆教師記錄
            </summary>
            <param name="TeacherRecords">多筆教師記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TeacherRecord record = Teacher.SelectByID(CourseID);
                record.Name = (new System.Random()).NextDouble().ToString();
                List&lt;TeacherRecord&gt; records = new List&lt;TeacherRecord&gt;();
                records.Add(record);
                int UpdateCount = Teacher.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Teacher.Delete(System.Collections.Generic.IEnumerable{K12.Data.TeacherRecord})">
            <summary>
            刪除多筆教師記錄
            </summary>
            <param name="TeacherRecords">多筆教師記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;TeacherRecord&gt; records = Teacher.SelectByIDs(CourseIDs);
                  int DeleteCount = Teacher.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Teacher.Delete(K12.Data.TeacherRecord)">
            <summary>
            刪除單筆教師記錄
            </summary>
            <param name="TeacherRecord">教師記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.TeacherRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  TeacherRecord record = Teacher.SelectByID(TeacherID);
                  int DeleteCount = Teacher.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Teacher.Delete(System.String)">
            <summary>
            刪除單筆教師記錄
            </summary>
            <param name="TeacherID">教師記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Teacher.Delete(TeacherID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Teacher.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆教師記錄
            </summary>
            <param name="TeacherIDs">多筆教師記錄編琥</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Teacher.Delete(TeacherIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Teacher.RemoveAll">
            <summary>
            移除快取當中所有的資料
            </summary>
        </member>
        <member name="M:K12.Data.Teacher.RemoveByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師編號移除快取資料。
            </summary>
            <param name="TeacherIDs">多筆教師編號</param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="E:K12.Data.Teacher.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Teacher.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Teacher.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Teacher.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.ParentRecord">
            <summary>
            家長及監護人資訊
            </summary>
        </member>
        <member name="M:K12.Data.ParentRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.ParentRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.ParentRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.ParentRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.Student">
            <summary>
            所屬學生記錄物件
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.Father">
            <summary>
            父親資訊
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherEducationDegree">
            <summary>
            父親最高學歷，此為唯讀屬性，要修改請使用Father.EducationDegree屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherIDNumber">
            <summary>
            父親身份證字號，此為唯讀屬性，要修改請使用Father.IDNumber屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherJob">
            <summary>
            父親工作，此為唯讀屬性，要修改請使用Father.Job屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherLiving">
            <summary>
            父親存歿，此為唯讀屬性，要修改請使用Father.Living屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherName">
            <summary>
            父親姓名，此為唯讀屬性，要修改請使用Father.Name屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherNationality">
            <summary>
            父親國籍，此為唯讀屬性，要修改請使用Father.Nationality屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherPhone">
            <summary>
            父親電話，此為唯讀屬性，要修改請使用Father.Phone屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.FatherEMail">
            <summary>
            父親電子郵件，此為唯讀屬性，要修改請使用Father.EMail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.Mother">
            <summary>
            母親資訊
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherEducationDegree">
            <summary>
            母親最高學歷，此為唯讀屬性，要修改請使用Mother.EducationDegree屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherIDNumber">
            <summary>
            母親身份證字號，此為唯讀屬性，要修改請使用Mother.IDNumber屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherJob">
            <summary>
            母親工作，此為唯讀屬性，要修改請使用Mother.Job屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherLiving">
            <summary>
            母親存歿，此為唯讀屬性，要修改請使用Mother.Living屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherName">
            <summary>
            母親姓名，此為唯讀屬性，要修改請使用Mother.Name屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherNationality">
            <summary>
            母親國籍，此為唯讀屬性，要修改請使用Mother.Nationality屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherPhone">
            <summary>
            母親電話，此為唯讀屬性，要修改請使用Mother.Phone屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.MotherEMail">
            <summary>
            母親電子郵件，此為唯讀屬性，要修改請使用Mother.EMail屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.Custodian">
            <summary> 
            監護人資訊
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianEducationDegree">
            <summary>
            監護人最高學歷，此為唯讀屬性，要修改請使用Custodian.EducationDegree屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianIDNumber">
            <summary>
            監護人身份證字號，此為唯讀屬性，要修改請使用Custodian.IDNumber屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianJob">
            <summary>
            監護人工作，此為唯讀屬性，要修改請使用Custodian.Job屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianRelationship">
            <summary>
            監護人稱謂，此為唯讀屬性，要修改請使用Custodian.Relationship屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianName">
            <summary>
            監護人姓名，此為唯讀屬性，要修改請使用Custodian.Name屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianNationality">
            <summary>
            監護人國籍，此為唯讀屬性，要修改請使用Custodian.Nationality屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianPhone">
            <summary>
            監護人電話，此為唯讀屬性，要修改請使用Custodian.Phone屬性。
            </summary>
        </member>
        <member name="P:K12.Data.ParentRecord.CustodianEMail">
            <summary>
            監護人電子郵件，此為唯讀屬性，要修改請使用Custodian.EMail屬性。
            </summary>
        </member>
        <member name="T:K12.Data.ParentBase">
            <summary>
            父親、母親及監護人所共同繼承的類別
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.Job">
            <summary>
            工作
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.EducationDegree">
            <summary>
            最高學歷
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.Nationality">
            <summary>
            國籍
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.IDNumber">
            <summary>
            身分證號
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.Phone">
            <summary>
            電話
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.EMail">
            <summary>
            電子郵件
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.CompanyName">
            <summary>
            公司名稱
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.CompanyTitle">
            <summary>
            公司職稱
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.CompanyCategory">
            <summary>
            公司分類，與Job欄位意義相同，但若要仔細使用Company相關欄位
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.CellPhone">
            <summary>
            手機
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.HomePhone">
            <summary>
            住家電話
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.CompanyPhone">
            <summary>
            辦公室電話
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressZipCode">
            <summary>
            地址郵遞區號
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressCounty">
            <summary>
            地址縣市
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressTown">
            <summary>
            地址鄉鎮市區
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressDistrict">
            <summary>
            地址村里
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressArea">
            <summary>
            地址鄰
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressDetail">
            <summary>
            地址其他
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressLongitude">
            <summary>
            地址經度
            </summary>
        </member>
        <member name="P:K12.Data.ParentBase.AddressLatitude">
            <summary>
            地址緯度
            </summary>
        </member>
        <member name="T:K12.Data.Father">
            <summary>
            父親資訊
            </summary>
        </member>
        <member name="M:K12.Data.Father.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.Father.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.Father.Load(System.Xml.XmlElement)">
            <summary>
            依XML載入設定值
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.Father.ToXml">
            <summary>
            輸出成XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.Father.Living">
            <summary>
            存歿
            </summary>
        </member>
        <member name="T:K12.Data.Mother">
            <summary>
            母親資訊
            </summary>
        </member>
        <member name="M:K12.Data.Mother.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.Mother.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.Mother.Living">
            <summary>
            存歿，型態需要改為boolean
            </summary>
        </member>
        <member name="T:K12.Data.Custodian">
            <summary>
            監護人資訊
            </summary>
        </member>
        <member name="M:K12.Data.Custodian.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.Custodian.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.Custodian.Relationship">
            <summary>
            稱謂
            </summary>
        </member>
        <member name="T:K12.Data.TCInstructRecord">
            <summary>
            教師教授課程資訊
            </summary>
        </member>
        <member name="M:K12.Data.TCInstructRecord.#ctor(System.String,System.String,System.Int32)">
             <summary>
             新增教師授課記錄建構式，參數為新增記錄的必填欄位
             </summary>
            <param name="RefTeacherID">所屬授課教師編號</param>
            <param name="RefCourseID">所屬課程編號</param>
            <param name="Sequence">教師順序</param>
        </member>
        <member name="M:K12.Data.TCInstructRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.TCInstructRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.TCInstructRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.TCInstructRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.TCInstructRecord.Sequence">
            <summary>
            教師順序，必填
            </summary>
        </member>
        <member name="P:K12.Data.TCInstructRecord.RefTeacherID">
            <summary>
            所屬授課教師編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.TCInstructRecord.RefCourseID">
            <summary>
            所屬課程編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.TCInstructRecord.Teacher">
            <summary>
            所屬教師
            </summary>
        </member>
        <member name="P:K12.Data.TCInstructRecord.Course">
            <summary>
            所屬課程
            </summary>
        </member>
        <member name="T:K12.Data.SCETake">
            <summary>
            學生期中成績類別，提供方法用來取得、新增、修改及刪除學生期中成績資訊
            </summary>
        </member>
        <member name="M:K12.Data.SCETake.SelectAll">
            <summary>
            取得所有學生期中成績列表。
            </summary>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectAll``1">
            <summary>
            取得所有學生期中成績列表。
            </summary>
            <typeparam name="T">學生期中成績記錄物件型別，K12共用為K12.Data.SCETakeRecord</typeparam>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectAll&lt;K12.Data.SCETakeRecord&gt;();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.Select(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生期中成績編號取得學生期中成績列表。
            </summary>
            <param name="SCETakeIDs">多筆學生期中成績編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByIDs(SCETakeIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生期中成績編號取得學生期中成績列表。
            </summary>
            <typeparam name="T">學生期中成績記錄物件型別，K12共用為K12.Data.SCETakeRecord</typeparam>
            <param name="SCETakeIDs">多筆學生期中成績編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByIDs&lt;K12.Data.SCETakeRecord&gt;(SCETakeIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生期中成績編號取得學生期中成績列表。
            </summary>
            <param name="SCETakeIDs">多筆學生期中成績編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByIDs(SCETakeIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生期中成績編號取得學生期中成績列表。
            </summary>
            <typeparam name="T">學生期中成績記錄物件型別，K12共用為K12.Data.SCETakeRecord</typeparam>
            <param name="SCETakeIDs">多筆學生期中成績編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByIDs&lt;K12.Data.SCETakeRecord&gt;(SCETakeIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByCourseAndExam(System.String,System.String)">
            <summary>
            根據課程編號及考試項目編號取得學生期中成績列表。
            </summary>
            <param name="CourseID">課程編號</param> 
            <param name="ExamID">考試項目編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByCourseAndExam(CourseID,ExamID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByCourseAndExam``1(System.String,System.String)">
            <summary>
            根據課程編號及考試項目編號取得學生期中成績列表。
            </summary>
            <typeparam name="T">學生期中成績記錄物件型別，K12共用為K12.Data.SCETakeRecord</typeparam>
            <param name="CourseID">課程編號</param> 
            <param name="ExamID">考試項目編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByCourseAndExam&lt;K12.Data.SCETakeRecord&gt;(CourseID,ExamID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByCourseAndExam(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            根據多筆課程編號及單筆考試項目編號取得學生期中成績列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <param name="ExamID">單筆考試項目編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByCourseAndExam(CourseIDs,ExamID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByCourseAndExam``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            根據多筆課程編號及單筆考試項目編號取得學生期中成績列表。
            </summary>
            <typeparam name="T">學生期中成績記錄物件型別，K12共用為K12.Data.SCETakeRecord</typeparam>
            <param name="CourseIDs">多筆課程編號</param>
            <param name="ExamID">單筆考試項目編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByCourseAndExam&lt;K12.Data.SCETakeRecord&gt;(CourseIDs,ExamID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentAndCourse(System.String,System.String)">
            <summary>
            根據學生編號及課程編號取得學生期中成績列表。
            </summary>
            <param name="CourseID">課程編號</param> 
            <param name="StudentID">學生編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentAndCourse(StudentID,CourseID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentAndCourse``1(System.String,System.String)">
            <summary>
            根據學生編號及課程編號取得學生期中成績列表。
            </summary>
            <typeparam name="T">學生期中成績記錄物件型別，K12共用為K12.Data.SCETakeRecord</typeparam>
            <param name="CourseID">課程編號</param> 
            <param name="StudentID">學生編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentAndCourse&lt;K12.Data.SCETakeRecord&gt;(StudentID,CourseID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentAndCourse(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號及多筆課程編號取得學生期中成績列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="CourseIDs">多筆課程編號</param> 
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentAndCourse(StudentIDs,CourseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentAndCourse``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號及多筆課程編號取得學生期中成績列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="CourseIDs">多筆課程編號</param> 
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentAndCourse(StudentIDs,CourseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生編號取得學生期中成績列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentID(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生編號取得學生期中成績列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentID(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生期中成績列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentID(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.SCETake.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生期中成績列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SCETakeRecord&gt;，代表多筆學生期中成績記錄物件。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SCETakeRecord&gt; records = SCETake.SelectByStudentID(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.SCETake.Insert(K12.Data.SCETakeRecord)">
            <summary>
            新增單筆學生期中成績記錄
            </summary>
            <param name="SCETakeRecord">學生期中成績記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.SCETake.Insert(System.Collections.Generic.IEnumerable{K12.Data.SCETakeRecord})" -->
        <member name="M:K12.Data.SCETake.Update(K12.Data.SCETakeRecord)">
            <summary>
            更新單筆學生期中成績記錄
            </summary>
            <param name="SCETakeRecord">學生期中成績記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.SCETake.Update(System.Collections.Generic.IEnumerable{K12.Data.SCETakeRecord})">
            <summary>
            更新多筆學生期中成績記錄
            </summary>
            <param name="SCETakeRecords">多筆學生期中成績記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.SCETake.Delete(K12.Data.SCETakeRecord)">
            <summary>
            刪除單筆學生期中成績記錄
            </summary>
            <param name="SCETakeRecord">學生期中成績記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.SCETake.Delete(System.String)">
            <summary>
            刪除單筆學生期中成績記錄
            </summary>
            <param name="SCETakeID">學生期中成績編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.SCETake.Delete(System.Collections.Generic.IEnumerable{K12.Data.SCETakeRecord})">
            <summary>
            刪除多筆學生期中成績記錄
            </summary>
            <param name="SCETakeRecords">多筆學生期中成績記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.SCETakeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.SCETake.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生期中成績記錄
            </summary>
            <param name="SCETakeIDs">多筆學生期中成績編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="P:K12.Data.SCETake.CacheProvider">
            <summary>
            指定快取介面，在設定快取介面時會將快取內對應的資料清空。
            </summary>
        </member>
        <member name="E:K12.Data.SCETake.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.SCETake.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.SCETake.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.EntityCacheHelper">
            <summary>
            提供Entity的Cache協助，抽像化Entity與CacheProvider之間的互動
            </summary>
        </member>
        <member name="M:K12.Data.EntityCacheHelper.#ctor">
            <summary>
            建構式為protected只有後代才能建立
            </summary>
        </member>
        <member name="M:K12.Data.EntityCacheHelper.ValidateKey(System.String)">
            <summary>
            驗證輸入的鍵值是否合法，當要求查尋資料時若鍵值不合法則不進行查尋
            預設驗證方法為是否可轉化為int
            </summary>
            <param name="key">鍵值</param>
            <returns>是否合法</returns>
        </member>
        <member name="M:K12.Data.EntityCacheHelper.SelectFromServerByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            直接根據編號列表取得資料
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.EntityCacheHelper.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據編號列表取得資料，會先從快取中取得資料，沒有的資料再呼叫SelectFromServerByIDs
            </summary>
            <param name="IDs">編號列表</param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.EntityCacheHelper.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            將快取資料移除
            </summary>
            <param name="IDs"></param>
        </member>
        <member name="M:K12.Data.EntityCacheHelper.NotifyRemove(System.Object,K12.Data.DataChangedEventArgs)">
            <summary>
            提供事件方法可被告知要移除快取資料
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:K12.Data.EntityCacheHelper.Name">
            <summary>
            快取的類別名稱
            </summary>
        </member>
        <member name="P:K12.Data.EntityCacheHelper.Provider">
            <summary>
            快取提供者介面
            </summary>
        </member>
        <member name="T:K12.Data.SummaryType">
            <summary>
            缺曠獎懲統計類別
            1.Discipline：獎懲統計
            2.Attendance：缺曠統計
            3.DisciplineAndAttendance：獎懲統計及缺曠統計
            4.None：無
            </summary>
        </member>
        <member name="T:K12.Data.MoralScoreRecord">
            <summary>
            學期德行評量資訊
            </summary>
        </member>
        <member name="M:K12.Data.MoralScoreRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.MoralScoreRecord.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            新增試別項目記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
        </member>
        <member name="M:K12.Data.MoralScoreRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]> 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.MoralScoreRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.RefStudentID">
            <summary>
            所屬學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.Student">
            <summary>
            所屬學生物件
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.ID">
            <summary>
            系統編號 
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.Diff">
            <summary>
            導師加減分
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.Comment">
            <summary>
            導師評語
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.OtherDiff">
            <summary>
            其他加減分
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.TextScore">
            <summary>
            學期文字評量
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.InitialSummary">
            <summary>
            非明細缺曠獎懲統計
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.InitialSummaryType">
            <summary>
            非明細缺曠獎懲統計類別，根據InitialSummary當中的內容來判斷包含的統計類別
            </summary>
        </member>
        <member name="P:K12.Data.MoralScoreRecord.Summary">
            <summary>
            學期缺曠統計，為轉入學期缺曠統計再加上系統缺曠，此計算需經過ischool介面完成
            </summary>
        </member>
        <member name="T:K12.Data.AEIncludeRecord">
            <summary>
            評分樣板資訊
            </summary>
        </member>
        <member name="M:K12.Data.AEIncludeRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.AEIncludeRecord.#ctor(System.String,System.String)">
            <summary>
            新增評分樣板記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefExamID">所屬試別項目編號</param>
            <param name="RefAssessmentSetupID">所屬評分樣板編號</param>
        </member>
        <member name="M:K12.Data.AEIncludeRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            建構式，傳入XML Element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.AEIncludeRecord.Load(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.AEIncludeRecord.ToXML">
             <summary>
             XML規格如下
             <![CDATA[
            &gt;IncludeExam ID="169">
                <ExamTemplateID>1</ExamTemplateID>
                <RefExamID>1</RefExamID>
                <UseText>否</UseText>
                <UseScore>是</UseScore>
                <Weight>15</Weight>
                <EndTime>2009/06/02 23:59</EndTime>
                <StartTime>2009/05/20 11:00</StartTime>
                <Extension>
                    <Extension>
                        <UseEffort>否</UseEffort>
                        <UseText>否</UseText>
                    </Extension>
                </Extension>
                <OpenTeacherAccess>是</OpenTeacherAccess>
                <InputRequired>是</InputRequired>
            </IncludeExam>
             ]]>
             </summary>
             <returns></returns>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.RefAssessmentSetupID">
            <summary>
            所屬評量設定編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.RefExamID">
            <summary>
            所屬試別項目編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.ExamName">
            <summary>
            試別名稱
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.Exam">
            <summary>
            試別項目記錄物件
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.UseText">
            <summary>
            是否有文字評量（高中使用） 
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.UseScore">
            <summary>
            是否有百分比成績（高中使用）
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.Weight">
            <summary>
            是各評量配分的比例，例如第一次月考 30%、第二次月考 30%、期末考 40%，其值為0到100。
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.StartTime">
            <summary>
            輸入開始時間
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.EndTime">
            <summary>
            輸入結束時間
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.AssessmentSetup">
            <summary>
            試別樣版記錄物件
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.OpenTeacherAccess">
            <summary>
            是否開放TeacherAccess輸入成績
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.InputRequired">
            <summary>
            是否強制輸入成績
            </summary>
        </member>
        <member name="P:K12.Data.AEIncludeRecord.Extension">
            <summary>
            延伸欄位資訊
            </summary>
        </member>
        <member name="T:K12.Data.AEInclude">
            <summary>
            評分樣板類別，提供方法用來取得、新增、修改及刪除評分樣板資訊
            </summary>
        </member>
        <member name="M:K12.Data.AEInclude.SelectAll">
            <summary>
            取得所有評分樣板列表。
            </summary>
            <returns>List&lt;AEIncludeRecord&gt;，代表多筆評分樣板記錄物件。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AEIncludeRecord&gt; aeincluderecords = AEInclude.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.SelectAll``1">
            <summary>
            取得所有評分樣板列表。
            </summary>
            <typeparam name="T">評分樣板記錄物件型別，K12共用為K12.Data.AEIncludeRecord</typeparam>
            <returns>List&lt;AEIncludeRecord&gt;，代表多筆評分樣板記錄物件。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AEIncludeRecord&gt; aeincluderecords = AEInclude.SelectAll&lt;K12.Data.AEIncludeRecord&gt;();
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆評分樣板編號取得評分樣板列表。
            </summary>
            <param name="AEIncludeIDs">多筆評分樣板編號</param>
            <returns>List&lt;AEIncludeRecord&gt;，代表多筆評分樣板記錄物件。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AEIncludeRecord&gt; aeincluderecords = AEInclude.SelectByIDs(AEIncludeIDs);
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆評分樣板編號取得評分樣板列表。
            </summary>
            <typeparam name="T">評分樣板記錄物件型別，K12共用為K12.Data.AEIncludeRecord</typeparam>
            <param name="AEIncludeIDs">多筆評分樣板編號</param>
            <returns>List&lt;AEIncludeRecord&gt;，代表多筆評分樣板記錄物件。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AEIncludeRecord&gt; aeincluderecords = AEInclude.SelectByIDs&lt;K12.Data.AEIncludeRecord&gt;(AEIncludeIDs);
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.SelectByAssessmentSetupID(System.String)">
            <summary>
            根據單筆評量設定編號取得評分樣板列表。
            </summary>
            <param name="AssessmentSetupID">單筆評量設定編號</param>
            <returns>List&lt;AEIncludeRecord&gt;，代表多筆評分樣板記錄物件。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AEIncludeRecord&gt; aeincluderecords = AEInclude.SelectByIDs(AEIncludeIDs);
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.SelectByAssessmentSetupIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆單筆評量設定編號取得評分樣板列表。
            </summary>
            <param name="AssessmentSetupIDs">多筆評量設定編號</param>
            <returns>List&lt;AEIncludeRecord&gt;，代表多筆評分樣板記錄物件。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AEIncludeRecord&gt; aeincluderecords = AEInclude.SelectByIDs(AEIncludeIDs);
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.AEInclude.Insert(K12.Data.AEIncludeRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.AEInclude.Insert(System.Collections.Generic.IEnumerable{K12.Data.AEIncludeRecord})" -->
        <member name="M:K12.Data.AEInclude.Update(K12.Data.AEIncludeRecord)">
            <summary>
            更新單筆評分樣板記錄
            </summary>
            <param name="AEIncludeRecord">評分樣板記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.Update(System.Collections.Generic.IEnumerable{K12.Data.AEIncludeRecord})">
            <summary>
            更新多筆評分樣板記錄
            </summary>
            <param name="AEIncludeRecords">多筆評分樣板記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.Delete(K12.Data.AEIncludeRecord)">
            <summary>
            刪除單筆評分樣板記錄
            </summary>
            <param name="AEIncludeRecord">評分樣板記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.Delete(System.String)">
            <summary>
            刪除單筆評分樣板記錄
            </summary>
            <param name="AEIncludeRecordID">評分樣板記錄編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.Delete(System.Collections.Generic.IEnumerable{K12.Data.AEIncludeRecord})">
            <summary>
            刪除多筆評分樣板記錄
            </summary>
            <param name="AEIncludeRecords">多筆評分樣板記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.AEIncludeRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AEInclude.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆評分樣板記錄
            </summary>
            <param name="AEIncludeRecordIDs">多筆評分樣板記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.UpdateRecordBatchRecord">
            <summary>
            異動名冊記錄物件
            </summary>
        </member>
        <member name="M:K12.Data.UpdateRecordBatchRecord.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            必填欄位建構式
            </summary>
            <param name="Name">名稱</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
        </member>
        <member name="M:K12.Data.UpdateRecordBatchRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.UpdateRecordBatchRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.UpdateRecordBatchRecord.Load(System.Xml.XmlElement)">
            <summary>
            用XML載入
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.ID">
            <summary>
            編號
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.Name">
            <summary>
            名稱，必填
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.ADDate">
            <summary>
            核准日期
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.ADNumber">
            <summary>
            核准文號
            </summary>
        </member>
        <member name="P:K12.Data.UpdateRecordBatchRecord.Content">
            <summary>
            內容
            </summary>
        </member>
        <member name="T:K12.Data.TownRecord">
            <summary>
            縣市鄉鎮記錄
            </summary>
        </member>
        <member name="M:K12.Data.TownRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.TownRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.TownRecord.County">
            <summary>
            縣市名稱
            </summary>
        </member>
        <member name="P:K12.Data.TownRecord.Area">
            <summary>
            鄉鎮名稱
            </summary>
        </member>
        <member name="P:K12.Data.TownRecord.ZipCode">
            <summary>
            郵遞區號
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.ConfigProvider_App">
            <summary>
            實作組態存取介面，核心會透過此類別存取組態資料。
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.IConfigurationProvider">
            <summary>
            負責提供組態(Configuration)的讀取與儲存功能。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.IConfigurationProvider.GetAllConfiguration">
            <summary>
            取得所有組態資料物件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Configuration.IConfigurationProvider.GetConfiguration(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            取得指定的組態資料物件。
            </summary>
            <param name="configNames"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Configuration.IConfigurationProvider.SaveConfiguration(System.Collections.Generic.IEnumerable{K12.Data.Configuration.ConfigurationRecord})">
            <summary>
            儲存組態資料物件，實作時請使同步執行緒(完成儲存動作時才回傳)。
            </summary>
            <param name="configurations"></param>
        </member>
        <member name="T:K12.Data.UpdateRecordBatch">
            <summary>
            異動名冊記錄類別，提供方法用來取得、新增、修改及刪除異動名冊記錄物件
            </summary>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.SelectAll">
            <summary>
            取得所有異動名冊記錄列表。
            </summary>
            <returns>List&lt;UpdateRecordBatchRecord&gt;，代表多筆異動名冊記錄物件。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;UpdateRecordBatchRecord&gt; records = UpdateRecordBatch.SelectAll();
                
                foreach(UpdateRecordBatchRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.SelectByID(System.String)">
            <summary>
            根據異動名冊記錄編號取得異動名冊記錄物件。
            </summary>
            <param name="UpdateRecordBatchID">異動名冊記錄編號</param>
            <returns>UpdateRecordBatchRecord，代表單筆異動名冊記錄編號。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                UpdateRecordBatchRecord record = UpdateRecordBatch.SelectByID("15");
                
                Console.WrlteLine(record.Name);
                </code>
            </example>
            <remarks>若是UpdateRecordBatchID不存在則會傳回null。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據異動名冊記錄編號取得異動名冊記錄物件列表。
            </summary>
            <param name="UpdateRecordBatchIDs">多筆異動名冊記錄編號。</param>
            <returns>List&lt;UpdateRecordBatchRecord&gt;，代表多筆異動名冊記錄物件。</returns>
            <example>
                <code>
                List&lt;UpdateRecordBatchRecord&gt; records = UpdateRecordBatch.SelectByIDs(UpdateRecordBatchIDs);
                
                foreach(UpdateRecordBatchRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.SelectBySchoolYearAndSemester(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據學年度及學期取得異動名冊記錄物件列表。
            </summary>
            <param name="SchoolYear">學年度，若是傳入null則會傳回所有學年度資料。</param>
            <param name="Semester">學期，若是傳入null則會傳回所有學期資料。</param>
            <returns>List&lt;UpdateRecordBatchRecord&gt;，代表多筆異動名冊記錄物件。</returns>
            <example>
                <code>
                List&lt;UpdateRecordBatchRecord&gt; records = UpdateRecordBatch.SelectBySchoolYearAndSemester(UpdateRecordBatchIDs);
                
                foreach(UpdateRecordBatchRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
            <remarks>若是學年度及學期參數皆傳入null，則會傳回所有資料。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Insert(K12.Data.UpdateRecordBatchRecord)">
            <summary>
            新增單筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchRecord">異動名冊記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    UpdateRecordBatchRecord newrecord = new UpdateRecordBatchRecord();
                    newrecord.Name ="test";
                    newrecord.SchoolYear = 95;
                    newrecord.Semester = 1;
                    strng NewID = UpdateRecordBatch.Insert(newrecord)
                    UpdateRecordBatchRecord record = UpdateRecordBatch.SelectByID(NewID);
                    System.Console.Writeln(record.Name);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為異動名冊名稱、學年度及學期。
            </remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Insert(System.Collections.Generic.IEnumerable{K12.Data.UpdateRecordBatchRecord})">
            <summary>
            新增多筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchRecord">多筆異動名冊記錄</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    UpdateRecordBatchRecord record = new UpdateRecordBatchRecord();
                    
                    record.Name ="新生異動名冊";
                    record.SchoolYear = 96;
                    record.Semester = 1;
                    
                    List&lt;UpdateRecordBatchRecord&gt; records = new List&lt;UpdateRecordBatchRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = UpdateRecordBatch.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Update(K12.Data.UpdateRecordBatchRecord)">
            <summary>
            更新單筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchRecord">異動名冊記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                UpdateRecordBatchRecord record = UpdateRecordBatch.SelectByID(UpdateRecordBatchID);
                record.Name = "轉入異動名冊";
                int UpdateCount = UpdateRecordBatch.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Update(System.Collections.Generic.IEnumerable{K12.Data.UpdateRecordBatchRecord})">
            <summary>
            更新多筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchRecords">多筆異動名冊記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                UpdateRecordBatchRecord record = UpdateRecordBatch.SelectByID(UpdateRecordBatchID);
                record.Name = "畢業異動名冊";
                List&lt;UpdateRecordBatchRecord&gt; records = new List&lt;UpdateRecordBatchRecord&gt;();
                records.Add(record);
                int UpdateCount = UpdateRecordBatch.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Delete(System.Collections.Generic.IEnumerable{K12.Data.UpdateRecordBatchRecord})">
            <summary>
            刪除多筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchRecords">多筆異動名冊記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.UpdateRecordBatchRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;UpdateRecordBatchRecord&gt; records = UpdateRecordBatch.SelectByIDs(UpdateRecordIDs);
                  int DeleteCount = UpdateRecordBatch.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchIDs">多筆異動名冊記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
               <code>
               int DeleteCount = UpdateRecordBatch.Delete(UpdateRecordBatchIDs);
               </code>
            </example>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Delete(K12.Data.UpdateRecordBatchRecord)">
            <summary>
            刪除單筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchRecord">單筆異動名冊記錄物</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  UpdateRecordBatchRecord&gt; record = UpdateRecordBatch.SelectByID(UpdateRecordBatchID);
                  int DeleteCount = UpdateRecordBatch.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.UpdateRecordBatch.Delete(System.String)">
            <summary>
            刪除單筆異動名冊記錄
            </summary>
            <param name="UpdateRecordBatchID">單筆異動名冊記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = UpdateRecordBatch.Delete(UpdateRecordID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.UpdateRecordBatch.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.UpdateRecordBatch.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.UpdateRecordBatch.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.UpdateRecordBatch.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.ChineseEnglishSubjectMapping">
            <summary>
            科目中英文對照表
            </summary>
        </member>
        <member name="M:K12.Data.ChineseEnglishSubjectMapping.Update(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            更新科目中英文對照表
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.ChineseEnglishSubjectMapping.SelectAll">
            <summary>
            取得科目中英文對照表
            </summary>
            <returns></returns>
        </member>
        <member name="T:K12.Data.DiskCacheProvider">
            <summary>
            提供本機資料庫的快取功能
            </summary>
        </member>
        <member name="T:K12.Data.ICacheProvider">
            <summary>
            快取提供者介面
            1.XmlElement的根節點必需要有ID屬性用來唯一識別。
            2.通常物件必需提供LoadXml及ToXml方法以能提供Xml及物件間的轉換機制。
            </summary>
        </member>
        <member name="M:K12.Data.ICacheProvider.SelectAll(System.String)">
            <summary>
            取得快取內的所有資料
            </summary>
            <param name="EntityName"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.ICacheProvider.SelectByIDs(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆編號取得某個實體的資料，實際儲存時為字串，取出時會轉成XML文件
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="EntityIDs">多筆實體編號</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Set(System.String,System.Collections.IEnumerable)">
            <summary>
            新增或更新多筆XML文件至快取當中，其中XML文件的根節點必需有ID屬性，以便用來唯一識別；實際儲存時會將Xml文件轉為字串儲存。
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="Records">多筆XML文件</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Set(System.String,System.Object)">
            <summary>
            新增或更新單筆XML文件至快取當中，其中XML文件的根節點必需有ID屬性，以便用來唯一識別；實際儲存時會將Xml文件轉為字串儲存。
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="Record">單筆XML文件</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Insert(System.String,System.Collections.IEnumerable)">
            <summary>
            新增多筆XML文件至快取當中，其中XML文件的根節點必需有ID屬性，以便用來唯一識別；實際儲存時會將Xml文件轉為字串儲存。
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="Records">多筆XML文件</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Insert(System.String,System.Object)">
            <summary>
            新增單筆XML文件至快取當中，其中XML文件的根節點必需有ID屬性，以便用來唯一識別；實際儲存時會將Xml文件轉為字串儲存。
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="Records">多筆XML文件</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Update(System.String,System.Collections.IEnumerable)">
            <summary>
            更新多筆XML文件至快取當中，其中XML文件的根節點必需有ID屬性，以便用來唯一識別；實際儲存時會將Xml文件轉為字串儲存。
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="Records">多筆XML文件</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Update(System.String,System.Object)">
            <summary>
            更新單筆XML文件至快取當中，其中XML文件的根節點必需有ID屬性，以便用來唯一識別；實際儲存時會將Xml文件轉為字串儲存。
            </summary>
            <param name="EntityName">實體名稱</param>
            <param name="Records">多筆XML文件</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Delete(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據識別編號移除實體中的快取
            </summary>
            <param name="EntityName"></param>
            <param name="EntityIDs"></param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Delete(System.String,System.String)">
            <summary>
            根據識別編號移除實體中的快取
            </summary>
            <param name="EntityName"></param>
            <param name="EntityID"></param>
        </member>
        <member name="M:K12.Data.ICacheProvider.Delete(System.String)">
            <summary>
            移除某個實體的所有資料
            </summary>
            <param name="EntityName">實體名稱</param>
        </member>
        <member name="M:K12.Data.ICacheProvider.ParseID(System.String)">
            <summary>
            給一個字串解析出其中ID
            </summary>
            <param name="Content"></param>
            <returns></returns>
        </member>
        <member name="F:K12.Data.XmlHelper.BaseNode">
            <summary>
            代表基礎的 Xml 資料。
            </summary>
        </member>
        <member name="M:K12.Data.XmlHelper.#ctor">
            <summary>
            建立一個空的文件，預設會有「根」名稱「Content」。
            </summary>
        </member>
        <member name="M:K12.Data.XmlHelper.#ctor(System.String)">
            <summary>
            依指定的「根」元素名稱建立Document
            </summary>
            <param name="rootName">根元素的名稱，不可加任何的特殊符號</param>
        </member>
        <member name="M:K12.Data.XmlHelper.#ctor(System.Xml.XmlElement)">
            <summary>
            依XmlElement的內容建立物件。
            </summary>
            <param name="xmldata">要依據的XmlElement物件。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.GetInteger(System.String,System.Int32)">
            <summary>
            取得 Integer 資料。
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XmlHelper.TryGetInteger(System.String)">
            <summary>
            嘗試將讀取的資料轉換為 Integer，並回傳作業是否成功。
            </summary>
            <param name="xpath">要讀取的資料路徑。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.GetDateString(System.String)">
            <summary>
            取得日期資料，格式「yyyy/MM/dd」。不存在或來源資料不正確會回傳空字串。
            </summary>
        </member>
        <member name="M:K12.Data.XmlHelper.GetElement(System.String)">
            <summary>
            取得元素物件，但僅取得符合「元素路徑」的第一個元素。
            </summary>
            <param name="xpath">元素路徑。</param>
            <returns>回傳的XmlElement實體。</returns>
            <exception cref="T:System.Exception">發生再xpath取出的物件不是元素(Element)時。</exception>
        </member>
        <member name="M:K12.Data.XmlHelper.GetElements(System.String)">
            <summary>
            取得元素物件陣列，將會取得所有符合「元素路徑」的所有元素。
            </summary>
            <param name="xpath">元素路徑。</param>
            <returns>XmlElement的陣列。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.ToString">
            <summary>
            回傳完整的Xml字串。
            </summary>
            <returns>完整的Xml字串。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.Save(System.String)">
            <summary>
            將內部Xml資料以UTF-8的編碼方式儲存到檔案中，如果檔案已存在，會覆寫該檔案。
            </summary>
            <param name="fileName">檔案名稱。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.Save(System.String,System.Text.Encoding)">
            <summary>
            將內部Xml資料儲存到檔案中，如果檔案已存在，會覆寫該檔案。
            </summary>
            <param name="fileName">檔案名稱。</param>
            <param name="enc">檔案編碼方式</param>
        </member>
        <member name="M:K12.Data.XmlHelper.Format(System.String)">
            <summary>
            格式化 Xml 內容。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XmlHelper.Clone(System.Xml.XmlElement)">
            <summary>
            複製 XmlElement 物件，變更其內容不會反應到原來的XmlElement中。
            </summary>
            <param name="srcElement">要複製的XmlElement物件。</param>
            <returns>已複製的XmlElement物件。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.LoadFrom(System.String)">
            <summary>
            載入指定的 Xml 檔案。
            </summary>
            <param name="fileName">檔案名稱。</param>
            <returns><see cref="T:System.Xml.XmlElement"/>物件。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.LoadFrom(System.String,System.Boolean)">
            <summary>
            載入指定的 Xml 檔案。
            </summary>
            <param name="fileName">檔案名稱。</param>
            <returns><see cref="T:System.Xml.XmlElement"/>物件。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.LoadXml(System.String)">
            <summary>
            載入指定的 Xml 資料。
            </summary>
            <param name="xmlContent">要載入的 Xml 字串資料。</param>
            <returns><see cref="T:System.Xml.XmlElement"/>物件。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.LoadXml(System.String,System.Boolean)">
            <summary>
            載入指定的 Xml 資料。
            </summary>
            <param name="xmlString">要載入的 Xml 字串資料。</param>
            <param name="preserveWhitespace">是否保留字串中的泛空白字元。</param>
            <returns><see cref="T:System.Xml.XmlElement"/>物件。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.SaveTo(System.String,System.Xml.XmlNode)">
            <summary>
            將指定的 Xml 資料以 UTF-8 的編碼方式儲存到檔案。
            </summary>
            <param name="fileName">檔案名稱。</param>
            <param name="elm">要儲存的 Xml 物件。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.SaveTo(System.String,System.Xml.XmlNode,System.Text.Encoding)">
            <summary>
            將指定的 Xml 資料儲存到檔案。
            </summary>
            <param name="fileName">檔案名稱。</param>
            <param name="node">要儲存的 Xml 物件。</param>
            <param name="enc">儲存的編碼方式。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.SaveTo(System.IO.Stream,System.Xml.XmlNode)">
            <summary>
            將指定的 Xml 資料以UTF-8的編碼方式寫入到串流中。
            </summary>
            <param name="outStream">指定的串流。</param>
            <param name="node">要輸出的 Xml 物件。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.SaveTo(System.IO.Stream,System.Xml.XmlNode,System.Text.Encoding)">
            <summary>
            將指定的 Xml 資料寫入到串流中。
            </summary>
            <param name="outStream">指定的串流。</param>
            <param name="node">要輸出的 Xml 物件。</param>
            <param name="enc">輸出的編碼方式。</param>
        </member>
        <member name="M:K12.Data.XmlHelper.HttpSendTo(System.String,System.String)">
            <summary>
            傳送Xml內容到某個網址。
            </summary>
            <param name="url">目的URL。</param>
            <param name="xmlContent">要傳送的Xml內容。</param>
            <returns>回傳的Xml資料。</returns>
        </member>
        <member name="M:K12.Data.XmlHelper.HttpSendTo(System.String,System.String,System.String)">
            <summary>
            傳送Xml內容到某個網址。
            </summary>
            <param name="url">目的URL。</param>
            <param name="method">傳送的方法(POST、GET)</param>
            <param name="xmlContent">要傳送的Xml內容。</param>
            <returns>回傳的Xml資料。</returns>
        </member>
        <member name="P:K12.Data.XmlHelper.XmlString">
            <summary>
            取得Xml的完整 Xml 字串。
            </summary>
            <returns>完整 Xml 字串。</returns>
        </member>
        <member name="P:K12.Data.XmlHelper.BaseElement">
            <summary>
            取得目前文件的基礎XmlElement物件。
            </summary>
            <returns>此物件的基本XmlElement物件。</returns>
        </member>
        <member name="P:K12.Data.XmlHelper.RootName">
            <summary>
            文件根名稱。
            </summary>
        </member>
        <member name="P:K12.Data.XmlHelper.LastInteger">
            <summary>
            取得上一次執行 GetInteger、TryGetInteger 時的回傳值。
            </summary>
        </member>
        <member name="T:K12.Data.SchoolHolidayRecord">
            <summary>
            學校放假日清單記錄物件
            </summary>
        </member>
        <member name="M:K12.Data.SchoolHolidayRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.SchoolHolidayRecord.#ctor(System.String)">
            <summary>
            XML字串建構式
            </summary>
            <param name="xmlString"></param>
        </member>
        <member name="M:K12.Data.SchoolHolidayRecord.IsContained(System.DateTime)">
            <summary>
            指定日期是否在日期區間中
            </summary>
            <param name="dtTarget"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SchoolHolidayRecord.IsHoliday(System.DateTime)">
            <summary>
            查詢指定日期是否為假日？
            </summary>
            <param name="dtTarget">指定要查詢的日期</param>
            <returns>是否為假日。若是則回傳 true‧</returns>
        </member>
        <member name="M:K12.Data.SchoolHolidayRecord.GetXmlString">
            <summary>
            取得可存回組態檔的XML字串
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.BeginDate">
            <summary>
            上課日期
            </summary>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.EndDate">
            <summary>
            結束日期
            </summary>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.SchoolDayCountG1">
            <summary>
            一年級上課天數
            </summary>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.SchoolDayCountG2">
            <summary>
            二年級上課天數
            </summary>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.SchoolDayCountG3">
            <summary>
            三年級上課天數
            </summary>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.HolydayListStr">
            <summary>
            放假日清單字串
            </summary>
        </member>
        <member name="P:K12.Data.SchoolHolidayRecord.HolidayList">
            <summary>
            放假日清單
            </summary>
        </member>
        <member name="T:K12.Data.CourseTagRecord">
            <summary>
            課程標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.CourseTagRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.CourseTagRecord.#ctor(System.String,System.String)">
            <summary>
            新增用建構式
            </summary>
            <param name="RefEntityID">RefEntityID，班級編號</param>
            <param name="RefTagID">RefTagID，標籤編號</param>
        </member>
        <member name="M:K12.Data.CourseTagRecord.GetID(System.Xml.XmlElement)">
            <summary>
            取得課程標籤編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.CourseTagRecord.GetEntityID(System.Xml.XmlElement)">
            <summary>
            取得課程編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.CourseTagRecord.RefCourseID">
            <summary>
            所屬課程編號
            </summary>
        </member>
        <member name="P:K12.Data.CourseTagRecord.Course">
            <summary>
            取得所屬課程
            </summary>
        </member>
        <member name="T:K12.Data.BeforeEnrollment">
            <summary>
            學生前級畢業資訊類別，提供方法用來取得及修改學生前級畢業資訊。
            </summary>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectAll">
            <summary>
            取得所有學生前級畢業資訊物件列表。
            </summary>
            <returns>List&lt;BeforeEnrollmentRecord&gt;，代表多筆學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;BeforeEnrollmentRecord&gt; records = BeforeEnrollment.SelectAll();
                
                foreach(BeforeEnrollmentRecord record in records)
                    Console.WrlteLine(record.Reason);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectAll``1">
            <summary>
            根據多筆學生記錄編號取得學生前級畢業資訊物件列表。
            </summary>
            <returns>List&lt;BeforeEnrollmentRecord&gt;，代表多筆學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;BeforeEnrollmentRecord&gt; records = BeforeEnrollment.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生前級畢業資訊物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>BeforeEnrollmentRecord，代表學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                BeforeEnrollmentRecord record = BeforeEnrollment.SelectByStudent(Student);
                
               if (record != null)
                   System.Console.WriteLine(record.Memo);
                </code>
            </example>
            <remarks>若是Student不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生前級畢業資訊物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>BeforeEnrollmentRecord，代表學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                BeforeEnrollmentRecord record = BeforeEnrollment.SelectByStudent(Student);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生前級畢業資訊物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>BeforeEnrollmentRecord，代表學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                BeforeEnrollmentRecord record = BeforeEnrollment.SelectByStudentID(StudentID);
                
                if (record != null)
                   System.Console.WriteLine(record.Reason);
                </code>
            </example>
            <remarks>若是StudentID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生前級畢業資訊物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>BeforeEnrollmentRecord，代表學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                BeforeEnrollmentRecord record = BeforeEnrollment.SelectByStudent(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudents(System.Collections.Generic.List{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生前級畢業資訊物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;BeforeEnrollmentRecord&gt;，代表多筆學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;BeforeEnrollmentRecord&gt; records = BeforeEnrollment.SelectByStudents(Students);
                
                foreach(BeforeEnrollmentRecord record in records)
                    Console.WrlteLine(record.Memo);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudents``1(System.Collections.Generic.List{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生前級畢業資訊物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;BeforeEnrollmentRecord&gt;，代表多筆學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;BeforeEnrollmentRecord&gt; records = BeforeEnrollment.SelectByStudents(Students);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生前級畢業資訊物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;BeforeEnrollmentRecord&gt;，代表多筆學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;BeforeEnrollmentRecord&gt; records = BeforeEnrollment.SelectByStudentIDs(StudentIDs);
                
                foreach(BeforeEnrollmentRecord record in records)
                    Console.WrlteLine(record.Reason);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生前級畢業資訊物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;BeforeEnrollmentRecord&gt;，代表多筆學生前級畢業資訊物件。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;BeforeEnrollmentRecord&gt; records = BeforeEnrollment.SelectByStudents(StudentIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.Update(K12.Data.BeforeEnrollmentRecord)">
            <summary>
            更新單筆學生前級畢業資訊
            </summary>
            <param name="BeforeEnrollmentRecord">學生前級畢業資訊物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                BeforeEnrollmentRecord record = BeforeEnrollment.SelectByStudentID(StudentID);
                record.Memo = (new System.Random()).NextDouble().ToString();
                int UpdateCount = BeforeEnrollment.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.Update(System.Collections.Generic.IEnumerable{K12.Data.BeforeEnrollmentRecord})">
            <summary>
            更新多筆學生前級畢業資訊
            </summary>
            <param name="BeforeEnrollmentRecords">多筆學生前級畢業資訊物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.BeforeEnrollmentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                BeforeEnrollmentRecord record = BeforeEnrollment.SelectByStudentID(StudentID);
                record.Reason = (new System.Random()).NextDouble().ToString();
                List&lt;BeforeEnrollmentRecord&gt; records = new List&lt;BeforeEnrollmentRecord&gt;();
                records.Add(record);
                int UpdateCount = BeforeEnrollment.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.BeforeEnrollment.GetDetailList(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            取得詳細資料列表
            </summary>
            <returns></returns>
        </member>
        <member name="E:K12.Data.BeforeEnrollment.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.Utility.PTChangeSetProvider">
            <summary>
            Physical Table ChangeSet Provider.
            </summary>
        </member>
        <member name="M:K12.Data.Utility.PTChangeSetProvider.GetChangeSet">
            <summary>
            取得異動集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Utility.PTChangeSetProvider.SetClientChangeSet(System.Collections.Generic.IEnumerable{FISCA.Synchronization.ChangeEntry})">
            <summary>
            設定Client的ChangeSet
            </summary>
            <param name="ClientChangeSet"></param>
        </member>
        <member name="M:K12.Data.Utility.PTChangeSetProvider.SetBaseLine">
            <summary>
            BaseLine的決定是取得資料庫最後一筆更新的資料為BaseLine。
            </summary>
        </member>
        <member name="T:K12.Data.ScoreCalcRule">
            <summary>
            成績計算規則類別，適用於學生及班級，提供方法用來取得、新增、修改及刪除成績計算規則資訊
            </summary>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectAll">
            <summary>
            取得所有成績計算規則列表。
            </summary>
            <returns>List&lt;ScoreCalcRuleRecord&gt;，代表多筆成績計算規則記錄物件。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ScoreCalcRuleRecord&gt; scorecalcrulerecords = ScoreCalcRule.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectAll``1">
            <summary>
            取得所有成績計算規則列表。
            </summary>
            <returns>List&lt;ScoreCalcRuleRecord&gt;，代表多筆成績計算規則記錄物件。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ScoreCalcRuleRecord&gt; scorecalcrulerecords = ScoreCalcRule.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            依學生系統編號取得成績計算規則
            </summary>
            <param name="StudentIDs"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            依學生系統編號取得成績計算規則
            </summary>
            <typeparam name="T"></typeparam>
            <param name="StudentIDs"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆成績計算規則編號取得成績計算規則列表。
            </summary>
            <param name="ScoreCalcRuleIDs">多筆成績計算規則編號</param>
            <returns>List&lt;ScoreCalcRuleRecord&gt;，代表多筆成績計算規則記錄物件。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ScoreCalcRuleRecord&gt; scorecalcrulerecords = ScoreCalcRule.SelectByIDs(ScoreCalcRuleIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectByID(System.String)">
            <summary>
            根據單筆成績計算規則編號取得成績計算規則物件。
            </summary>
            <param name="ScoreCalcRuleID">成績計算規則編號</param>
            <returns>ScoreCalcRuleRecord，成績計算規則物件</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆成績計算規則編號取得成績計算規則列表。
            </summary>
            <param name="ScoreCalcRuleIDs">多筆成績計算規則編號</param>
            <returns>List&lt;ScoreCalcRuleRecord&gt;，代表多筆成績計算規則記錄物件。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ScoreCalcRuleRecord&gt; scorecalcrulerecords = ScoreCalcRule.SelectByIDs(ScoreCalcRuleIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.Insert(K12.Data.ScoreCalcRuleRecord)">
            <summary>
            新增單筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleRecord">成績計算規則記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.ScoreCalcRule.Insert(System.Collections.Generic.IEnumerable{K12.Data.ScoreCalcRuleRecord})" -->
        <member name="M:K12.Data.ScoreCalcRule.Update(K12.Data.ScoreCalcRuleRecord)">
            <summary>
            更新單筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleRecord">成績計算規則記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.Update(System.Collections.Generic.IEnumerable{K12.Data.ScoreCalcRuleRecord})">
            <summary>
            更新多筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleRecords">多筆成績計算規則記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.Delete(K12.Data.ScoreCalcRuleRecord)">
            <summary>
            刪除單筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleRecord">成績計算規則記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.Delete(System.String)">
            <summary>
            刪除單筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleID">成績計算規則編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.Delete(System.Collections.Generic.IEnumerable{K12.Data.ScoreCalcRuleRecord})">
            <summary>
            刪除多筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleRecords">多筆成績計算規則記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ScoreCalcRuleRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ScoreCalcRule.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆成績計算規則記錄
            </summary>
            <param name="ScoreCalcRuleIDs">多筆成績計算規則編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.ClassTag">
            <summary>
            班級標籤類別，提供方法用來取得、新增、修改及刪除班級標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.ClassTag.SelectAll">
            <summary>
            取得所有班級標籤列表。
            </summary>
            <returns>List&lt;ClassTagRecord&gt;，代表多筆班級標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;ClassTagRecord&gt; records = ClassTag.SelectAll();
                    
                    foreach(ClassTagRecord record in records)
                        System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.ClassTag.SelectAll``1">
            <summary>
            取得所有班級標籤列表。
            </summary>
            <returns>List&lt;ClassTagRecord&gt;，代表多筆班級標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassTagRecord&gt; records = ClassTag.SelectAll();
                
                foreach(ClassTagRecord record in records)
                    System.Console.WriteLine(record.Name);
            </example>
        </member>
        <member name="M:K12.Data.ClassTag.SelectByClassID(System.String)">
            <summary>
            根據單筆班級編號取得班級標籤列表。
            </summary>
            <param name="ClassID">班級編號</param>
            <returns>List&lt;ClassTagRecord&gt;，代表多筆班級標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassID(ClassID);
                    
                    foreach(ClassTagRecord record in records)
                      System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.ClassTag.SelectByClassID``1(System.String)">
            <summary>
            根據單筆班級編號取得班級標籤列表。
            </summary>
            <param name="ClassID">班級編號</param>
            <returns>List&lt;ClassTagRecord&gt;，代表多筆班級標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassID(ClassID);
            </example>
        </member>
        <member name="M:K12.Data.ClassTag.SelectByClassIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得班級標籤列表。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;ClassTagRecord&gt;，代表多筆班級標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassIDs(ClassIDs);
                
                forech(ClassTagRecord record in records)
                    System.Console.WriteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.ClassTag.SelectByClassIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得班級標籤列表。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;ClassTagRecord&gt;，代表多筆班級標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassIDs(ClassIDs);
            </example>
        </member>
        <member name="M:K12.Data.ClassTag.Insert(K12.Data.ClassTagRecord)">
            <summary>
            新增單筆班級標籤記錄
            </summary>
            <param name="ClassTagRecord">班級標籤記錄物件</param> 
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ClassTagRecord record = new ClassTagRecord(ClassID, TagConfigID); 
                string NewID = ClassTag.Insert(record);  
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為班級編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks> 
        </member>
        <member name="M:K12.Data.ClassTag.Insert(System.Collections.Generic.IEnumerable{K12.Data.ClassTagRecord})">
            <summary>
            新增多筆班級標籤記錄
            </summary>
            <param name="ClassTagRecords">多筆班級記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ClassTagRecord record = new ClassTagRecord(ClassID, TagConfigID); 
                List&lt;ClassTagRecord&gt; records = new List&lt;ClassTagRecord&gt;();
                records.Add(record);
                List&lt;string&gt; NewIDs = ClassTag.Insert(records);  
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為班級編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks>
        </member>
        <member name="M:K12.Data.ClassTag.Update(K12.Data.ClassTagRecord)">
            <summary>
            更新單筆班級標籤記錄
            </summary>
            <param name="ClassTagRecord">班級標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassID(ClassID);        
                    records[0].RefEntityID = ClassID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = ClassTag.Update(record[0]);
                </code>
            </example>
            <remarks>
            1.更新的欄位值只有ClassID及TagConfigID，其它為唯讀欄位。
            2.傳回值為成功更新的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.ClassTag.Update(System.Collections.Generic.IEnumerable{K12.Data.ClassTagRecord})">
            <summary>
            更新多筆班級標籤記錄
            </summary>
            <param name="ClassTagRecords">多筆班級標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassID(ClassID);        
                    records[0].RefEntityID = ClassID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = ClassTag.Update(records);
                </code>
            </example>
            <remarks>
            1.更新的欄位值只有ClassID及TagConfigID，其它為唯讀欄位。
            2.傳回值為成功更新的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.ClassTag.Delete(System.Collections.Generic.IEnumerable{K12.Data.ClassTagRecord})">
            <summary>
            刪除多筆班級標籤記錄
            </summary>
            <param name="ClassTagRecords">多筆班級標籤記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassID(ClassID);
                    int DeleteCount = ClassTag.Delete(records);
                </code>
            </example>
            <remarks>
            傳回值為成功刪除的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.ClassTag.Delete(K12.Data.ClassTagRecord)">
            <summary>
            刪除單筆班級記錄
            </summary>
            <param name="ClassTagRecord">班級記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassID(ClassID);
                    int DeleteCount = ClassTag.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.ClassTag.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.ClassTag.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.ClassTag.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.EmergencyContact">
            <summary>
            緊急連絡人類別，提供方法用來取得及修改緊急連絡人資訊
            </summary>
        </member>
        <member name="M:K12.Data.EmergencyContact.SelectAll``1">
            <summary>
            取得所有學生家長及監護人記錄物件列表。
            </summary>
            <typeparam name="T">家長及監護人記錄物件及其後代。</typeparam>
            <returns></returns>
        </member>
        <member name="E:K12.Data.EmergencyContact.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.XExtenstions">
            <summary>
            
            </summary>
        </member>
        <member name="M:K12.Data.XExtenstions.ElementText(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            取得 Element 的字串值，如果該 Element 不存在，則回傳 string.Emtpy。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ElementText(System.Xml.Linq.XElement,System.Xml.Linq.XName[])">
            <summary>
            取得 Element 的字串值，如果該 Element 不存在，則回傳 string.Emtpy。
            </summary>
            <param name="xml"></param>
            <param name="path">各階層的名稱，例如：new XName[]{"Student","SeatNo"}</param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ElementText(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            取得 Element 的字串值。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ElementInt(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int32)">
            <summary>
            取得 Element 的數字值。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ElementBool(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.AttributeText(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            取得 Attribute 的字串值，如果該 Attribute 不存在，則回傳 string.Empty。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.AttributeText(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            取得 Attribute 的字串值。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.AttributeInt(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int32)">
            <summary>
            取得 Attribute 的數字值。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.AttributeBool(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.GetThenAction(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Action{System.Xml.Linq.XElement})">
            <summary>
            取得指定名稱的 Element，如果該 Element 存在，則執行 action 所指定的方法。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.SelectElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            取得指定 Xml Namespace 的 Element。
            </summary>
            <param name="xml"></param>
            <param name="name"></param>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ToXmlElement(System.Xml.Linq.XElement)">
            <summary>
            將 XElement 轉換成 XmlElement。
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ToXmlElement(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            將 XElement 轉換成 XmlElement。
            </summary>
            <param name="xml"></param>
            <param name="preserveWhitespace"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.XExtenstions.ToXLinq(System.String)">
            <summary>
            將字串轉換成 XLinq 物件。
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:K12.Data.MultiThreadWorker`1">
            <summary>
            切割封包並以多執行緒模式逐一處理各個封包
            </summary>
        </member>
        <member name="M:K12.Data.MultiThreadWorker`1.Run(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            執行
            </summary>
            <param name="list">要處理的資料</param>
            <param name="argument">額外的參數</param>
        </member>
        <member name="M:K12.Data.MultiThreadWorker`1.Run(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            執行
            </summary>
            <param name="list">要處理的資料</param>
        </member>
        <member name="P:K12.Data.MultiThreadWorker`1.PackageSize">
            <summary>
            每個封包的最大容量
            </summary>
        </member>
        <member name="P:K12.Data.MultiThreadWorker`1.MaxThreads">
            <summary>
            同時執行的最大執行緒數量
            </summary>
        </member>
        <member name="E:K12.Data.MultiThreadWorker`1.PackageWorker">
            <summary>
            處理單一封包
            </summary>
        </member>
        <member name="T:K12.Data.PackageWorkEventArgs`1">
            <summary>
            處理單一封包事件傳遞
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:K12.Data.PackageWorkEventArgs`1.HasException">
            <summary>
            是否發生錯誤
            </summary>
        </member>
        <member name="P:K12.Data.PackageWorkEventArgs`1.Exception">
            <summary>
            發生錯誤時的錯誤內容
            </summary>
        </member>
        <member name="P:K12.Data.PackageWorkEventArgs`1.List">
            <summary>
            封包內容
            </summary>
        </member>
        <member name="P:K12.Data.PackageWorkEventArgs`1.Result">
            <summary>
            回傳
            </summary>
        </member>
        <member name="P:K12.Data.PackageWorkEventArgs`1.Argument">
            <summary>
            額外的參數
            </summary>
        </member>
        <member name="T:K12.Data.SemesterHistoryRecord">
            <summary>
            學生學期歷程資訊
            </summary>
        </member>
        <member name="M:K12.Data.SemesterHistoryRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.SemesterHistoryRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.SemesterHistoryRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.SemesterHistoryRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryRecord.SemesterHistoryItems">
            <summary>
            學期歷程項目，每位學生每學年度學期會有一筆學期歷程項目
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="T:K12.Data.SemesterHistoryItem">
            <summary>
            學期歷程項目
            </summary>
        </member>
        <member name="M:K12.Data.SemesterHistoryItem.#ctor">
            <summary>
            建構式初始化學年度及學期為系統設定之預設學年度及學期
            </summary>
        </member>
        <member name="M:K12.Data.SemesterHistoryItem.#ctor(System.Xml.XmlElement)">
            <summary>
            XM參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.SemesterHistoryItem.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.RefStudentID">
            <summary>
            所屬學生編號，此為唯讀屬性，若需設定請使用SemesterHistoryRecord的RefStudentID屬性。
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.Student">
            <summary>
            所屬學生記錄物件，此為唯讀屬性
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.SchoolYear">
            <summary>
            學年度
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.Semester">
            <summary>
            學期
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.GradeYear">
            <summary>
            年級
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.ClassName">
            <summary>
            班級名稱
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.SeatNo">
            <summary>
            座號
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.SchoolDayCount">
            <summary>
            學期上課天數
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.Teacher">
            <summary>
            該學年度學期班導師
            </summary>
        </member>
        <member name="P:K12.Data.SemesterHistoryItem.DeptName">
            <summary>
            該學年度學期科別名稱
            </summary>
        </member>
        <member name="T:K12.Data.SemesterScoreRecord">
            <summary>
            學生學期成績資訊
            </summary>
        </member>
        <member name="M:K12.Data.SemesterScoreRecord.#ctor">
            <summary>
            預設建構式，初始化Subjects及Domains
            </summary>
        </member>
        <member name="M:K12.Data.SemesterScoreRecord.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            新增學生學期成績記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
        </member>
        <member name="M:K12.Data.SemesterScoreRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.SemesterScoreRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.RefStudentID">
            <summary>
            所屬學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.GradeYear">
            <summary>
            年級，必填
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.CourseLearnScore">
            <summary>
            學期課程學習成績，由ischool介面所計算
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.LearnDomainScore">
            <summary>
            學期學習領域成績，由ischool介面所計算
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.Subjects">
            <summary>
            學期科目成績明細
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.Domains">
            <summary>
            學期領域成績明細
            </summary>
        </member>
        <member name="P:K12.Data.SemesterScoreRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="T:K12.Data.SubjectScore">
            <summary>
            科目成績
            </summary>
        </member>
        <member name="M:K12.Data.SubjectScore.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.SubjectScore.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="subject"></param>
        </member>
        <member name="M:K12.Data.SubjectScore.Clone">
            <summary>
            複製科目成績物件
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.SubjectScore.RefSemesterScoreID">
            <summary>
            所屬學期成績編號，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.RefStudentID">
            <summary>
            所屬學生編號，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.SchoolYear">
            <summary>
            學年度，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Semester">
            <summary>
            學期，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Domain">
            <summary>
            所屬領域
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Subject">
            <summary>
            科目名稱
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Period">
            <summary>
            上課時段
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Credit">
            <summary>
            權數
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Score">
            <summary>
            百分比成績
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Effort">
            <summary>
            努力程度
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Text">
            <summary>
            文字評量
            </summary>
        </member>
        <member name="P:K12.Data.SubjectScore.Comment">
            <summary>
            註解
            </summary>
        </member>
        <member name="T:K12.Data.DomainScore">
            <summary>
            領域成績
            </summary>
        </member>
        <member name="M:K12.Data.DomainScore.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.DomainScore.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:K12.Data.DomainScore.Clone">
            <summary>
            複製領域成績物件
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.DomainScore.RefSemesterScoreID">
            <summary>
            所屬學期成績編號，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.RefStudentID">
            <summary>
            所屬學生編號，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.SchoolYear">
            <summary>
            學年度，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Semester">
            <summary>
            學期，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Domain">
            <summary>
            所屬領域
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Period">
            <summary>
            上課時段
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Credit">
            <summary>
            權數
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Score">
            <summary>
            百分比成績
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Effort">
            <summary>
            努力程度
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Text">
            <summary>
            文字評量
            </summary>
        </member>
        <member name="P:K12.Data.DomainScore.Comment">
            <summary>
            註解
            </summary>
        </member>
        <member name="T:K12.Data.ExamRecord">
            <summary>
            試別項目資訊
            </summary>
        </member>
        <member name="M:K12.Data.ExamRecord.#ctor">
            <summary>
            無參數建構式，會初始化ID、Name及Description為空字串，並釋DisplayOrder設為0
            </summary>
        </member>
        <member name="M:K12.Data.ExamRecord.#ctor(System.String,System.String,System.Int32)">
            <summary>
            新增試別項目記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="Name">名稱</param>
            <param name="Description">描述</param>
            <param name="DisplayOrder">試別順序</param>
        </member>
        <member name="M:K12.Data.ExamRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.ExamRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.ExamRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.ExamRecord.Name">
            <summary>
            名稱，必填
            </summary>
        </member>
        <member name="P:K12.Data.ExamRecord.Description">
            <summary>
            描述，必填
            </summary>
        </member>
        <member name="P:K12.Data.ExamRecord.DisplayOrder">
            <summary>
            試別順序，例如第一次評量填入1、第二次評量順序填入2，必填
            </summary>
        </member>
        <member name="M:K12.Data.EntityCache`1.ValidateKey(System.String)">
            <summary>
            驗證輸入的鍵值是否合法，當要求查尋資料時若鍵值不合法則不進行查尋
            預設驗證方法為是否可轉化為int
            </summary>
            <param name="key">鍵值</param>
            <returns>是否合法</returns>
        </member>
        <member name="T:K12.Data.CourseRecord">
            <summary>
            課程資訊
            </summary>
        </member>
        <member name="M:K12.Data.CourseRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.CourseRecord.#ctor(System.String)">
            <summary>
            建構式，傳入課程名稱
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:K12.Data.CourseRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.CourseRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入課程資料
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:K12.Data.CourseRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Name">
            <summary>
            名稱
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.SchoolYear">
            <summary>
            學年度
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Semester">
            <summary>
            學期
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Subject">
            <summary>
            科目
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Level">
            <summary>
            科目級別
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Period">
            <summary>
            節數，實際的上課時數
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Credit">
            <summary>
            權數，相當於高中的學分數
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.RefClassID">
            <summary>
            所屬班級編號
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.RefAssessmentSetupID">
            <summary>
            所屬試別設定編號
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Entry">
            <summary>
            分項，主要高中使用
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Domain">
            <summary>
            領域
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.CalculationFlag">
            <summary>
            是否列入學期成績計算，1:列入學期成績，2:不列入學期成績。
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.RequiredBy">
            <summary>
            部/校訂
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Required">
            <summary>
            必俢
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.NotIncludedInCredit">
            <summary>
            不計學分
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.NotIncludedInCalc">
            <summary>
            不評分
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Class">
            <summary>
            所屬班級
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.AssessmentSetup">
            <summary>
            所屬試別設定
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.MajorTeacherID">
            <summary>
            主要授課教師編號，唯讀；若需對課程授課教師做完整操作，請參考TCInstruct及TCInstructRecord。
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.MajorTeacherName">
            <summary>
            主要授課教師名稱，唯讀；若需對課程授課教師做完整操作，請參考TCInstruct及TCInstructRecord。
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.MajorTeacherNickname">
            <summary>
            主要授課教師暱稱，唯讀；若需對課程授課教師做完整操作，請參考TCInstruct及TCInstructRecord。
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Teachers">
            <summary>
            課程授課教師列表，唯讀；若需對課程授課教師做完整操作，請參考TCInstruct及TCInstructRecord。
            </summary>
        </member>
        <member name="P:K12.Data.CourseRecord.Extensions">
            <summary>
            延伸欄位資訊
            </summary>
        </member>
        <member name="T:K12.Data.CourseTeacherRecord">
            <summary>
            課程授課教師，此類別僅供課程記錄物件用來方便取得授課教師資訊，若需要完整存取教師記錄物件，請使用TeacherRecord物件
            </summary>
        </member>
        <member name="M:K12.Data.CourseTeacherRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML建構式，其規格為<Teacher Sequence="1" TeacherCategory="英文" TeacherID="19" TeacherName="張佳煜" TeacherNickname="" />
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.CourseTeacherRecord.Load(System.Xml.XmlElement)">
            <summary>
            運用XML載入
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.CourseTeacherRecord.Sequence">
            <summary>
            授課教師順序，其中Sequence為1是評分教師。
            </summary>
        </member>
        <member name="P:K12.Data.CourseTeacherRecord.TeacherID">
            <summary>
            授課教師編號
            </summary>
        </member>
        <member name="P:K12.Data.CourseTeacherRecord.TeacherName">
            <summary>
            授課教師名稱
            </summary>
        </member>
        <member name="P:K12.Data.CourseTeacherRecord.TeacherNickname">
            <summary>
            授課教師暱稱
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.CacheManager`1">
            <summary>
            提供可被索引的強型別資料的快取管理
            </summary>
            <typeparam name="T">快取管理的型別</typeparam>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.GetAllData">
            <summary>
            一次取得所有資料項目
            </summary>
            <returns>傳回索引鍵跟快取資料的查詢</returns>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.GetData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            一次取得部份指定鍵值的資料。
            </summary>
            <param name="primaryKeys">要取得的鍵值</param>
            <returns>傳回索引鍵跟快取資料的查詢</returns>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.ValidateKey(System.String)">
            <summary>
            驗證輸入的鍵值是否合法，當要求查尋資料時若鍵值不合法則不進行查尋
            預設驗證方法為是否可轉化為int
            </summary>
            <param name="key">鍵值</param>
            <returns>是否合法</returns>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.#ctor">
            <summary>
            建構子
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.SyncAllBackground">
            <summary>
            取得所有資料，此方法將於背景執行續進行，並於完成後引發ItemLoaded事件
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.SyncData(System.String[])">
            <summary>
            更新快取資料，更新後將會引發ItemUpdated事件
            </summary>
            <param name="primaryKeys">要更新資料的鍵值</param>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.SyncData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            更新快取資料，更新後將會引發ItemUpdated事件
            </summary>
            <param name="primaryKeys">要更新資料的鍵值</param>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.SyncDataBackground(System.String[])">
            <summary>
            更新快取資料，此方法將於背景執行續進行，並於完成後引發ItemUpdated事件
            </summary>
            <param name="primaryKeys">要更新資料的鍵值</param>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.SyncDataBackground(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            更新快取資料，此方法將於背景執行續進行，並於完成後引發ItemUpdated事件
            </summary>
            <param name="primaryKeys">要更新資料的鍵值</param>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.OnItemUpdated(K12.Data.Configuration.ItemUpdatedEventArgs)">
            <summary>
            引發ItemUpdated事件。
            </summary>
            <param name="itemUpdatedEventArgs">包含事件資料的ItemUpdatedEventArgs</param>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.OnItemLoaded(System.EventArgs)">
            <summary>
            引發ItemLoaded事件。
            </summary>
            <param name="eventArgs">包含事件資料的EventArgs</param>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.SortItems">
            <summary>
            重新排序快取資料，快取的資料型別若為IComparable則將自動進行排序
            不需呼叫此方法也會維持順序，唯有當IComparable.CompareTo實作變更時使用此方法重新排序
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.QuickCompare(System.String,System.String)">
            <summary>
            取得資料順序
            </summary>
            <param name="primaryKey1">第一個項目的鍵值</param>
            <param name="primaryKey2">第二個項目的鍵值</param>
            <returns>
            小於零：primaryKey1的項目小於 primaryKey2的項目 
            等於零：primaryKey1的項目等於 primaryKey2的項目 
            大於零：primaryKey1的項目大於 primaryKey2的項目 
            </returns>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.Item(System.String)">
            <summary>
            取得指定索引的項目，若指定的鍵值不存在則會先嚐試進行查尋。Indexer。
            </summary>
            <param name="primaryKey">取得項目的鍵值</param>
            <returns>該鍵值的項目，若傳入鍵值沒有對應項目則傳回default(T)</returns>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.Items">
            <summary>
            取得管理項目的集合
            </summary>
        </member>
        <member name="E:K12.Data.Configuration.CacheManager`1.ItemLoaded">
            <summary>
            當SyncAllBackground完成時
            </summary>
        </member>
        <member name="E:K12.Data.Configuration.CacheManager`1.ItemUpdated">
            <summary>
            當快取資料變更時
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.Loaded">
            <summary>
            取得是否已經載入(SyncAllBackground)
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.CacheManager`1.CacheItemCollection">
            <summary>
            快取資料的集合
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.CacheItemCollection.ContainsKey(System.String)">
            <summary>
            查尋是否已快取此鍵值的項目
            </summary>
            <param name="key">要查尋的鍵值</param>
            <returns>是否已在快取中</returns>
        </member>
        <member name="M:K12.Data.Configuration.CacheManager`1.CacheItemCollection.ContainsValue(`0)">
            <summary>
            查尋是否快取此項目
            </summary>
            <param name="value">要查尋的項目</param>
            <returns>是否在快取資料中</returns>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.CacheItemCollection.Item(System.String)">
            <summary>
            取得指定索引的項目，若指定的鍵值不存在則會先嚐試進行查尋
            </summary>
            <param name="primaryKey">取得項目的鍵值</param>
            <returns>該鍵值的項目，若傳入鍵值沒有對應項目則傳回default(T)</returns>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.CacheItemCollection.Count">
            <summary>
            取得項目總數
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.CacheItemCollection.Values">
            <summary>
            取得包含的值
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.CacheManager`1.CacheItemCollection.Keys">
            <summary>
            取得包含的索引鍵
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.ItemUpdatedEventArgs">
            <summary>
            提供 ItemUpdated事件的資料
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ItemUpdatedEventArgs.PrimaryKeys">
            <summary>
            取得被更新資料的鍵值清單
            </summary>
        </member>
        <member name="T:K12.Data.MeritRecord">
            <summary>
            學生獎勵記錄，新增物件時會直接將MeritFlag屬性設為1
            </summary>
        </member>
        <member name="M:K12.Data.MeritRecord.#ctor">
            <summary>
            預設建構式，將MeritFlag設為1，代表為獎勵
            </summary>
        </member>
        <member name="M:K12.Data.MeritRecord.#ctor(System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            新增獎懲記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <param name="OccurDate">獎勵日期</param>
        </member>
        <member name="M:K12.Data.MeritRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.MeritRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.MeritRecord.RefStudentID">
            <summary>
            所屬學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.ID">
            <summary>
            學生獎勵系統編號
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.OccurDate">
            <summary>
            獎勵日期，必填
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.RegisterDate">
            <summary>
            登錄獎勵記錄日期
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.MeritFlag">
            <summary>
            獎勵懲戒類別，0是懲戒,1是獎勵,2是留校察看
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.Reason">
            <summary>
            獎勵理由
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.MeritA">
            <summary>
            大功數
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.MeritB">
            <summary>
            小功數
            </summary>
        </member>
        <member name="P:K12.Data.MeritRecord.MeritC">
            <summary>
            獎勵數
            </summary>
        </member>
        <member name="T:K12.Data.Utility.Utility">
            <summary>
            Data Access Layer所用到的工具函式
            </summary>
        </member>
        <member name="M:K12.Data.Utility.Utility.ToLessThanRequest(K12.Data.SchoolYearSemester)">
            <summary>
            根據學年度及學期取得DBHelper的條件
            </summary>
            <param name="SchoolYearSemester"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Utility.Utility.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判斷集合是否為null或是空集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Utility.Utility.GetBaseList``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            將集合轉為上層的型別集合
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="DerivedList"></param>
            <returns></returns>
        </member>
        <member name="T:K12.Data.AssessmentSetup">
            <summary>
            評量設定類別，提供方法用來取得、新增、修改及刪除評量設定資訊
            </summary>
        </member>
        <member name="M:K12.Data.AssessmentSetup.SelectAll">
            <summary>
            取得所有評量設定列表。
            </summary>
            <returns>List&lt;AssessmentSetupRecord&gt;，代表多筆評量設定記錄物件。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AssessmentSetupRecord&gt; records = AssessmentSetup.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.SelectAll``1">
            <summary>
            取得所有評量設定列表。
            </summary>
            <returns>List&lt;AssessmentSetupRecord&gt;，代表多筆評量設定記錄物件。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AssessmentSetupRecord&gt; records = AssessmentSetup.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.SelectByID(System.String)">
            <summary>
            根據評量設定編號取得評量設定記錄物件。
            </summary>
            <param name="AssessmentSetupID">評量設定編號</param>
            <returns>AssessmentSetupRecord，代表評量設定記錄物件。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AssessmentSetupRecord&gt; records = AssessmentSetup.SelectByID(AssessmentSetupID);
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.SelectByID``1(System.String)">
            <summary>
            根據評量設定編號取得評量設定記錄物件。
            </summary>
            <param name="AssessmentSetupID">評量設定編號</param>
            <returns>AssessmentSetupRecord，代表評量設定記錄物件。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AssessmentSetupRecord&gt; records = AssessmentSetup.SelectByIDs(AssessmentSetupIDs);
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆評量設定編號取得評量設定列表。
            </summary>
            <param name="AssessmentSetupIDs">多筆評量設定編號</param>
            <returns>List&lt;AssessmentSetupRecord&gt;，代表多筆評量設定記錄物件。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AssessmentSetupRecord&gt; records = AssessmentSetup.SelectByIDs(AssessmentSetupIDs);
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆評量設定編號取得評量設定列表。
            </summary>
            <param name="AssessmentSetupIDs">多筆評量設定編號</param>
            <returns>List&lt;AssessmentSetupRecord&gt;，代表多筆評量設定記錄物件。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AssessmentSetupRecord&gt; records = AssessmentSetup.SelectByIDs(AssessmentSetupIDs);
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.AssessmentSetup.Insert(K12.Data.AssessmentSetupRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.AssessmentSetup.Insert(System.Collections.Generic.IEnumerable{K12.Data.AssessmentSetupRecord})" -->
        <member name="M:K12.Data.AssessmentSetup.Update(K12.Data.AssessmentSetupRecord)">
            <summary>
            更新單筆評量設定記錄
            </summary>
            <param name="AssessmentSetupRecord">評量設定記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.Update(System.Collections.Generic.IEnumerable{K12.Data.AssessmentSetupRecord})">
            <summary>
            更新多筆評量設定記錄
            </summary>
            <param name="AssessmentSetupRecords">多筆評量設定記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.Delete(K12.Data.AssessmentSetupRecord)">
            <summary>
            刪除單筆評量設定記錄
            </summary>
            <param name="AssessmentSetupRecord">評量設定記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.Delete(System.String)">
            <summary>
            刪除單筆評量設定記錄
            </summary>
            <param name="AssessmentSetupRecordID">評量設定記錄編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.Delete(System.Collections.Generic.IEnumerable{K12.Data.AssessmentSetupRecord})">
            <summary>
            刪除多筆評量設定記錄
            </summary>
            <param name="AssessmentSetupRecords">多筆評量設定記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.AssessmentSetupRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.AssessmentSetup.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆評量設定記錄
            </summary>
            <param name="AssessmentSetupRecordIDs">多筆評量設定記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.Utility.DSAServices">
            <summary>
            K12 DAL所使用的DSA連線，預設為呼叫FISCA的DSA連線，可特別指定採用獨立的DSA連線
            </summary>
        </member>
        <member name="M:K12.Data.Utility.DSAServices.#ctor">
            <summary>
            初始化採用FISCA的DSA連線，必須要登入FISCA Application才能用DAL
            </summary>
        </member>
        <member name="M:K12.Data.Utility.DSAServices.CallTestingService(System.String,FISCA.DSAUtil.DSRequest)">
            <summary>
            直接用DSAUtil來呼叫Service
            </summary>
            <param name="service">服務名稱</param>
            <param name="req">申請文件</param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.Utility.DSAServices.Instance">
            <summary>
            採用Singleton模式，所有的DSA都用共用同樣的連線
            </summary>
        </member>
        <member name="T:K12.Data.Merit">
            <summary>
            學生獎勵類別，提供方法用來取得、新增、修改及刪除學生獎勵資訊
            </summary>
        </member>
        <member name="M:K12.Data.Merit.SelectAll">
            <summary>
            取得所有學生獎勵記錄物件列表。
            </summary>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; records = Merit.SelectAll();
                
                foreach(MeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectAll``1">
            <summary>
            取得所有學生獎勵記錄物件列表。
            </summary>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; MeritRecords = Merit.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Merit.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根據條件取得獎勵紀錄列表 
            </summary>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">開始時間</param>
            <param name="EndDate">結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <returns>List&lt;MeritRecord&gt;，多筆獎勵紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Merit.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根據條件取得獎勵紀錄列表
            </summary>
            <typeparam name="T">獎勵紀錄型別，繼承至K12.Data.MeritRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">開始時間</param>
            <param name="EndDate">結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <returns>List&lt;MeritRecord&gt;，多筆獎勵紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Merit.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得獎勵紀錄列表
            </summary>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">開始時間</param>
            <param name="EndDate">結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;MeritRecord&gt;，多筆獎勵紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Merit.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得獎勵紀錄列表
            </summary>
            <typeparam name="T">獎勵紀錄型別，繼承至K12.Data.MeritRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">開始時間</param>
            <param name="EndDate">結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;MeritRecord&gt;，多筆獎勵紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Merit.SelectBySchoolYearAndSemester(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據單筆學生編號、學年度及學期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null取得所有學年度資料</param>
            <param name="Semester">學期，傳入null取得所有學期資料</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; records = Merit.SelectBySchoolYearAndSemester(StudentID,School,Semester);
                
                foreach(MeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectBySchoolYearAndSemester``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據單筆學生編號、學年度及學期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null取得所有學年度資料</param>
            <param name="Semester">學期，傳入null取得所有學期資料</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectBySchoolYearAndSemester(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據多筆學生編號、學年度及學期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度的資料</param>
            <param name="Semester">學期，傳入null代表取得所有學年度的資料</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; records = Merit.SelectBySchoolYearAndSemester(StudentIDs,School,Semester);
                
                foreach(MeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectBySchoolYearAndSemester``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據多筆學生編號、學年度及學期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度的資料</param>
            <param name="Semester">學期，傳入null代表取得所有學年度的資料</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; records = Merit.SelectByStudentIDs(StudentIDs);
                
                foreach(MeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectByRegisterDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; records = Merit.SelectByRegisterDate(StudentIDs,StartRegisterDate,EndRegisterDate);
                
                foreach(MeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.若是StartRegisterDate傳入null，則會傳回EndRegisterDate之前的資料。
            2.若是EndRegisterDate傳入null，則會傳回StartRegisterDate之後的資料。
            </remarks>
        </member>
        <member name="M:K12.Data.Merit.SelectByRegisterDate``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Merit.SelectByOccurDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及發生日期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartOccurDate">發生開始日期</param>
            <param name="EndOccurDate">發生結束日期</param> 
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MeritRecord&gt; records = Merit.SelectByOccurDate(StudentIDs,StartOccurDate,EndOccurDate);
                
                foreach(MeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.若是StartOccurDate傳入null，則會傳回EndOccurDate之前的資料。
            2.若是EndOccurDate傳入null，則會傳回StartOccurDate之後的資料。
            </remarks>
        </member>
        <member name="M:K12.Data.Merit.SelectByOccurDate``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及發生日期取得學生獎勵記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartOccurDate">發生開始日期</param>
            <param name="EndOccurDate">發生結束日期</param> 
            <returns>List&lt;MeritRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Merit.Insert(K12.Data.MeritRecord)">
            <summary>
            新增單筆學生獎勵記錄
            </summary>
            <param name="MeritRecord">學生獎勵記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    MeritRecord newrecord = new MeritRecord();
                    newrecord.RefStudentID = RefStudentID;
                    newrecord.SchoolYear = SchoolYear;
                    newrecord.Semester = Semester;
                    newrecord.OccurDate = DateTime.Today;
                    strng NewID = Merit.Insert(newrecord)
                    MeritRecord record = Merit.SelectByID(NewID);
                    System.Console.Writeln(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為學生記錄編號（RefStudentID）、學年度（SchoolYear）、學期（Semester）、缺曠日期（OccurDate）。
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.Merit.Insert(System.Collections.Generic.IEnumerable{K12.Data.MeritRecord})" -->
        <member name="M:K12.Data.Merit.Update(K12.Data.MeritRecord)">
            <summary>
            更新單筆學生獎勵記錄
            </summary>
            <param name="MeritRecord">學生獎勵記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                MeritRecord record = Merit.SelectByStudentIDs(StudentIDs)[0];
                record.OccurDate = DateTime.Today;
                int UpdateCount = Merit.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Merit.Update(System.Collections.Generic.IEnumerable{K12.Data.MeritRecord})">
            <summary>
            更新多筆學生獎勵記錄
            </summary>
            <param name="MeritRecords">多筆學生獎勵記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                MeritRecord record = Merit.SelectByStudentIDs(StudentIDs)[0];
                record.OccurDate = DateTime.Today;
                List&lt;MeritRecord&gt; records = new List&lt;MeritRecord&gt;();
                records.Add(record);
                int UpdateCount = Merit.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Merit.Delete(K12.Data.MeritRecord)">
            <summary>
            刪除單筆學生獎勵記錄
            </summary>
            <param name="MeritRecord">學生獎勵記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;MeritRecord&gt; records = Merit.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Merit.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Merit.Delete(System.String)">
            <summary>
            刪除單筆學生獎勵記錄
            </summary>
            <param name="MeritID">學生獎勵記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Merit.Delete(MeritID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Merit.Delete(System.Collections.Generic.IEnumerable{K12.Data.MeritRecord})">
            <summary>
            刪除多筆學生獎勵記錄
            </summary>
            <param name="MeritRecords">多筆學生獎勵記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.MeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;MeritRecord&gt; records = Merit.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Merit.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Merit.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生獎勵記錄
            </summary>
            <param name="MeritIDs">多筆學生獎勵記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Merit.Delete(MeritIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Merit.GetDetailContent(K12.Data.MeritRecord)">
            <summary>
            組合出 Detail 節點的內容。新增和修改的 Request Doc 都會用到。
            </summary>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="E:K12.Data.Merit.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Merit.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Merit.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Merit.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.Attendance">
            <summary>
            學生缺曠類別，提供方法用來取得、新增、修改及刪除學生缺曠資訊
            </summary>
        </member>
        <member name="M:K12.Data.Attendance.SelectAll">
            <summary>
            取得所有缺曠紀錄
            </summary>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                <code>
                List&lt;AttendanceRecord&gt; records = Attendance.SelectAll();
                
                foreach(AttendanceRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>    
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.Attendance.SelectAll``1">
            <summary>
            取得所有缺曠紀錄
            </summary>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                <code>
                List&lt;AttendanceRecord&gt; records = Attendance.SelectAll();
                
                foreach(AttendanceRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>    
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.Attendance.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根據條件取得缺曠紀錄列表
            </summary>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">缺曠發生開始時間</param>
            <param name="EndDate">缺曠發生結束時間</param>
            <param name="OccurDate">缺曠發生時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
        </member>
        <member name="M:K12.Data.Attendance.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根據條件取得缺曠紀錄列表
            </summary>
            <typeparam name="T">缺曠紀錄型別，繼承至K12.Data.AttendanceRecord</typeparam>
            <param name="StartDate">缺曠發生開始時間</param>
            <param name="EndDate">缺曠發生結束時間</param>
            <param name="OccurDate">缺曠發生時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
        </member>
        <member name="M:K12.Data.Attendance.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得缺曠紀錄列表
            </summary>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">缺曠發生開始時間</param>
            <param name="EndDate">缺曠發生結束時間</param>
            <param name="OccurDates">缺曠發生時間列表</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
        </member>
        <member name="M:K12.Data.Attendance.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得缺曠紀錄列表
            </summary>
            <typeparam name="T">缺曠紀錄型別，繼承至K12.Data.AttendanceRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">缺曠發生開始時間</param>
            <param name="EndDate">缺曠發生結束時間</param>
            <param name="OccurDates">缺曠發生時間列表</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
        </member>
        <member name="M:K12.Data.Attendance.SelectBySchoolYearAndSemester(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            取得指定學生在某學年度學期的學生缺曠紀錄
            </summary>
            <param name="Students">學生記錄物件列表</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                <code>
                List&lt;AttendanceRecord&gt; records = Attendance.SelectBySchoolYearAndSemester(Students, 98,1);
                
                foreach(AttendanceRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>    
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.Attendance.SelectBySchoolYearAndSemester``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            取得指定學生在某學年度學期的學生缺曠紀錄
            </summary>
            <param name="Students">學生記錄物件列表</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                List&lt;StudentRecord&gt; students = Student.Instance.SelectedList;
                List&lt;AttendanceRecord&gt; records = Attendance.GetByGetBySchoolYearAndSemester(students, 98,1);
            </example>    
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.Attendance.SelectBySchoolYearAndSemesterLessEqual(System.Collections.Generic.IEnumerable{System.String},K12.Data.SchoolYearSemester)">
            <summary>
            取得小於指定學年度及學期的資料
            </summary>
            <param name="StudentIDs">學生系統編號列表</param>
            <param name="SchoolYearSemester">學年度學期</param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Attendance.SelectBySchoolYearAndSemesterLessEqual``1(System.Collections.Generic.IEnumerable{System.String},K12.Data.SchoolYearSemester)">
            <summary>
            取得小於指定學年度及學期的資料
            </summary>
            <typeparam name="T"></typeparam>
            <param name="StudentIDs">學生系統編號列表</param>
            <param name="SchoolYearSemester">學年度學期</param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Attendance.SelectByDate(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord},System.DateTime,System.DateTime)">
             <summary>
             取得指定學生在日期區間的學生缺曠紀錄
             </summary>
             <param name="Students">學生記錄物件列表</param>
             <param name="BeginDate">開始日期</param>
             <param name="EndDate">結束日期</param>
             <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
             <seealso cref="T:K12.Data.AttendanceRecord"/>
             <remarks></remarks>
             <example>
                 <code>
                 DateTime beginDate = new DateTime(2009, 4, 1);
                 DateTime endDate = DateTime.Now ;
            
                 ListList&lt;AttendanceRecord&gt; records = Attendance.SelectByDate(Students, beginDate, endDate );
                 
                 foreach(AttendanceRecord record in records)
                     System.Console.WriteLine(record.RefStudentID);
                 </code>
             </example>           
        </member>
        <member name="M:K12.Data.Attendance.SelectByDate``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord},System.DateTime,System.DateTime)">
            <summary>
            取得指定學生在日期區間的學生缺曠紀錄
            </summary>
            <param name="Students">學生記錄物件列表</param>
            <param name="BeginDate">開始日期</param>
            <param name="EndDate">結束日期</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                DateTime beginDate = new DateTime(2009, 4, 1);
                DateTime endDate = DateTime.Now ;
                string[] studentIDs = Student.Instance.SelectedList.AsKeyList().ToArray();
                ListList&lt;AttendanceRecord&gt; records = Attendance.SelectByDate(studentIDs, beginDate, endDate );
            </example>           
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.Attendance.SelectByDate(System.DateTime,System.DateTime)">
             <summary>
             取得指定日期區間的學生缺曠紀錄
             </summary>
             <param name="BeginDate">開始日期</param>
             <param name="EndDate">結束日期</param>
             <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
             <seealso cref="T:K12.Data.AttendanceRecord"/>
             <example>
                 <code>
                 DateTime beginDate = new DateTime(2009, 4, 1);
                 DateTime endDate = DateTime.Now ;
            
                 List&lt;AttendanceRecord&gt; records = Attendance.SelectByDate(StudentIDs,beginDate, endDate );
                 foreach(AttendanceRecord record in records)
                     System.Console.WriteLine(record.RefStudentID);
                 </code>
             </example>           
        </member>
        <member name="M:K12.Data.Attendance.SelectByDate``1(System.DateTime,System.DateTime)">
            <summary>
            取得指定日期區間的學生缺曠紀錄
            </summary>
            <param name="BeginDate">開始日期</param>
            <param name="EndDate">結束日期</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                DateTime beginDate = new DateTime(2009, 4, 1);
                DateTime endDate = DateTime.Now ;
                string[] studentIDs = Student.Instance.SelectedList.AsKeyList().ToArray();
                List&lt;AttendanceRecord&gt; records = Attendance.SelectByDate(studentIDs, beginDate, endDate );
            </example>           
        </member>
        <member name="M:K12.Data.Attendance.SelectByStudents(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            取得指定學生歷年所有的學生缺曠紀錄
            </summary>
            <param name="Students">學生記錄物件列表</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                <code>
                List&lt;AttendanceRecord&gt; records = Attendance.SelectByStudents(Students);
                
                foreach(AttendanceRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Attendance.SelectByStudents``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            取得指定學生歷年所有的學生缺曠紀錄
            </summary>
            <param name="Students">學生記錄物件列表</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                string[] studentIDs = Student.Instance.SelectedList.AsKeyList().ToArray();
                List&lt;AttendanceRecord&gt; records = Attendance.SelectByStudents(studentIDs, beginDate, endDate );
            </example>
        </member>
        <member name="M:K12.Data.Attendance.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生缺曠紀錄
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                <code>
                List&lt;AttendanceRecord&gt; records = Attendance.SelectByStudentIDs(StudentIDs);
                
                foreach(AttendanceRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Attendance.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生缺曠紀錄
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;AttendanceRecord&gt;，一個 AttendanceRecord物件代表一個學生在某一天的缺曠紀錄。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <example>
                List&lt;AttendanceRecord&gt; records = Attendance.SelectByStudents(studentIDs, beginDate, endDate );
            </example>
        </member>
        <member name="M:K12.Data.Attendance.Insert(K12.Data.AttendanceRecord)">
            <summary>
            新增單筆學生缺曠記錄
            </summary>
            <param name="AttendanceRecord">學生缺曠記錄</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    AttendanceRecord newrecord = new AttendanceRecord();
                    newrecord.RefStudentID = RefStudentID;
                    newrecord.SchoolYear = SchoolYear;
                    newrecord.Semester = Semester;
                    newrecord.OccurDate = DateTime.Today;
                    strng NewID = Attendance.Insert(newrecord)
                    AttendanceRecord record = Attendance.SelectByID(NewID);
                    System.Console.Writeln(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為學生記錄編號（RefStudentID）、學年度（SchoolYear）、學期（Semester）、缺曠日期（OccurDate）。
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.Attendance.Insert(System.Collections.Generic.IEnumerable{K12.Data.AttendanceRecord})" -->
        <member name="M:K12.Data.Attendance.Update(K12.Data.AttendanceRecord)">
            <summary>
            更新單筆學生缺曠記錄
            </summary>
            <param name="AttendanceRecord">學生缺曠記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                AttendanceRecord record = Attendance.SelectByStudentID(Student)[0];
                record.OccurDate = DateTime.Today;
                int UpdateCount = Attendance.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Attendance.Update(System.Collections.Generic.IEnumerable{K12.Data.AttendanceRecord})">
            <summary>
            更新多筆學生缺曠記錄
            </summary>
            <param name="AttendanceRecords">多筆學生缺曠記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                AttendanceRecord record = Attendance.SelectByStudentID(Student)[0];
                record.Date = DateTime.Today;
                List&lt;AttendanceRecord&gt; records = new List&lt;AttendanceRecord&gt;();
                records.Add(record);
                int UpdateCount = Attendance.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Attendance.Delete(K12.Data.AttendanceRecord)">
            <summary>
            刪除單筆學生缺曠記錄
            </summary>
            <param name="AttendanceRecord">學生缺曠記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;AttendanceRecord&gt; records = Attendance.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Attendance.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Attendance.Delete(System.String)">
            <summary>
            刪除單筆學生缺曠記錄
            </summary>
            <param name="AttendanceID">學生缺曠記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Attendance.Delete(AttendanceID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Attendance.Delete(System.Collections.Generic.IEnumerable{K12.Data.AttendanceRecord})">
            <summary>
            刪除多筆學生缺曠記錄
            </summary>
            <param name="AttendanceRecords">多筆學生缺曠記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.AttendanceRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;AttendanceRecord&gt; records = Attendance.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Attendance.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Attendance.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生缺曠記錄
            </summary>
            <param name="AttendanceIDs">多筆學生缺曠記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Attendance.Delete(AttendanceIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.Attendance.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Attendance.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Attendance.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Attendance.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.DisciplineRecord">
            <summary>
            學生獎懲資訊
            </summary>
        </member>
        <member name="M:K12.Data.DisciplineRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.DisciplineRecord.#ctor(System.String,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            新增獎懲記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <param name="OccurDate">獎懲日期</param>
        </member>
        <member name="M:K12.Data.DisciplineRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.DisciplineRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.DisciplineRecord.RefStudentID">
            <summary>
            所屬學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.ID">
            <summary>
            學生獎懲系統編號
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.OccurDate">
            <summary>
            獎懲日期，必填
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.RegisterDate">
            <summary>
            登錄記錄日期
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.MeritFlag">
            <summary>
            獎勵懲戒類別，0是懲戒,1是獎勵,2是留校察看
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.Reason">
            <summary>
            獎懲理由
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.MeritA">
            <summary>
            大功數
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.MeritB">
            <summary>
            小功數
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.MeritC">
            <summary>
            獎勵數
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.DemeritA">
            <summary>
            大過數
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.DemeritB">
            <summary>
            小過數
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.DemeritC">
            <summary>
            警告數
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.ClearDate">
            <summary>
            銷過日期
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.ClearReason">
            <summary>
            銷過事由
            </summary>
        </member>
        <member name="P:K12.Data.DisciplineRecord.Cleared">
            <summary>
            是否銷過
            </summary>
        </member>
        <member name="T:K12.Data.AbsenceMapping">
            <summary>
            假別對照類別，提供方法用來取得假別對照資訊
            </summary>
        </member>
        <member name="M:K12.Data.AbsenceMapping.SelectAll">
            <summary>
            取得所有假別對照資訊
            </summary>
            <returns>List&lt;AbsenceMappingInfo&gt;，代表假別對照資訊物件列表。</returns>
        </member>
        <member name="M:K12.Data.AbsenceMapping.SelectAll``1">
            <summary>
            取得所有假別對照資訊
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:K12.Data.AbsenceMapping.Update(System.Collections.Generic.IEnumerable{K12.Data.AbsenceMappingInfo})">
            <summary>
            假別對照表
            </summary>
            <param name="Records"></param>
            <returns></returns>
        </member>
        <member name="E:K12.Data.AbsenceMapping.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.TeacherTagRecord">
            <summary>
            教師標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.TeacherTagRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.TeacherTagRecord.#ctor(System.String,System.String)">
            <summary>
            新增用建構式
            </summary>
            <param name="RefEntityID">RefEntityID，教師編號</param>
            <param name="RefTagID">RefTagID，標籤編號</param>
        </member>
        <member name="M:K12.Data.TeacherTagRecord.GetID(System.Xml.XmlElement)">
            <summary>
            取得教師標籤編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.TeacherTagRecord.GetEntityID(System.Xml.XmlElement)">
            <summary>
            取得教師編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.TeacherTagRecord.RefTeacherID">
            <summary>
            所屬教師編號
            </summary>
        </member>
        <member name="P:K12.Data.TeacherTagRecord.Teacher">
            <summary>
            取得所屬教師
            </summary>
        </member>
        <member name="T:K12.Data.Town">
            <summary>
            鄉鎮縣市類別，提供方法用來取得鄉鎮縣市資訊
            </summary>
        </member>
        <member name="M:K12.Data.Town.SelectByZipCode(System.String)">
            <summary>
            根據郵遞區號取得縣市鄉鎮列表。
            </summary>
            <param name="ZipCode">郵遞區號</param>
            <returns>List&lt;TownRecord&gt;，一個TownRecord物件代表一個縣市鄉鎮。</returns>
            <seealso cref="T:K12.Data.TownRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TownRecord&gt; records = Town.SelectByZipCode("302");
                    
                    foreach(TownRecord record in records)
                        System.Console.WriteLine(record.ZipCode);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Town.SelectZipCodeByTown(System.String,System.String)">
            <summary>
            根據縣市鄉鎮名稱取得郵遞區號。
            </summary>
            <param name="County">縣市名稱</param>
            <param name="Area">鄉鎮名稱</param>
            <returns>string，代表郵遞區號。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                string zipcode = Town.SelectZipCodeByTown("新竹縣","新豐鄉");
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Town.SelectByCounty(System.String)">
            <summary>
            根據縣市名稱取得縣市鄉鎮列表。
            </summary>
            <param name="County">縣市名稱</param>
            <returns>List&lt;TownRecord&gt;，TownRecord代表縣市鄉鎮物件。</returns>
            <seealso cref="T:K12.Data.TownRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
               <code>
               List&lt;TownRecord&gt; records = Town.SelectByCounty(County);
                 
               foreach(TownRecord record in records)
                    System.Console.WriteLine(record.ZipCode);
               </code>
            </example>    
        </member>
        <member name="M:K12.Data.Town.SelectCountyList">
            <summary>
            取得所有縣市列表
            </summary>
            <returns>List&lt;string&gt;，縣市列表。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;string&gt; countylist = Town.SelectCountyList();
                
                foreach(string county in countylist)
                    System.Console.WriteLine(county);
                </code>
            </example>    
        </member>
        <member name="M:K12.Data.Town.SelectAll">
            <summary>
            取得所有縣市鄉鎮區碼資料
            </summary>
            <returns>List&lt;TownRecord&gt;,TownRecord的清單。一個TownRecord 物件代表一個科別。</returns>
            <seealso cref="T:K12.Data.TownRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TownRecord&gt; records = Town.SelectAll();
                
               foreach(TownRecord record in records)
                    System.Console.WriteLine(record.ZipCode);
                </code>
            </example>    
        </member>
        <member name="T:K12.Data.PhoneRecord">
            <summary>
            學生電話資訊
            </summary>
        </member>
        <member name="M:K12.Data.PhoneRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.PhoneRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.PhoneRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.PhoneRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Permanent">
            <summary>
            戶籍電話
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Contact">
            <summary>
            聯絡電話
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Cell">
            <summary>
            手機
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Phone1">
            <summary>
            其他電話一
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Phone2">
            <summary>
            其他電話二
            </summary>
        </member>
        <member name="P:K12.Data.PhoneRecord.Phone3">
            <summary>
            其他電話三
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.ConfigData">
            <summary>
            代表一組的組態資料，使用「Key、Value」的方式取存。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.ConfigData.Contains(System.String)">
            <summary>
            判斷指定的名稱是否已經存在於組態中。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Configuration.ConfigData.Save">
            <summary>
            儲存組態資料，會一併更新相同 Namespace 的組態實體資料。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.ConfigData.Async">
            <summary>
            取得一個非同步版本的組態資料。
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.Record">
            <summary>
            取得或設定組態記錄資料。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.Namespace">
            <summary>
            取得組態的名稱空間。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.Item(System.String)">
            <summary>
            取得或設定指定的組態資料。
            </summary>
            <param name="name">組態 key 名稱，名稱中不可以包含特殊符號。(將值指定為「空字串」或是「Null」代表移除該設定，不過此行為在資料同步模式下無作用。)</param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.PreviousData">
            <summary>
            前版的組態資料，這是為了相容舊的資料而提供的成員，在一般情況是 Null。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.Count">
            <summary>
            取得組態數量。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.Sync">
            <summary>
            指示是否只要有人更新相同 Namespace 的資料，一併同步資料。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigData.Manager">
            <summary>
            管理此 Configuration 的類別。
            </summary>
        </member>
        <member name="T:K12.Data.Class">
            <summary>
            班級類別，提供方法用來取得、新增、修改及刪除班級資訊
            </summary>
        </member>
        <member name="M:K12.Data.Class.#cctor">
            <summary>
            Static建構式
            </summary>
        </member>
        <member name="M:K12.Data.Class.SelectAll">
            <summary>
            取得所有班級列表。
            </summary>
            <returns>List&lt;ClassRecord&gt;，代表班級物件列表。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ClassRecord&gt; records = Class.SelectAll();
                
                foreach(ClassRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Class.SelectAll``1">
            <summary>
            取得所有班級列表。
            </summary>
            <typeparam name="T">班級記錄物件型別，K12共用為K12.Data.ClassRecord</typeparam>
            <returns>ClassRecord，代表班級物件。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassRecord&gt; classes = Class.SelectAll&lt;K12.Data.ClassRecord&gt;();
            </example>
        </member>
        <member name="M:K12.Data.Class.SelectByID(System.String)">
             <summary>
             根據單筆班級編號取得班級物件。
             </summary>
             <param name="ClassID">班級編號</param>
             <returns>ClassRecord，代表班級物件。</returns>
             <seealso cref="T:K12.Data.ClassRecord"/>
             <exception cref="T:System.Exception">
             </exception>
             <example>
                 <code>
                 List&lt;ClassRecord&gt; records = Class.SelectAll();
             
                ClassRecord record = Class.SelectByID(records[(new System.Random()).Next(records.Count - 1)].ID);
            
                if (record != null)
                    System.Console.WriteLine(record.Name);
                 </code>
             </example>
             <remarks>若是ClassID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Class.SelectByID``1(System.String)">
            <summary>
            根據單筆班級編號取得班級物件。
            </summary>
            <typeparam name="T">班級記錄物件型別，K12共用為K12.Data.ClassRecord</typeparam>
            <param name="ClassID">班級編號</param>
            <returns>ClassRecord，代表班級物件。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                ClassRecord ClassRec = Class.SelectByID&lt;K12.Data.ClassRecord&gt;(ClassID);
            </example>
        </member>
        <member name="M:K12.Data.Class.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得班級物件列表。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;ClassRecord&gt;，代表班級物件。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ClassRecord&gt; allrecords = Class.SelectAll();
                
                List&lt;string&gt; IDs = new List&lt;string&gt;();
                
                foreach(ClassRecord record in allrecords)
                    IDs.Add(record.ID);
            
                List&lt;ClassRecord&gt; records = Class.SelectByIDs(IDs);
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Class.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得班級物件列表。
            </summary>
            <typeparam name="T">課程記錄物件型別，K12共用為K12.Data.ClassRecord</typeparam>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;ClassRecord&gt;，代表班級物件。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassRecord&gt; ClassRec = Class.SelectByIDs(classIDs);
            </example>
        </member>
        <member name="M:K12.Data.Class.GetCacheData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得班級物件列表，供Cache使用。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;ClassRecord&gt;，代表班級物件。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassRecord&gt; ClassRec = Class.SelectByIDs(classIDs);
            </example>
        </member>
        <member name="M:K12.Data.Class.GetDirectData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得班級物件列表。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;ClassRecord&gt;，代表班級物件。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassRecord&gt; ClassRec = Class.SelectByIDs(classIDs);
            </example>
        </member>
        <member name="M:K12.Data.Class.Insert(K12.Data.ClassRecord)">
            <summary>
            新增單筆班級記錄
            </summary>
            <param name="ClassRecord">班級記錄物件</param> 
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    ClassRecord newrecord = new ClassRecord();
                    newrecord.Name = (new System.Random()).NextDouble().ToString();
                    strng NewID = Class.Insert(newrecord)
                    ClassRecord record = Class.SelectByID(NewID);
                    System.Console.Writeln(record.Name);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為課程名稱（Name）。
            </remarks>
        </member>
        <member name="M:K12.Data.Class.Insert(System.Collections.Generic.IEnumerable{K12.Data.ClassRecord})">
            <summary>
            新增多筆班級記錄
            </summary>
            <param name="ClassRecords">多筆班級記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    JHClassRecord record = new JHClassRecord();
                    record.Name = (new System.Random()).NextDouble().ToString();
                    List&lt;JHClassRecord&gt; records = new List&lt;JHClassRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = JHClass.Insert(records);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Class.Update(K12.Data.ClassRecord)">
            <summary>
            更新單筆班級記錄
            </summary>
            <param name="ClassRecord">班級記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ClassRecord record = Class.SelectByID(ClassID);
                record.Name = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Class.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Class.Update(System.Collections.Generic.IEnumerable{K12.Data.ClassRecord})">
            <summary>
            更新多筆班級記錄
            </summary>
            <param name="ClassRecords">班級記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ClassRecord record = Class.SelectByID(ClassID);
                record.Name = (new System.Random()).NextDouble().ToString();
                List&lt;ClassRecord&gt; records = new List&lt;ClassRecord&gt;();
                records.Add(record);
                int UpdateCount = Class.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Class.Delete(System.Collections.Generic.IEnumerable{K12.Data.ClassRecord})">
            <summary>
            刪除多筆班級記錄
            </summary>
            <param name="ClassRecords">多筆班級記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;ClassRecord&gt; records = Class.SelectByIDs(ClassIDs);
                  int DeleteCount = Class.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Class.Delete(K12.Data.ClassRecord)">
            <summary>
            刪除單筆班級記錄
            </summary>
            <param name="ClassRecord">班級記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;ClassRecord&gt; record = Class.SelectByID(ClassID);
                  int DeleteCount = Class.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Class.Delete(System.String)">
            <summary>
            刪除單筆班級記錄
            </summary>
            <param name="ClassID">班級記錄系統編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Class.Delete(ClassID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Class.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆班級記錄
            </summary>
            <param name="ClassIDs">多筆班級記錄系統編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Class.Delete(ClassIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Class.RemoveAll">
            <summary>
            移除快取當中所有的資料
            </summary>
        </member>
        <member name="M:K12.Data.Class.RemoveByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號移除快取資料。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="E:K12.Data.Class.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Class.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Class.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Class.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.MeritDemeritReduce">
            <summary>
            功過換算表
            </summary>
        </member>
        <member name="M:K12.Data.MeritDemeritReduce.Select">
            <summary>
            取得功過換算表
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.MeritDemeritReduce.Select``1">
            <summary>
            取得功過換算表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:K12.Data.TagConfigRecord">
            <summary>
            標籤設定資訊
            </summary>
        </member>
        <member name="M:K12.Data.TagConfigRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.TagConfigRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.TagConfigRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.TagConfigRecord.ToXml">
            <summary>
            輸出成XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.TagConfigRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.Prefix">
            <summary>
            前置詞
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.Name">
            <summary>
            名稱
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.Category">
            <summary>
            分類，目前適用於Student、Class、Teacher、Course
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.ColorCode">
            <summary>
            顏色的原始32位元數字
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.Color">
            <summary>
            顏色
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.AccessControlCode">
            <summary>
            權限存取代碼。
            </summary>
        </member>
        <member name="P:K12.Data.TagConfigRecord.FullName">
            <summary>
            完整名稱
            </summary>
        </member>
        <member name="T:K12.Data.StudentTagRecord">
            <summary>
            學生標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.StudentTagRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.StudentTagRecord.#ctor(System.String,System.String)">
            <summary>
            新增用建構式
            </summary>
            <param name="RefEntityID">RefEntityID，可能為學生編號、班級編號、課程編號及教師編號</param>
            <param name="RefTagID">RefTagID，標籤編號</param>
        </member>
        <member name="M:K12.Data.StudentTagRecord.GetID(System.Xml.XmlElement)">
            <summary>
            取得學生標籤編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.StudentTagRecord.GetEntityID(System.Xml.XmlElement)">
            <summary>
            取得學生編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.StudentTagRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.StudentTagRecord.Student">
            <summary>
            取得所屬學生
            </summary>
        </member>
        <member name="T:K12.Data.Photo">
            <summary>
            學生照片類別，提供方法用來取得及修改學生照片資訊
            </summary>
        </member>
        <member name="M:K12.Data.Photo.UpdateFreshmanPhoto(System.Drawing.Bitmap,System.String)">
            <summary>
            更新學生入學照片
            </summary>
            <param name="image">照片物件，為System.Drawing.Bitmap格式</param>
            <param name="StudentID">學生記錄編號</param>
        </member>
        <member name="M:K12.Data.Photo.UpdateGraduatePhoto(System.Drawing.Bitmap,System.String)">
            <summary>
            更新學生畢業照片
            </summary>
            <param name="image">照片物件，為System.Drawing.Bitmap格式</param>
            <param name="StudentID">學生記錄編號</param>
        </member>
        <member name="M:K12.Data.Photo.UpdateFreshmanPhoto(System.String,System.String)">
            <summary>
            更新學生入學照片
            </summary>
            <param name="picBase64String">照片內容，為字串格式</param>
            <param name="StudentID">學生記錄編號</param>
        </member>
        <member name="M:K12.Data.Photo.UpdateGraduatePhoto(System.String,System.String)">
            <summary>
            更新學生畢業照片
            </summary>
            <param name="picBase64String">照片內容，為字串格式</param>
            <param name="StudentID">學生記錄編號</param>
        </member>
        <member name="M:K12.Data.Photo.SelectFreshmanPhoto(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            取得多筆學生入學照片
            </summary>
            <param name="StudentIDs"></param>
            <returns>傳回為Dictionary，Key為學生記錄紀號，Value為照片內容</returns>
        </member>
        <member name="M:K12.Data.Photo.SelectFreshmanPhoto(System.String)">
            <summary>
            取得學生入學照片
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>照片內容</returns>
        </member>
        <member name="M:K12.Data.Photo.SelectGraduatePhoto(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            取得多筆學生畢業照片
            </summary>
            <param name="StudentIDs"></param>
            <returns>傳回為Dictionary，Key為學生記錄紀號，Value為照片內容</returns>
        </member>
        <member name="M:K12.Data.Photo.SelectGraduatePhoto(System.String)">
            <summary>
            取得學生畢業照片
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>照片內容</returns>
        </member>
        <member name="T:K12.Data.Parent">
            <summary>
            學生家長及監護人類別，提供方法用來取得及修改學生家長及監護人資訊
            </summary>
        </member>
        <member name="M:K12.Data.Parent.SelectAll">
            <summary>
            取得所有學生家長及監護人記錄物件列表。
            </summary>
            <returns>List&lt;ParentRecord&gt;，代表多筆學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ParentRecord&gt; records = Parent.SelectAll();
                
                foreach(ParentRecord record in records)
                    Console.WrlteLine(record.Mother.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Parent.SelectAll``1">
            <summary>
            取得所有學生家長及監護人記錄物件列表。
            </summary>
            <typeparam name="T">家長及監護人記錄物件及其後代。</typeparam>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生家長及監護人記錄物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>ParentRecord，代表學生家長及監人記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                PaerntRecord record = Parent.SelectByStudent(Student);
                
               if (record != null)
                   System.Console.WriteLine(record.Mother.Name);
                </code>
            </example>
            <remarks>若是Student不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生家長及監護人記錄物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>ParentRecord，代表學生家長及監人記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ParentRecord record = Parent.SelectByStudent(StudentID);
                
                if (record != null)
                   System.Console.WriteLine(record.Mother.Name);
                </code>
            </example>
            <remarks>若是StudentID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生家長及監護人記錄物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>ParentRecord，代表學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ParentRecord record = Parent.SelectByStudent(StudentID);
                
                if (record != null)
                   System.Console.WriteLine(record.Mother.Name);
                </code>
            </example>
            <remarks>若是StudentID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生家長及監護人記錄物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>ParentRecord，代表學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                ParentRecord parentrec = Parent.SelectByStudent(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudents(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生家長及監護人記錄物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;ParentRecord&gt;，代表多筆學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ParentRecord&gt; records = Parent.SelectByStudents(Students);
                
                foreach(ParentRecord record in records)
                    Console.WrlteLine(record.Mother.Name);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudents``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生家長及監護人記錄物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;ParentRecord&gt;，代表多筆學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ParentRecord&gt; parentrecs = Parent.SelectByStudents(Students);
            </example>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudentIDs(System.Collections.Generic.List{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生家長及監護人記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;ParentRecord&gt;，代表多筆學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;ParentRecord&gt; records = Parent.SelectByStudentIDs(StudentIDs);
                
                foreach(ParentRecord record in records)
                    Console.WrlteLine(record.Mother.Name);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Parent.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生家長及監護人記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;ParentRecord&gt;，代表多筆學生家長及監護人記錄物件。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ParentRecord&gt; parentrecs = Parent.SelectByStudents(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.Parent.GetRelationship">
            <summary>
            取得關係列表，如父子、母子…等。
            </summary>
            <returns>List&lt;KeyValuePair&lt;string, string&gt;&gt;，多筆關係列表物件。</returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.Parent.GetNationalityList">
            <summary>
            取得國籍列表。
            </summary>
            <returns>List&lt;string&gt;，代表國籍列表。</returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.Parent.Update(K12.Data.ParentRecord)">
            <summary>
            更新單筆家長及監護人記錄
            </summary>
            <param name="ParentRecord">家長及監護人記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ParentRecord record = Parent.SelectByStudentID(StudentID);
                record.Mother.Name = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Parent.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Parent.Update(System.Collections.Generic.IEnumerable{K12.Data.ParentRecord})">
            <summary>
            更新多筆家長及監護人記錄
            </summary>
            <param name="ParentRecords">多筆家長及監護人記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ParentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                ParentRecord record = Parent.SelectByStudentID(StudentID);
                record.Mother.Name = (new System.Random()).NextDouble().ToString();
                List&lt;ParentRecord&gt; records = new List&lt;ParentRecord&gt;();
                records.Add(record);
                int UpdateCount = Parent.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="E:K12.Data.Parent.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.Typed_Extends">
            <summary>
            延伸 ConfigData 有關型別處理的功能。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Typed_Extends.GetBoolean(K12.Data.Configuration.ConfigData,System.String,System.Boolean)">
            <summary>
            取得 Boolean 資料。如果資料不存在會回傳「defaultValue」，如果資料存在會轉型成 Boolean。轉型失敗會產生 Exception。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Typed_Extends.SetBoolean(K12.Data.Configuration.ConfigData,System.String,System.Boolean)">
            <summary>
            設定 Boolean 資料。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Typed_Extends.GetInteger(K12.Data.Configuration.ConfigData,System.String,System.Int32)">
            <summary>
            取得 Integer 資料。如果資料不存在會回傳「defaultValue」，如果資料存在會轉型成 Integer。轉型失敗會產生 Exception。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Typed_Extends.SetInteger(K12.Data.Configuration.ConfigData,System.String,System.Int32)">
            <summary>
            設定 Integer 資料。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Typed_Extends.GetXml(K12.Data.Configuration.ConfigData,System.String,System.Xml.XmlElement)">
            <summary>
            取得 Xml 資料。如果資料不存在會回傳「defaultValue」，如果資料存在會轉型成 XmlElement。轉型失敗會產生 Exception。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Typed_Extends.SetXml(K12.Data.Configuration.ConfigData,System.String,System.Xml.XmlElement)">
            <summary>
            設定 Xml 資料。
            </summary>
        </member>
        <member name="T:K12.Data.ClassRecord">
            <summary>
            班級資訊
            </summary>
        </member>
        <member name="M:K12.Data.ClassRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.ClassRecord.#ctor(System.String)">
            <summary>
            新增班級記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="Name">班級名稱</param>
        </member>
        <member name="M:K12.Data.ClassRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            Xml參數建構式
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.ClassRecord.Load(System.Xml.XmlElement)">
            <summary>
            載入XML方法
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:K12.Data.ClassRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.Name">
            <summary>
            名稱
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.GradeYear">
            <summary>
            年級
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.NamingRule">
            <summary>
            命名規則，班級升級用，如果設定成「資{一、二、三}甲」，資 X 甲的 X 會依據班級的年級自動改變班級名稱
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.RefTeacherID">
            <summary>
            班導師編號
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.RefProgramPlanID">
            <summary>
            課程規劃編號
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.RefScoreCalcRuleID">
            <summary>
            成績計算規則編號
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.DisplayOrder">
            <summary>
            顯示順序
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.RefDepartmentID">
            <summary>
            科別編號
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.Teacher">
            <summary>
            班導師
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.ProgramPlan">
            <summary>
            所屬課程規劃
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.ScoreCalcRule">
            <summary>
            所屬成績計算規則
            </summary>
        </member>
        <member name="P:K12.Data.ClassRecord.Students">
            <summary>
            取得班級學生
            </summary>
        </member>
        <member name="M:K12.Data.SQLLite.GetDataTable(System.String)">
            <summary>
            執行SQL語法會傳回DataTable
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SQLLite.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            執行SQL
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.SQLLite.Connection">
            <summary>
            取得SQLLiteConnection物件
            </summary>
        </member>
        <member name="T:K12.Data.TagCategory">
            <summary>
            標籤類別種類
            </summary>
        </member>
        <member name="F:K12.Data.TagCategory.Student">
            <summary>
            學生（Student）、班級（Class）、教師（Teacher）、課程（Course）
            </summary>
        </member>
        <member name="T:K12.Data.TagConfig">
            <summary>
            標籤設定類別，提供方法用來取得、新增、修改及刪除標籤設定
            </summary>
        </member>
        <member name="M:K12.Data.TagConfig.SelectAll">
            <summary>
            取得所有標籤設定列表。
            </summary>
            <returns>List&lt;TagConfigRecord&gt;，代表多筆標籤設定物件。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TagConfigRecord&gt; records = TagConfig.SelectAll();
                
                foreach(TagConfigRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks></remarks>        
        </member>
        <member name="M:K12.Data.TagConfig.SelectAll``1">
            <summary>
            取得所有標籤設定列表。
            </summary>
            <returns>List&lt;TagConfigRecord&gt;，代表多筆標籤設定物件。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TagConfigRecord&gt; tagconfigs = TagConfig.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByID(System.String)">
            <summary>
            根據單筆標籤設定編號取得標籤設定物件。
            </summary>
            <param name="TagConfigID">標籤設定編號</param>
            <returns>TagConfigRecord，代表單筆標籤設定物件。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TagConfigRecord record = TagConfig.SelectByID(TagConfigID);
                
               if (record != null)
                   System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks>若是TagConfigID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByID``1(System.String)">
            <summary>
            根據單筆標籤設定編號取得標籤設定物件。
            </summary>
            <param name="TagConfigRecordID">標籤設定編號</param>
            <returns>TagConfigRecord，代表單筆標籤設定物件。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                TagConfigRecord tagconfig = ClassTag.SelectByID(TagConfigRecordID);
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆標籤設定編號取得標籤設定物件。
            </summary>
            <param name="TagConfigIDs">多筆標籤設定編號</param>
            <returns>List&lt;TagConfigRecord&gt;，代表多筆標籤設定物件。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/> 
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TagConfigRecord&gt; records = TagConfig.SelectByIDs(TagConfigIDs);
                
                foreach(TagConfigRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆標籤設定編號取得標籤設定物件。
            </summary>
            <param name="TagConfigRecordIDs">多筆標籤設定編號</param>
            <returns>List&lt;TagConfigRecord&gt;，代表多筆標籤設定物件。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/> 
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TagConfigRecord&gt; records = TagConfig.SelectByIDs(TagConfigRecordIDs);
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByCategory(K12.Data.TagCategory)">
             <summary>
             根據標籤設定所屬分類( TagCategory )，取得該分類的標籤設定
             </summary>
             <param name="TagCategory">標籤設定所屬分類，參考 TagCategory 列舉型別。</param>
             <returns>List&lt;TagConfigRecord&gt;，指定標籤分類中的所有標籤設定</returns>
             <seealso cref="T:K12.Data.TagCategory"/>
             <seealso cref="T:K12.Data.TagConfigRecord"/>
             <exception cref="T:System.Exception">
             </exception>
             <example>
                 <code>
                 List&lt;TagConfigRecord&gt; records = TagConfig.SelectByCategory(TagCategory.Student);
                 
                 foreach(TagConfigRecord record in records)
                     Console.WrlteLine(record.Name);
                 </code>
            </example>
            <remarks>傳入的參數可為TagCategory.Student、TagCategory.Class、TagCategory、Teacher、TagCategory.Course</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByCategory``1(K12.Data.TagCategory)">
            <summary>
            根據標籤設定所屬分類( TagCategory )，取得該分類的標籤設定
            </summary>
            <param name="TagCategory">標籤設定所屬分類，參考 TagCategory 列舉型別。</param>
            <returns>List&lt;TagConfigRecord&gt;，指定標籤分類中的所有標籤設定</returns>
            <seealso cref="T:K12.Data.TagCategory"/>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TagConfigRecord&gt; records = TagConfig.SelectByCategory(TagCategory.Student);
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.SelectPrefixByCategory(K12.Data.TagCategory)">
            <summary>
            根據標籤所屬分類( TagCategory )，取得該種類中所有的標籤類別 (TagPrefix)
            </summary>
            <param name="TagCategory"> 標籤所屬分類，參考 TagCategory 列舉型別。</param>
            <returns>指定標籤分類中的所有標籤類別</returns>
            <seealso cref="T:K12.Data.TagCategory"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;string&gt; records = TagConfig.SelectPrefixByCategory(TagCategory.Student);
                
                    foreach(string record in records)
                        Console.WrlteLine(record);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByCategoryAndPrefix(K12.Data.TagCategory,System.String)">
            <summary>
            根據標籤設定所屬分類( TagCategory )以及標籤設定類別（Prefix），取得該分類的標籤設定
            </summary>
            <param name="TagCategory">標籤設定所屬分類，參考 TagCategory 列舉型別。</param>
            <param name="Prefix">標籤設定類別（Prefix）</param>
            <returns>List&lt;TagConfigRecord&gt;，多筆標籤設定</returns>
            <seealso cref="T:K12.Data.TagCategory"/>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TagConfigRecord&gt; records = TagConfig.SelectByCategoryAndPrefix(TagCategory.Student,Prefix);
                
                foreach(TagConfigRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.SelectByCategoryAndPrefix``1(K12.Data.TagCategory,System.String)">
            <summary>
            根據標籤設定所屬分類( TagCategory )以及標籤設定類別（Prefix），取得該分類的標籤設定
            </summary>
            <param name="TagCategory">標籤設定所屬分類，參考 TagCategory 列舉型別。</param>
            <param name="Prefix">標籤設定類別（Prefix）</param>
            <returns>List&lt;TagConfigRecord&gt;，多筆標籤設定</returns>
            <seealso cref="T:K12.Data.TagCategory"/>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.Insert(K12.Data.TagConfigRecord)">
            <summary>
            新增單筆標籤設定記錄
            </summary>
            <param name="TagConfigRecord">標籤設定記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    TagConfigRecord newrecord = new TagConfigRecord();
                    newrecord.Prefix = (new System.Random()).NextDouble().ToString();
                    newrecord.Name = (new System.Random()).NextDouble().ToString();
                    newrecord.Category = "student";
                    strng NewID = TagConfig.Insert(newrecord)
                    TagConfigRecord record = TagConfig.SelectByID(NewID);
                    System.Console.Writeln(record.Name);
                </code>
            </example>
            <remarks>
            新增一律傳回新增物件的編號。
            </remarks>
        </member>
        <member name="M:K12.Data.TagConfig.Insert(System.Collections.Generic.IEnumerable{K12.Data.TagConfigRecord})">
            <summary>
            新增多筆標籤設定記錄
            </summary>
            <param name="TagConfigRecords">多筆標籤設定記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    TagConfigRecord record = new TagConfigRecord();
                    record.Prefix = (new System.Random()).NextDouble().ToString();
                    record.Name = (new System.Random()).NextDouble().ToString();
                    record.Category = "student";
                    List&lt;TagConfigRecord&gt; records = new List&lt;TagConfigRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = TagConfig.Insert(records);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TagConfig.Update(K12.Data.TagConfigRecord)">
            <summary>
            更新單筆標籤設定記錄
            </summary>
            <param name="TagConfigRecord">標籤設定記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TagConfigRecord record = TagConfig.SelectByID(TagConfigID);
                record.Name = (new System.Random()).NextDouble().ToString();
                int UpdateCount = TagConfig.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.Update(System.Collections.Generic.IEnumerable{K12.Data.TagConfigRecord})">
            <summary>
            更新多筆標籤設定記錄
            </summary>
            <param name="TagConfigRecords">多筆標籤設定記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="!:TagConfigRecords"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                TagConfigRecord record = TagConfig.SelectByID(TagConfigID);
                record.Name = (new System.Random()).NextDouble().ToString();
                List&lt;TagConfigRecord&gt; records = new List&lt;TagConfigRecord&gt;();
                records.Add(record);
                int UpdateCount = TagConfig.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.Delete(System.Collections.Generic.IEnumerable{K12.Data.TagConfigRecord})">
            <summary>
            刪除多筆標籤設定記錄
            </summary>
            <param name="TagConfigRecords">多筆標籤設定記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;TagConfigRecord&gt; records = TagConfig.SelectByIDs(TagConfigIDs);
                  int DeleteCount = TagConfig.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.Delete(K12.Data.TagConfigRecord)">
            <summary>
            刪除單筆標籤設定記錄
            </summary>
            <param name="TagConfigRecord">標籤設定記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TagConfigRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  TagConfigRecord record = TagConfig.SelectByID(TagConfigID);
                  int DeleteCount = TagConfig.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.TagConfig.Delete(System.String)">
            <summary>
            刪除單筆標籤設定記錄
            </summary>
            <param name="TagConfigID">標籤設定記錄編號</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = TagConfig.Delete(TagConfigID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.TagConfig.Delete(System.Collections.Generic.IEnumerable{System.String})" -->
        <member name="M:K12.Data.TagConfig.IsSupportAccessControlCode">
            <summary>
            判斷資料庫 Schema 的版本是否大於「20120501」。
            大於該版本，代表支援「AccessControlCode」。
            </summary>
            <returns></returns>
        </member>
        <member name="E:K12.Data.TagConfig.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.TagConfig.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.TagConfig.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.Student">
            <summary>
            學生類別，提供方法用來取得、新增、修改及刪除學生資訊
            </summary>
        </member>
        <member name="M:K12.Data.Student.#cctor">
            <summary>
            Static建構式
            </summary>
        </member>
        <member name="M:K12.Data.Student.SelectByClass(K12.Data.ClassRecord)">
            <summary>
            根據班級記錄物件取得學生記錄編號列表。
            </summary>
            <param name="ClassRec">班級記錄物件</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentRecord&gt; records = Student.SelectByClass(ClassRec);
                
                foreach(StudentRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Student.SelectByClassID(System.String)">
            <summary>
            根據班級編號取得學生記錄編號列表。
            </summary>
            <param name="ClassID">班級編號</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentRecord&gt; records = Student.SelectByClassID(ClassID);
                
                foreach(StudentRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Student.SelectByClassID``1(System.String)">
            <summary>
            根據班級編號取得學生記錄編號列表。
            </summary>
            <typeparam name="T">學生記錄物件型別，K12共用為K12.Data.StudentRecord</typeparam>
            <param name="ClassID">班級編號</param>
            <returns>List&lt;string&gt;，代表多筆學生記錄編號。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;string; IDs = Student.GetByClassID&lt;K12.Data.StudentRecord&gt;(ClassID);
            </example>
        </member>
        <member name="M:K12.Data.Student.SelectByClasses(System.Collections.Generic.IEnumerable{K12.Data.ClassRecord})">
            <summary>
            根據多筆班級記錄物件取得學生記錄編號列表。
            </summary>
            <param name="ClassRecs">多筆班級記錄物件</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentRecord&gt; records = Student.SelectByClasses(ClassRecs);
                
                foreach(StudentRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Student.SelectByClassIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆班級編號取得學生記錄編號列表。
            </summary>
            <param name="ClassIDs">多筆班級編號</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentRecord&gt; records = Student.SelectByClassIDs(ClassIDs);
                
                foreach(StudentRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Student.SelectAll">
            <summary>
            取得所有學生記錄列表。
            </summary>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentRecord&gt; records = Student.SelectAll();
                
                foreach(StudentRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Student.SelectAll``1">
            <summary>
            取得所有學生記錄列表。
            </summary>
            <typeparam name="T">學生記錄物件型別，K12共用為K12.Data.StudentRecord</typeparam>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;StudentRecord&gt; students = Student.SelectAll&lt;K12.Data.StudentRecord&gt;();
            </example>
        </member>
        <member name="M:K12.Data.Student.SelectByID(System.String)">
            <summary>
            根據單筆學生編號取得學生記錄。
            </summary>
            <param name="StudentID">學生編號</param>
            <returns>StudentRecord，代表學生記錄物件</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                StudentRecord record = Student.SelectByID(StudentID);
                
                if (record != null)
                    System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks>若是StudentID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Student.SelectByID``1(System.String)">
            <summary>
            根據單筆學生編號取得學生記錄。
            </summary>
            <typeparam name="T">學生記錄物件型別，K12共用為K12.Data.StudentRecord</typeparam>
            <param name="StudentID">學生編號</param>
            <returns>StudentRecord，代表學生記錄物件</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                StudentRecord StudentRec = Student.SelectByID&lt;K12.Data.StudentRecord&gt;(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.Student.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生記錄列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentRecord&gt; records = Student.SelectByIDs(CourseIDs);
                
                foreach(StudentRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Student.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生記錄列表。
            </summary>
            <typeparam name="T">學生記錄物件型別，K12共用為K12.Data.StudentRecord</typeparam>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;StudentRecord&gt; studentrecs = Student.SelectByIDs&lt;K12.Data.StudentRecord&gt;(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.Student.SelectCacheByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生記錄列表，供Cache使用。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;StudentRecord&gt; studentrecs = Student.SelectByIDs(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.Student.SelectDirectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生記錄列表，供Cache，直接向DSA取得資料。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;StudentRecord&gt;，代表多筆學生記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;StudentRecord&gt; studentrecs = Student.SelectByIDs(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.Student.Insert(K12.Data.StudentRecord)">
            <summary>
            新增單筆學生記錄
            </summary>
            <param name="StudentRecord">學生記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    StudentRecord newrecord = new StudentRecord();
                    newrecord.Name = (new System.Random()).NextDouble().ToString();
                    newrecord.Gender = "男";
                    strng NewID = Student.Insert(newrecord)
                    StudentRecord record = Student.SelectByID(NewID);
                    System.Console.Writeln(record.Name);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為課程名稱（Name）。
            </remarks>
        </member>
        <member name="M:K12.Data.Student.Insert(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            新增多筆學生記錄
            </summary>
            <param name="StudentRecords">多筆班級記錄物件</param>
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    StudentRecord record = new StudentRecord();
                    record.Name = (new System.Random()).NextDouble().ToString();
                    List&lt;StudentRecord&gt; records = new List&lt;StudentRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = Student.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Student.Update(K12.Data.StudentRecord)">
            <summary>
            更新單筆學生記錄
            </summary>
            <param name="StudentRecord">學生記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                StudentRecord record = Student.SelectByID(StudentID);
                record.Name = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Student.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Student.Update(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            更新多筆學生記錄
            </summary>
            <param name="StudentRecords">多筆學生記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                StudentRecord record = Student.SelectByID(StudentID);
                record.Name = (new System.Random()).NextDouble().ToString();
                List&lt;StudentRecord&gt; records = new List&lt;StudentRecord&gt;();
                records.Add(record);
                int UpdateCount = Student.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Student.Delete(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            刪除多筆學生記錄
            </summary>
            <param name="StudentRecords">多筆學生記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;StudentRecord&gt; records = Student.SelectByIDs(StudentIDs);
                  int DeleteCount = Student.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Student.Delete(K12.Data.StudentRecord)">
            <summary>
            刪除單筆學生記錄
            </summary>
            <param name="StudentRecord">學生記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  StudentRecord record = Student.SelectByID(StudentID);
                  int DeleteCount = Student.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Student.Delete(System.String)">
            <summary>
            刪除單筆學生記錄
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Student.Delete(StudentID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Student.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生標籤記錄
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Student.Delete(StudentIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Student.RemoveAll">
            <summary>
            移除快取當中所有的資料
            </summary>
        </member>
        <member name="M:K12.Data.Student.RemoveByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號移除快取資料。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="E:K12.Data.Student.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Student.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Student.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Student.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.SchoolHoliday">
            <summary>
            學校放假日類別，用來取得與設定學校的放假日資訊
            </summary>
        </member>
        <member name="M:K12.Data.SchoolHoliday.SelectSchoolHolidayRecord">
            <summary>
            取得學校放假日的組態值
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SchoolHoliday.SetSchoolHolidayRecord(K12.Data.SchoolHolidayRecord)">
            <summary>
            設定學校放假日的組態值
            </summary>
            <param name="schoolHolidayRecord"></param>
        </member>
        <member name="T:K12.Data.Address">
            <summary>
            學生地址類別，提供方法用來取得及修改學生地址資訊
            </summary>
        </member>
        <member name="M:K12.Data.Address.SelectAll">
            <summary>
            取得所有學生地址記錄物件列表。
            </summary>
            <returns>List&lt;AddressRecord&gt;，代表多筆學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;AddressRecord&gt; records = Address.SelectAll();
                
                foreach(AddressRecord record in records)
                    System.Console.WriteLine(record.Name); 
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Address.SelectAll``1">
            <summary>
            根據多筆學生記錄編號取得地址記錄物件列表。
            </summary>
            <returns>List&lt;AddressRecord&gt;，代表多筆學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;AddressRecord&gt; records = Address.SelectAll();
                
                foreach(AddressRecord record in records)
                    System.Console.WriteLine(record.Name); 
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Address.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生地址記錄物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>AddressRecord，代表學生地址物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    AddressRecord record = Address.SelectByStudent(Student);
                    
                    if (record!=null)
                        System.Console.WriteLine(record.Permanent.ZipCode); 
                </code>
            </example>
            <remarks>若是Student不存在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Address.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生地址記錄物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>AddressRecord，代表學生地址物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                AddressRecord addressrec = Address.SelectByStudent(Student);
            </example>
        </member>
        <member name="M:K12.Data.Address.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生地址記錄物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>AddressRecord，代表學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    AddressRecord record = Address.SelectByStudentID(StudentID);
                    
                    if (record!=null)
                      System.Console.WriteLine(record.Permanent.ZipCode); 
                </code>
            </example>
            <remarks>若是StudentID不存在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Address.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生地址記錄物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>AddressRecord，代表學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                AddressRecord addressrec = Address.SelectByStudent(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.Address.SelectByStudents(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得地址記錄物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;AddressRecord&gt;，代表多筆學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;AddressRecord&gt; records = Address.SelectByStudents(Students);
                
                foreach(AddressRecord record in records)
                    System.Console.WriteLine(record.Name); 
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Address.SelectByStudents``1(System.Collections.Generic.IEnumerable{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得地址記錄物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;AddressRecord&gt;，代表多筆學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AddressRecord&gt; addressrecs = Address.SelectByStudents(Students);
            </example>
        </member>
        <member name="M:K12.Data.Address.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得地址記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;AddressRecord&gt;，代表多筆學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;AddressRecord&gt; records = Address.SelectByStudentIDs(StudentIDs);
                
                foreach(AddressRecord record in records)
                    System.Console.WriteLine(record.Name); 
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Address.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得地址記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;AddressRecord&gt;，代表多筆學生地址記錄物件。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;AddressRecord&gt; addressrecs = Address.SelectByStudents(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.Address.Update(K12.Data.AddressRecord)">
            <summary>
            更新單筆學生地址記錄
            </summary>
            <param name="AddressRecord">學生地址記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                AddressRecord record = Address.SelectByStudentID(StudentID);
                record.PerPermanent.ZipCode = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Address.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Address.Update(System.Collections.Generic.IEnumerable{K12.Data.AddressRecord})">
            <summary>
            更新多筆學生地址記錄
            </summary>
            <param name="AddressRecords">多筆學生地址記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.AddressRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                AddressRecord record = Address.SelectByStudentID(StudentID);
                record.PerPermanent.ZipCode = (new System.Random()).NextDouble().ToString();
                List&lt;AddressRecord&gt; records = new List&lt;AddressRecord&gt;();
                records.Add(record);
                int UpdateCount = Address.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="E:K12.Data.Address.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.SCETakeRecord">
            <summary>
            學生期中成績資訊
            </summary>
        </member>
        <member name="M:K12.Data.SCETakeRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.SCETakeRecord.#ctor(System.String,System.String)">
            <summary>
            新增學生期中成績記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefSCAttendID">所屬學生修課編號</param>
            <param name="RefExamID">所屬試別設定編號</param>
        </member>
        <member name="M:K12.Data.SCETakeRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.SCETakeRecord.ToXML">
            <summary>
            將資料匯出成XML格式
            <![CDATA[
            ]]>
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SCETakeRecord.ToString">
            <summary>
            覆寫Object的ToString()方法，傳回XML字串
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:K12.Data.SCETakeRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入資料
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.SCETakeRecord.Load(System.String)">
            <summary>
            從字串XML載入資料
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.SCETakeRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.Score">
            <summary>
            成績，此成績為高中專屬，高中的成績會在Extension欄位中定義
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.Text">
            <summary>
            文字評量，國高中皆存在相同位置，為Extension欄位
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.Extension">
            <summary>
            延伸欄位資訊
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.RefSCAttendID">
            <summary>
            所屬學生修課編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.RefExamID">
            <summary>
            所屬試別設定編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.RefCourseID">
            <summary>
            所屬課程編號
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.SCAttend">
            <summary>
            所屬學生修課
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.Exam">
            <summary>
            所屬試別設定
            </summary>
        </member>
        <member name="P:K12.Data.SCETakeRecord.Course">
            <summary>
            所屬課程
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Configuration_ExtendMethods.SaveAll(System.Collections.Generic.IEnumerable{K12.Data.Configuration.ConfigData})">
            <summary>
            儲存所有組態資料。
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.ConfigProvider_Global">
            <summary>
            實作組態存取介面，核心會透過此類別存取組態資料。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:K12.Data.StringComparer" -->
        <member name="M:K12.Data.StringComparer.Comparer(System.String,System.String)">
            <summary>
            使用預設字根比較字串
            </summary>
        </member>
        <member name="M:K12.Data.StringComparer.Comparer(System.String,System.String,System.String[])">
            <summary>
            使用自訂字根比較字串
            </summary>
            <param name="keys">使用字根</param>
        </member>
        <member name="M:K12.Data.StringComparer.#ctor">
            <summary>
            建構子
            </summary>
        </member>
        <member name="M:K12.Data.StringComparer.#ctor(System.String[])">
            <summary>
            建構子，傳入自訂的字根
            </summary>
            <param name="keys">使用字根</param>
        </member>
        <member name="M:K12.Data.StringComparer.Compare(System.String,System.String)">
            <summary>
            比較
            </summary>
        </member>
        <member name="T:K12.Data.SCAttendRecord">
            <summary>
            學生修課資訊
            </summary>
        </member>
        <member name="M:K12.Data.SCAttendRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.SCAttendRecord.#ctor(System.String,System.String)">
            <summary>
            新增學生修課記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="RefCourseID">所屬課程編號</param>
        </member>
        <member name="M:K12.Data.SCAttendRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:K12.Data.SCAttendRecord.RefStudentID">
            <summary>
            所屬學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.RefCourseID">
            <summary>
            所屬課程編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Course">
            <summary>
            所屬課程
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Score">
            <summary>
            修課總成績
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Effort">
            <summary>
            修課努力程度
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Text">
            <summary>
            修課文字描述
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.OrdinarilyEffort">
            <summary>
            平時評量努力程度
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.OrdinarilyScore">
            <summary>
            平時評量分數
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.RequiredBy">
            <summary>
            取得校部定
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Required">
            <summary>
            取得必選修
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.OverrideRequired">
            <summary>
            取得，指出是否覆蓋課程的必選修資訊
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.OverrideRequiredBy">
            <summary>
            取得，指出是否覆蓋課程的校部訂資訊
            </summary>
        </member>
        <member name="P:K12.Data.SCAttendRecord.Extensions">
            <summary>
            延伸欄位資訊
            </summary>
        </member>
        <member name="T:K12.Data.SCAttend">
            <summary>
            學生修課類別，提供方法用來取得、新增、修改及刪除學生修課資訊
            </summary>
        </member>
        <member name="M:K12.Data.SCAttend.SelectAll">
            <summary>
            取得所有學生修課列表。
            </summary>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SCAttendRecord&gt; scattendrecords = SCAttend.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectAll``1">
            <summary>
            取得所有學生修課列表。
            </summary>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.Select(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            根據條件取得學生修課列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="CourseIDs">多筆課程編號</param>
            <param name="SCAttendIDs">多筆學生修課列表</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
        </member>
        <member name="M:K12.Data.SCAttend.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            根據條件取得學生修課列表。
            </summary>
            <typeparam name="T">學生修課類別</typeparam>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="CourseIDs">多筆課程編號</param>
            <param name="SCAttendIDs">多筆學生修課列表</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <returns>List&lt;T&gt;，代表多筆學生修課記錄物件。</returns>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByID(System.String)">
            <summary>
            根據單筆學生修課編號取得學生修課列表。
            </summary>
            <param name="SCAttendID">單筆學生修課編號</param>
            <returns>SCAttendRecord，代表單筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                SCAttendRecord record = SCAttend.SelectByID(SCAttendID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByID``1(System.String)">
            <summary>
            根據單筆學生修課編號取得學生修課列表。
            </summary>
            <typeparam name="T">學生修課記錄物件型別，K12共用為K12.Data.SCAttendRecord</typeparam>
            <param name="SCAttendID">單筆學生修課編號</param>
            <returns>SCAttendRecord，代表單筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                SCAttendRecord record = SCAttend.SelectByID&lt;K12.Data.SCAttendRecord&gt;(SCAttendID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生修課編號取得學生修課列表。
            </summary>
            <param name="SCAttendIDs">多筆學生修課編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectByIDs(SCAttendIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生修課編號取得學生修課列表。
            </summary>
            <typeparam name="T">學生修課記錄物件型別，K12共用為K12.Data.SCAttendRecord</typeparam>
            <param name="SCAttendIDs">多筆學生修課編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectByIDs&lt;K12.Data.SCAttendRecord&gt;(SCAttendIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByStudentIDAndCourseID(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號及多筆課程編號取得學生修課列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; scattendrecords = SCAttend.GetByStudentIDsAndCourseIDs(StudentIDs,CourseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByStudentIDAndCourseID``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號及多筆課程編號取得學生修課列表。
            </summary>
            <typeparam name="T">學生修課記錄物件型別，K12共用為K12.Data.SCAttendRecord</typeparam>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; scattendrecords = SCAttend.GetByStudentIDsAndCourseIDs&lt;K12.Data.SCAttendRecord&gt;(StudentIDs,CourseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生編號取得學生修課列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectByStudentIDsAndCourseID(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生編號取得學生修課列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectByStudentIDsAndCourseID(StudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生修課列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectByStudentIDs(StudentIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生修課列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;SCAttendRecord&gt;，代表多筆學生修課記錄物件。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;SCAttendRecord&gt; records = SCAttend.SelectByStudentIDs(StudentIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByCourseIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據課程系統編號列表取得學生修課
            </summary>
            <param name="CourseIDs"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.SCAttend.SelectByCourseIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程系統編號取得課程
            </summary>
            <typeparam name="T"></typeparam>
            <param name="CourseIDs"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.SCAttend.Insert(K12.Data.SCAttendRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.SCAttend.Insert(System.Collections.Generic.IEnumerable{K12.Data.SCAttendRecord})" -->
        <member name="M:K12.Data.SCAttend.Update(K12.Data.SCAttendRecord)">
            <summary>
            更新單筆學生修課記錄
            </summary>
            <param name="SCAttendRecord">學生修課記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.Update(System.Collections.Generic.IEnumerable{K12.Data.SCAttendRecord})">
            <summary>
            更新多筆學生修課記錄
            </summary>
            <param name="SCAttendRecords">多筆學生修課記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.Delete(K12.Data.SCAttendRecord)">
            <summary>
            刪除單筆學生修課記錄
            </summary>
            <param name="SCAttendRecord">學生修課記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.Delete(System.String)">
            <summary>
            刪除單筆學生修課記錄
            </summary>
            <param name="SCAttendID">學生修課編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.Delete(System.Collections.Generic.IEnumerable{K12.Data.SCAttendRecord})">
            <summary>
            刪除多筆學生修課記錄
            </summary>
            <param name="SCAttendRecords">多筆學生修課記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.SCAttendRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.SCAttend.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生修課記錄
            </summary>
            <param name="SCAttendIDs">多筆學生修課編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="E:K12.Data.SCAttend.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.SCAttend.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.SCAttend.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.MoralScore">
            <summary>
            學期德行評量類別，提供方法用來取得、新增、修改及刪除學期德行評量資訊
            </summary>
        </member>
        <member name="M:K12.Data.MoralScore.SelectAll">
            <summary>
            取得所有學期德行評量列表。
            </summary>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MoralScoreRecord&gt; records = MoralScore.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.SelectAll``1">
            <summary>
            取得所有學期德行評量列表。
            </summary>
            <typeparam name="T">學期德行評量記錄物件型別，K12共用為K12.Data.MoralScoreRecord</typeparam>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MoralScoreRecord&gt; records = MoralScore.SelectAll&lt;K12.Data.MoralScoreRecord&gt;();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.Select(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            取得德行評量列表
            </summary>
            <param name="IDs">德行評量記錄物件編號列表。</param>
            <param name="StudentIDs">學生編號列表。</param>
            <param name="SchoolYear">學年度。</param>
            <param name="Semester">學期。</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
        </member>
        <member name="M:K12.Data.MoralScore.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            取得德行評量列表 
            </summary>
            <typeparam name="T">德行評量記錄型別，繼承至K12.Data.MoralScoreRecord</typeparam>
            <param name="IDs">德行評量記錄物件編號列表。</param>
            <param name="StudentIDs">學生編號列表。</param>
            <param name="SchoolYear">學年度。</param>
            <param name="Semester">學期。</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
        </member>
        <member name="M:K12.Data.MoralScore.Select(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            取得德行評量列表 
            </summary>
            <typeparam name="T">德行評量記錄型別，繼承至K12.Data.MoralScoreRecord</typeparam>
            <param name="IDs">德行評量記錄物件編號列表。</param>
            <param name="StudentIDs">學生編號列表。</param>
            <param name="SchoolYear">學年度。</param>
            <param name="Semester">學期。</param>
            <param name="SchoolYearSemesters">學年度學期列表。</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
        </member>
        <member name="M:K12.Data.MoralScore.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            取得德行評量列表 
            </summary>
            <typeparam name="T">德行評量記錄型別，繼承至K12.Data.MoralScoreRecord</typeparam>
            <param name="IDs">德行評量記錄物件編號列表。</param>
            <param name="StudentIDs">學生編號列表。</param>
            <param name="SchoolYear">學年度。</param>
            <param name="Semester">學期。</param>
            <param name="SchoolYearSemesters">學年度學期列表。</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
        </member>
        <member name="M:K12.Data.MoralScore.SelectBySchoolYearAndSemester(System.String,System.Int32,System.Int32)">
            <summary>
            根據學生編號、學年度及學期取得學期德行評量列表。
            </summary>
            <param name="StudentID">學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MoralScoreRecord&gt; records = MoralScore.SelectBySchoolYearAndSemester(StudentID,SchoolYear,Semester);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.SelectBySchoolYearAndSemester``1(System.String,System.Int32,System.Int32)">
            <summary>
            根據學生編號、學年度及學期取得學期德行評量列表。
            </summary>
            <typeparam name="T">學期德行評量記錄物件型別，K12共用為K12.Data.MoralScoreRecord</typeparam>
            <param name="StudentID">學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MoralScoreRecord&gt; records = MoralScore.SelectBySchoolYearAndSemester&lt;K12.Data.MoralScoreRecord&gt;(StudentID,SchoolYear,Semester);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學期德行評量列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MoralScoreRecord&gt; records = MoralScore.SelectByStudentIDs(StudentIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學期德行評量列表。
            </summary>
            <typeparam name="T">學期德行評量記錄物件型別，K12共用為K12.Data.MoralScoreRecord</typeparam>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;MoralScoreRecord&gt;，代表多筆學期德行評量記錄物件。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;MoralScoreRecord&gt; records = MoralScore.SelectByStudentIDs&lt;K12.Data.MoralScoreRecord&gt;(StudentIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.Insert(K12.Data.MoralScoreRecord)">
            <summary>
            新增單筆學期德行評量記錄
            </summary>
            <param name="MoralScoreRecord">學期德行評量記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.MoralScore.Insert(System.Collections.Generic.IEnumerable{K12.Data.MoralScoreRecord})" -->
        <member name="M:K12.Data.MoralScore.Update(K12.Data.MoralScoreRecord)">
            <summary>
            更新單筆學期德行評量記錄
            </summary>
            <param name="MoralScoreRecord">學期德行評量記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.MoralScore.Update(System.Collections.Generic.IEnumerable{K12.Data.MoralScoreRecord})">
            <summary>
            更新多筆學期德行評量記錄
            </summary>
            <param name="MoralScoreRecords">多筆學期德行評量記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.MoralScore.Delete(K12.Data.MoralScoreRecord)">
            <summary>
            刪除單筆學期德行評量記錄
            </summary>
            <param name="MoralScoreRecord">學期德行評量記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.MoralScore.Delete(System.String)">
            <summary>
            刪除單筆學期德行評量記錄
            </summary>
            <param name="MoralScoreID">學期德行評量記錄編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:K12.Data.MoralScore.Delete(System.Collections.Generic.IEnumerable{K12.Data.MoralScoreRecord})">
            <summary>
            刪除多筆學期德行評量記錄
            </summary>
            <param name="MoralScoreRecords">多筆學期德行評量記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.MoralScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.MoralScore.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學期德行評量記錄
            </summary>
            <param name="MoralScoreIDs">多筆學期德行評量記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="E:K12.Data.MoralScore.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.MoralScore.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.MoralScore.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.DataChangedEventArgs">
            <summary>
            提供Insert、Update、Delete事件的資料
            </summary>
        </member>
        <member name="T:K12.Data.Course">
            <summary>
            課程類別，提供方法用來取得、新增、修改及刪除課程資訊
            </summary>
        </member>
        <member name="M:K12.Data.Course.#cctor">
            <summary>
            Static建構式
            </summary>
        </member>
        <member name="M:K12.Data.Course.SelectAll">
            <summary>
            取得所有課程列表。
            </summary>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;CourseRecord&gt; records = Course.SelectAll();
                
                foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks>
            請先using K12.Data;
            </remarks>
        </member>
        <member name="M:K12.Data.Course.SelectAll``1">
            <summary>
            取得所有課程列表。
            </summary>
            <typeparam name="T">課程記錄物件型別，K12共用為K12.Data.CourseRecord</typeparam>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;CourseRecord&gt; courserecs = Course.SelectAll&lt;K12.Data.CourseRecord&gt;();
            </example>
        </member>
        <member name="M:K12.Data.Course.SelectByClass(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.ClassRecord})">
            <summary>
            根據學年度、學期及班級記錄物件列表取得課程列表。
            </summary>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <param name="ClassRecs">多筆班級記錄物件</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <seealso cref="T:K12.Data.ClassRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
              <code>
                List&lt;CourseRecord&gt; records = Course.SelectByClass(SchoolYear,Semester,ClassRecs);
                
                foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
               </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.Course.SelectByClass(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據學年度、學期及班級記錄編號列表取得課程列表。
            </summary>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <param name="ClassIDs">多筆班級記錄編號</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
              <code>
                List&lt;CourseRecord&gt; records = Course.SelectByClass(SchoolYear,Semester,ClassIDs);
                
                foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
               </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.Course.SelectByClass(System.Nullable{System.Int32},System.Nullable{System.Int32},K12.Data.ClassRecord)">
            <summary>
            根據學年度、學期及班級記錄物件取得課程列表。
            </summary>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <param name="ClassRec">班級記錄物件</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
              <code>
                List&lt;CourseRecord&gt; records = Course.SelectByClass(SchoolYear,Semester,ClassRec);
                
                foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
               </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.Course.SelectByClass(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            根據學年度、學期及班級記錄編號取得課程列表。
            </summary>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <param name="ClassID">班級記錄編號</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
              <code>
                List&lt;CourseRecord&gt; records = Course.SelectByClass(SchoolYear,Semester,ClassID);
                
                foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
               </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.Course.SelectByClass``1(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             根據學年度、學期及取得課程列表。
             </summary>
             <typeparam name="T">課程記錄物件型別，K12共用為K12.Data.CourseRecord</typeparam>
             <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
             <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
             <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
             <seealso cref="T:K12.Data.CourseRecord"/>
             <exception cref="T:System.Exception">
             </exception>
             <example>
                 <code>
                   List&lt;CourseRecord&gt; records = Course.SelectBySchoolYearAndSemester&lt;K12.Data.CourseRecord&gt;(SchoolYear,Semester);
            
                   foreach(CourseRecord record in records)
                     System.Console.Writeln(record.Name); 
                 </code>
             </example>
        </member>
        <member name="M:K12.Data.Course.SelectBySchoolYearAndSemester(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據學年度及學期取得課程列表。
            </summary>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
              <code>
                List&lt;CourseRecord&gt; records = Course.SelectBySchoolYearAndSemester(SchoolYear,Semester);
                
                foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
               </code>
            </example>
            <remarks></remarks>
        </member>
        <member name="M:K12.Data.Course.SelectBySchoolYearAndSemester``1(System.Nullable{System.Int32},System.Nullable{System.Int32})">
             <summary>
             根據學年度及學期取得課程列表。
             </summary>
             <typeparam name="T">課程記錄物件型別，K12共用為K12.Data.CourseRecord</typeparam>
             <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
             <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
             <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
             <seealso cref="T:K12.Data.CourseRecord"/>
             <exception cref="T:System.Exception">
             </exception>
             <example>
                 <code>
                   List&lt;CourseRecord&gt; records = Course.SelectBySchoolYearAndSemester&lt;K12.Data.CourseRecord&gt;(SchoolYear,Semester);
            
                   foreach(CourseRecord record in records)
                     System.Console.Writeln(record.Name); 
                 </code>
             </example>
        </member>
        <member name="M:K12.Data.Course.SelectBySchoolYearAndSemester(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            根據學年度、學期及課程名稱取得課程列表。
            </summary>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度資料。</param>
            <param name="Semester">學期，傳入null代表取得所有學期資料。</param>
            <param name="CourseName">課程名稱</param> 
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;CourseRecord&gt; records = Course.SelectBySchoolYearAndSemester(SchoolYear,Semester,CourseName);
                
                  foreach(CourseRecord record in records)
                    System.Console.Writeln(record.Name); 
                </code>
            </example>
            <remarks></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.Course.SelectBySchoolYearAndSemester``1(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)" -->
        <member name="M:K12.Data.Course.SelectByID(System.String)">
            <summary>
            根據單筆課程編號取得課程物件。
            </summary>
            <param name="CourseID">課程編號</param>
            <returns>CourseRecord，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                CourseRecord record = Course.SelectByID(CourseID);
                
               if (record != null)
                   System.Console.WriteLine(record.Name);
                </code>
            </example>
            <remarks>若是CourseID不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Course.SelectByID``1(System.String)">
            <summary>
            根據單筆課程編號取得課程物件。
            </summary>
            <typeparam name="T">課程記錄物件型別，K12共用為K12.Data.CourseRecord</typeparam>
            <param name="CourseID">課程編號</param>
            <returns>CourseRecord，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                CourseRecord CourseRec = Course.SelectByID&lt;K12.Data.CourseRecord&gt;(CourseID);
            </example>
        </member>
        <member name="M:K12.Data.Course.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號取得課程物件列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;CourseRecord&gt; records = Course.SelectByIDs(CourseIDs);
                
                foreach(CourseRecord record in records)
                    Console.WrlteLine(record.Name);
                </code>
            </example>
            <remarks>可能情況若是傳5筆ID，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Course.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號取得課程物件列表。
            </summary>
            <typeparam name="T">課程記錄物件型別，K12共用為K12.Data.CourseRecord</typeparam>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;CourseRecord&gt; CourseRec = Course.SelectByIDs&lt;K12.Data.CourseRecord&gt;(courseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Course.GetCacheData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號取得課程物件列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;CourseRecord&gt; CourseRec = Course.SelectByIDs(courseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Course.GetDirectData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號取得課程物件列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <returns>List&lt;CourseRecord&gt;，代表課程物件。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;CourseRecord&gt; CourseRec = Course.SelectByIDs(courseIDs);
            </example>
        </member>
        <member name="M:K12.Data.Course.Insert(K12.Data.CourseRecord)">
            <summary>
            新增單筆課程記錄
            </summary>
            <param name="CourseRecord">課程記錄物件</param> 
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    CourseRecord record = new CourseRecord();
                    record.Name = (new System.Random()).NextDouble().ToString();
                    strng NewID = Course.Insert(record);
                    CourseRecord actual = Course.SelectByID(NewID);
                    System.Console.Writeln(actual.Name);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為課程名稱（Name）。
            </remarks>
        </member>
        <member name="M:K12.Data.Course.Insert(System.Collections.Generic.IEnumerable{K12.Data.CourseRecord})">
            <summary>
            新增多筆課程記錄
            </summary>
            <param name="CourseRecords">課程記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    CourseRecord record = new CourseRecord();
                    record.Name = (new System.Random()).NextDouble().ToString();
                    List&lt;CourseRecord&gt; records = new List&lt;CourseRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = Course.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Course.Update(K12.Data.CourseRecord)">
            <summary>
            更新單筆課程記錄
            </summary>
            <param name="CourseRecord">課程記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                CourseRecord record = Course.SelectByID(CourseID);
                record.Name = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Course.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Course.Update(System.Collections.Generic.IEnumerable{K12.Data.CourseRecord})">
            <summary>
            更新多筆課程記錄
            </summary>
            <param name="CourseRecords">課程記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                CourseRecord record = Course.SelectByID(CourseID);
                record.Name = (new System.Random()).NextDouble().ToString();
                List&lt;CourseRecord&gt; records = new List&lt;CourseRecord&gt;();
                records.Add(record);
                int UpdateCount = Course.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Course.Delete(System.Collections.Generic.IEnumerable{K12.Data.CourseRecord})">
            <summary>
            刪除多筆課程記錄
            </summary>
            <param name="CourseRecords">多筆課程記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;CourseRecord&gt; records = Course.SelectByIDs(CourseIDs);
                  int DeleteCount = Course.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Course.Delete(K12.Data.CourseRecord)">
            <summary>
            刪除單筆課程記錄
            </summary>
            <param name="CourseRecord">課程記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.CourseRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  CourseRecord record = Course.SelectByID(CourseID);
                  int DeleteCount = Course.Delete(record);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Course.Delete(System.String)">
            <summary>
            刪除單筆課程記錄
            </summary>
            <param name="CourseID">課程記錄系統編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Course.Delete(CourseID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Course.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆課程記錄
            </summary>
            <param name="CourseIDs">多筆課程記錄系統編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Course.Delete(CourseIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Course.RemoveAll">
            <summary>
            移除快取當中所有的資料
            </summary>
        </member>
        <member name="M:K12.Data.Course.RemoveByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程編號移除快取資料。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="E:K12.Data.Course.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Course.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Course.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Course.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.Demerit">
            <summary>
            學生懲戒類別，提供方法用來取得、新增、修改及刪除學生懲戒資訊
            </summary>
        </member>
        <member name="M:K12.Data.Demerit.SelectAll">
            <summary>
            取得所有學生懲戒記錄物件列表。
            </summary>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectAll();
                
                foreach(DemeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectAll``1">
            <summary>
            取得所有學生懲戒記錄物件列表。
            </summary>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Demerit.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根據條件取得懲戒紀錄列表
            </summary>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">開始時間</param>
            <param name="EndDate">結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度</param>
            <param name="Semesters">學期</param>
            <returns>List&lt;DemeritRecord&gt;，懲戒紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Demerit.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根據條件取得懲戒紀錄列表
            </summary>
            <typeparam name="T">懲戒紀錄型別，繼承至K12.Data.DemeritRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">發生開始時間</param>
            <param name="EndDate">發生結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <returns>List&lt;DemeritRecord&gt;，懲戒紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Demerit.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得懲戒紀錄列表
            </summary>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">發生開始時間</param>
            <param name="EndDate">發生結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;DemeritRecord&gt;，懲戒紀錄物件列表</returns>
        </member>
        <member name="M:K12.Data.Demerit.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得懲戒紀錄列表
            </summary>
            <typeparam name="T">懲戒紀錄型別，繼承至K12.Data.DemeritRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">發生開始時間</param>
            <param name="EndDate">發生結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;DemeritRecord&gt;，懲戒紀錄列表</returns>        
        </member>
        <member name="M:K12.Data.Demerit.Select(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得懲戒紀錄列表
            </summary>
            <typeparam name="T">懲戒紀錄型別，繼承至K12.Data.DemeritRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">發生開始時間</param>
            <param name="EndDate">發生結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="StartClearDate">開始已銷過時間</param>
            <param name="EndClearDate">結束已銷過時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;DemeritRecord&gt;，懲戒紀錄列表</returns>
        </member>
        <member name="M:K12.Data.Demerit.Select``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{K12.Data.SchoolYearSemester})">
            <summary>
            根據條件取得懲戒紀錄列表
            </summary>
            <typeparam name="T">懲戒紀錄型別，繼承至K12.Data.DemeritRecord</typeparam>
            <param name="StudentIDs">學生編號列表</param>
            <param name="StartDate">發生開始時間</param>
            <param name="EndDate">發生結束時間</param>
            <param name="StartRegisterDate">開始登錄時間</param>
            <param name="EndRegisterDate">結束登錄時間</param>
            <param name="StartClearDate">開始已銷過時間</param>
            <param name="EndClearDate">結束已銷過時間</param>
            <param name="SchoolYears">學年度列表</param>
            <param name="Semesters">學期列表</param>
            <param name="SchoolYearSemesters">學年度學期列表</param>
            <returns>List&lt;DemeritRecord&gt;，懲戒紀錄列表</returns>
        </member>
        <member name="M:K12.Data.Demerit.SelectBySchoolYearAndSemester(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據單筆學生編號、學年度及學期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度的資料</param>
            <param name="Semester">學期，傳入null代表取得所有學年度的資料</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectBySchoolYearAndSemester(StudentID,School,Semester);
                
                foreach(DemeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectBySchoolYearAndSemester``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據單筆學生編號、學年度及學期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentID">單筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度的資料</param>
            <param name="Semester">學期，傳入null代表取得所有學年度的資料</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectBySchoolYearAndSemester(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據多筆學生編號、學年度及學期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度的資料</param>
            <param name="Semester">學期，傳入null代表取得所有學年度的資料</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectBySchoolYearAndSemester(StudentIDs,School,Semester);
                
                foreach(DemeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectBySchoolYearAndSemester``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根據多筆學生編號、學年度及學期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="SchoolYear">學年度，傳入null代表取得所有學年度的資料</param>
            <param name="Semester">學期，傳入null代表取得所有學年度的資料</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectByStudentIDs(StudentIDs);
                
                foreach(DemeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectByRegisterDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectByRegisterDate(StudentIDs,StartRegisterDate,EndRegisterDate);
                
                foreach(DemeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.若是StartRegisterDate傳入null，則會傳回EndRegisterDate之前的資料。
            2.若是EndRegisterDate傳入null，則會傳回StartRegisterDate之後的資料。
            </remarks>
        </member>
        <member name="M:K12.Data.Demerit.SelectByRegisterDate``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Demerit.SelectByOccurDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及發生日期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartOccurDate">發生開始日期</param> 
            <param name="EndOccurDate">發生結束日期</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DemeritRecord&gt; records = Demerit.SelectByOccurDate(StudentIDs,StartOccurDate,EndOccurDate);
                
                foreach(DemeritRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.若是StartOccurDate傳入null，則會傳回EndOccurDate之前的資料。
            2.若是EndOccurDate傳入null，則會傳回StartOccurDate之後的資料。
            </remarks>
        </member>
        <member name="M:K12.Data.Demerit.SelectByOccurDate``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及發生日期取得學生懲戒記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartOccurDate">發生開始日期</param> 
            <param name="EndOccurDate">發生結束日期</param>
            <returns>List&lt;DemeritRecord&gt;，代表多筆學生懲戒記錄物件。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Demerit.Insert(K12.Data.DemeritRecord)">
            <summary>
            新增單筆學生懲戒記錄
            </summary>
            <param name="DemeritRecord">學生懲戒記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    DemeritRecord newrecord = new DemeritRecord();
                    newrecord.RefStudentID = RefStudentID;
                    newrecord.SchoolYear = SchoolYear;
                    newrecord.Semester = Semester;
                    newrecord.OccurDate = DateTime.Today;
                    strng NewID = Demerit.Insert(newrecord)
                    DemeritRecord record = Demerit.SelectByID(NewID);
                    System.Console.Writeln(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為學生記錄編號（RefStudentID）、學年度（SchoolYear）、學期（Semester）、缺曠日期（OccurDate）。
            </remarks>       
        </member>
        <member name="M:K12.Data.Demerit.Insert(System.Collections.Generic.IEnumerable{K12.Data.DemeritRecord})">
            <summary>
            新增多筆學生懲戒記錄
            </summary>
            <param name="DemeritRecords">多筆學生懲戒記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    DemeritRecord record = new DemeritRecord();
                    newrecord.RefStudentID = RefStudentID;
                    newrecord.SchoolYear = SchoolYear;
                    newrecord.Semester = Semester;
                    newrecord.OccurDate = DateTime.Today;
                    
                    List&lt;DemeritRecord&gt; records = new List&lt;DemeritRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = Demerit.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Demerit.Update(K12.Data.DemeritRecord)">
            <summary>
            更新單筆學生懲戒記錄
            </summary>
            <param name="DemeritRecord">學生懲戒記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                DemeritRecord record = Demerit.SelectByStudentIDs(StudentIDs)[0];
                record.OccurDate = DateTime.Today;
                int UpdateCount = Demerit.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Demerit.Update(System.Collections.Generic.IEnumerable{K12.Data.DemeritRecord})">
            <summary>
            更新多筆學生懲戒記錄
            </summary>
            <param name="DemeritRecords">多筆學生懲戒記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                DemeritRecord record = Demerit.SelectByStudentIDs(StudentIDs)[0];
                record.OccurDate = DateTime.Today;
                List&lt;DemeritRecord&gt; records = new List&lt;DemeritRecord&gt;();
                records.Add(record);
                int UpdateCount = Demerit.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Demerit.Delete(K12.Data.DemeritRecord)">
            <summary>
            刪除單筆學生懲戒記錄
            </summary>
            <param name="DemeritRecord">學生懲戒記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;DemeritRecord&gt; records = Demerit.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Demerit.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Demerit.Delete(System.String)">
            <summary>
            刪除單筆學生懲戒記錄
            </summary>
            <param name="DemeritID">學生懲戒記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Demerit.Delete(DemeritID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Demerit.Delete(System.Collections.Generic.IEnumerable{K12.Data.DemeritRecord})">
            <summary>
            刪除多筆學生懲戒記錄
            </summary>
            <param name="DemeritRecords">多筆學生懲戒記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.DemeritRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;DemeritRecord&gt; records = Demerit.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Demerit.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Demerit.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生懲戒記錄
            </summary>
            <param name="DemeritIDs">多筆學生懲戒記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Demerit.Delete(DemeritIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Demerit.GetDetailContent(K12.Data.DemeritRecord)">
            <summary>
            組合出 Detail 節點的內容。新增和修改的 Request Doc 都會用到。
            </summary>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="E:K12.Data.Demerit.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Demerit.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Demerit.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Demerit.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="T:K12.Data.GradScoreRecord">
            <summary>
            學生畢業成績資訊
            </summary>
        </member>
        <member name="M:K12.Data.GradScoreRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.GradScoreRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.GradScoreRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="P:K12.Data.GradScoreRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.GradScoreRecord.Domains">
            <summary>
            畢業領域成績
            </summary>
        </member>
        <member name="P:K12.Data.GradScoreRecord.LearnDomainScore">
            <summary>
            畢業學習領域成績
            </summary>
        </member>
        <member name="P:K12.Data.GradScoreRecord.CourseLearnScore">
            <summary>
            畢業課程學習成績
            </summary>
        </member>
        <member name="P:K12.Data.GradScoreRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="T:K12.Data.GradDomainScore">
            <summary>
            畢業領域成績
            </summary>
        </member>
        <member name="M:K12.Data.GradDomainScore.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.GradDomainScore.#ctor(System.String)">
            <summary>
            建構式，傳入預設領域名稱
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:K12.Data.GradDomainScore.Clone">
            <summary>
            複製畢業成績物件
            </summary>
            <returns></returns>
        </member>
        <member name="P:K12.Data.GradDomainScore.Domain">
            <summary>
            領域名稱
            </summary>
        </member>
        <member name="P:K12.Data.GradDomainScore.Score">
            <summary>
            成績
            </summary>
        </member>
        <member name="T:K12.Data.SchoolYearSemester">
            <summary>
            代表學年度、學期
            </summary>
        </member>
        <member name="M:K12.Data.SchoolYearSemester.#ctor(System.Int32,System.Int32)">
            <summary>
            建構式
            </summary>
            <param name="schoolYear">學年度</param>
            <param name="semester">學期</param>
        </member>
        <member name="P:K12.Data.SchoolYearSemester.SchoolYear">
            <summary>
            學年度
            </summary>
        </member>
        <member name="P:K12.Data.SchoolYearSemester.Semester">
            <summary>
            學期
            </summary>
        </member>
        <member name="T:K12.Data.MeritDemeritReduceRecord">
            <summary>
            功過換算表
            </summary>
        </member>
        <member name="M:K12.Data.MeritDemeritReduceRecord.Load(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.MeritDemeritReduceRecord.MeritAToMeritB">
            <summary>
            大功換算小功
            </summary>
        </member>
        <member name="P:K12.Data.MeritDemeritReduceRecord.MeritBToMeritC">
            <summary>
            小功換算獎勵
            </summary>
        </member>
        <member name="P:K12.Data.MeritDemeritReduceRecord.DemeritAToDemeritB">
            <summary>
            大過換算小過
            </summary>
        </member>
        <member name="P:K12.Data.MeritDemeritReduceRecord.DemeritBToDemeritC">
            <summary>
            小過換算警告
            </summary>
        </member>
        <member name="T:K12.Data.PaddingMethod">
            <summary>
            當沒有該欄位時的處理方式。
            </summary>
        </member>
        <member name="F:K12.Data.PaddingMethod.First">
            <summary>
            給該欄位的第一個值，例如「秒」就是 0。
            </summary>
        </member>
        <member name="F:K12.Data.PaddingMethod.Last">
            <summary>
            給該欄位的最後一個值，例如「秒」就是 59。
            </summary>
        </member>
        <member name="F:K12.Data.PaddingMethod.Now">
            <summary>
            給該欄位「現在」值(自已思考是什麼意思)。
            </summary>
        </member>
        <member name="F:K12.Data.PaddingMethod.None">
            <summary>
            不給該欄位值。
            </summary>
        </member>
        <member name="T:K12.Data.TCInstruct">
            <summary>
            教師教授課程類別，提供方法用來取得、新增、修改及刪除教師教授課程資訊
            </summary>
        </member>
        <member name="M:K12.Data.TCInstruct.SelectAll">
            <summary>
            取得所有教師教授課程列表。
            </summary>
            <returns>List&lt;TCInstructRecord&gt;，代表多筆教師教授課程記錄物件。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;TCInstructRecord&gt; tcinstructrecords = TCInstruct.SelectAll();
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.SelectAll``1">
            <summary>
            取得所有教師教授課程列表。
            </summary>
            <returns>List&lt;TCInstructRecord&gt;，代表多筆教師教授課程記錄物件。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TCInstructRecord&gt; tcinstructrecords = TCInstruct.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師教授課程編號取得教師教授課程列表。
            </summary>
            <param name="TCInstructIDs">多筆教師教授課程編號</param>
            <returns>List&lt;TCInstructRecord&gt;，代表多筆教師教授課程記錄物件。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TCInstructRecord&gt; tcinstructrecords = TCInstruct.SelectByIDs(TCInstructIDs);
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師教授課程編號取得教師教授課程列表。
            </summary>
            <param name="TCInstructIDs">多筆教師教授課程編號</param>
            <returns>List&lt;TCInstructRecord&gt;，代表多筆教師教授課程記錄物件。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TCInstructRecord&gt; tcinstructrecords = TCInstruct.SelectByIDs(TCInstructIDs);
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.SelectByTeacherIDAndCourseID(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師教授課程編號及課程編號取得教師教授課程列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TCInstructRecord&gt;，代表多筆教師教授課程記錄物件。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;TCInstructRecord&gt; records = TCInstruct.SelectByTeacherIDAndCourseID(TeacherIDs,CourseIDs);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.SelectByTeacherIDAndCourseIDs``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆教師教授課程編號及課程編號取得教師教授課程列表。
            </summary>
            <param name="CourseIDs">多筆課程編號</param>
            <param name="TeacherIDs">多筆教師編號</param>
            <returns>List&lt;TCInstructRecord&gt;，代表多筆教師教授課程記錄物件。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;TCInstructRecord&gt; tcinstructrecords = TCInstruct.SelectByIDs(TCInstructIDs);
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.TCInstruct.Insert(K12.Data.TCInstructRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.TCInstruct.Insert(System.Collections.Generic.IEnumerable{K12.Data.TCInstructRecord})" -->
        <member name="M:K12.Data.TCInstruct.Update(K12.Data.TCInstructRecord)">
            <summary>
            更新單筆教師教授課程記錄
            </summary>
            <param name="TCInstructRecord">教師教授課程記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.Update(System.Collections.Generic.IEnumerable{K12.Data.TCInstructRecord})">
            <summary>
            更新多筆教師教授課程記錄
            </summary>
            <param name="TCInstructRecords">多筆教師教授課程記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.Delete(K12.Data.TCInstructRecord)">
            <summary>
            刪除單筆教師教授課程記錄
            </summary>
            <param name="TCInstructRecord">教師教授課程記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.Delete(System.String)">
            <summary>
            刪除單筆教師教授課程記錄
            </summary>
            <param name="TCInstructID">教師教授課程編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.Delete(System.Collections.Generic.IEnumerable{K12.Data.TCInstructRecord})">
            <summary>
            刪除多筆教師教授課程記錄
            </summary>
            <param name="TCInstructRecords">多筆教師教授課程記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.TCInstructRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.TCInstruct.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆教師教授課程記錄
            </summary>
            <param name="TCInstructIDs">多筆教師教授課程編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.ProgramPlan">
            <summary>
            課程規劃類別，提供方法用來取得、新增、修改及刪除課程規劃資訊
            </summary>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectAllDetail">
            <summary>
            取得所有課程規劃明細列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectAll">
            <summary>
            取得所有課程規劃列表。
            </summary>
            <returns>List&lt;ProgramPlanRecord&gt;，代表多筆課程規劃記錄物件。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ProgramPlanRecord&gt; records = ProgramPlan.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectAll``1">
            <summary>
            取得所有課程規劃列表。
            </summary>
            <returns>List&lt;ProgramPlanRecord&gt;，代表多筆課程規劃記錄物件。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ProgramPlanRecord&gt; records = ProgramPlan.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程規劃編號取得課程規劃列表。
            </summary>
            <param name="ProgramPlanIDs">多筆課程規劃編號</param>
            <returns>List&lt;ProgramPlanRecord&gt;，代表多筆課程規劃記錄物件。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ProgramPlanRecord&gt; records = ProgramPlan.SelectByIDs(ProgramPlanIDs);
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectByID(System.String)">
            <summary>
            根據單筆課程規劃編號取得課程規劃物件。
            </summary>
            <param name="ProgramPalnID">課程規劃篇號</param>
            <returns>ProgramPlanRecord</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectByID``1(System.String)">
            <summary>
            根據單筆課程規劃編號取得課程規劃物件。
            </summary>
            <typeparam name="T">課程規劃物件型別</typeparam>
            <param name="ProgramPalnID"></param>
            <returns>T</returns>
        </member>
        <member name="M:K12.Data.ProgramPlan.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆課程規劃編號取得課程規劃列表。
            </summary>
            <param name="ProgramPlanIDs">多筆課程規劃編號</param>
            <returns>List&lt;ProgramPlanRecord&gt;，代表多筆課程規劃記錄物件。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ProgramPlanRecord&gt; records = ProgramPlan.SelectByIDs(ProgramPlanIDs);
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.ProgramPlan.Insert(K12.Data.ProgramPlanRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.ProgramPlan.Insert(System.Collections.Generic.IEnumerable{K12.Data.ProgramPlanRecord})" -->
        <member name="M:K12.Data.ProgramPlan.Update(K12.Data.ProgramPlanRecord)">
            <summary>
            更新單筆課程規劃記錄
            </summary>
            <param name="ProgramPlanRecord">課程規劃記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.Update(System.Collections.Generic.IEnumerable{K12.Data.ProgramPlanRecord})">
            <summary>
            更新多筆課程規劃記錄
            </summary>
            <param name="ProgramPlanRecords">多筆課程規劃記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.Delete(K12.Data.ProgramPlanRecord)">
            <summary>
            刪除單筆課程規劃記錄
            </summary>
            <param name="ProgramPlanRecord">課程規劃記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.Delete(System.String)">
            <summary>
            刪除單筆課程規劃記錄
            </summary>
            <param name="ProgramPlanID">課程規劃編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.Delete(System.Collections.Generic.IEnumerable{K12.Data.ProgramPlanRecord})">
            <summary>
            刪除多筆課程規劃記錄
            </summary>
            <param name="ProgramPlanRecords">多筆課程規劃記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ProgramPlanRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.ProgramPlan.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆課程規劃記錄
            </summary>
            <param name="ProgramPlanIDs">多筆課程規劃編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="E:K12.Data.ProgramPlan.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.ProgramPlan.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.ProgramPlan.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.ProgramPlan.AfterChange">
            <summary>
            改變之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.EmergencyContactRecord">
            <summary>
            緊急連絡人記錄物件
            </summary>
        </member>
        <member name="M:K12.Data.EmergencyContactRecord.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.EmergencyContactRecord.#ctor(System.Data.DataRow)">
            <summary>
            DataRow參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.EmergencyContactRecord.Load(System.Data.DataRow)">
            <summary>
            從DataRow載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.Student">
            <summary>
            所屬學生記錄物件
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.Name">
            <summary>
            緊急連絡人姓名
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.Relationship">
            <summary>
            緊急連絡人關係
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.Nationality">
            <summary>
            緊急連絡人國籍
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.EducationDegree">
            <summary>
            緊急連絡人最高學歷
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.CompanyName">
            <summary>
            公司名稱
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.CompanyTitle">
            <summary>
            公司職稱
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.CompanyCategory">
            <summary>
            公司分類
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.Hospital">
            <summary>
            緊急指定就醫醫院
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.CellPhone">
            <summary>
            手機
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.HomePhone">
            <summary>
            家中電話
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.CompanyPhone">
            <summary>
            辦公室膧話
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressZipCode">
            <summary>
            地址郵遞區號
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressCounty">
            <summary>
            地址縣市
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressTown">
            <summary>
            地址鄉鎮市區
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressDistrict">
            <summary>
            地址村里
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressArea">
            <summary>
            地址鄰
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressDetail">
            <summary>
            地址其他
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressLongitude">
            <summary>
            地址經度
            </summary>
        </member>
        <member name="P:K12.Data.EmergencyContactRecord.AddressLatitude">
            <summary>
            地址緯度
            </summary>
        </member>
        <member name="T:K12.Data.BeforeEnrollmentRecord">
            <summary>
            入學前資訊
            詳細規格：https://docs.google.com/a/ischool.com.tw/View?id=dcw7gq95_29ff6fpfhd
            </summary>
        </member>
        <member name="M:K12.Data.BeforeEnrollmentRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.BeforeEnrollmentRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.BeforeEnrollmentRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.Student">
            <summary>
            所屬學生記錄物件
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.School">
            <summary>
            入學前學校名稱
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.SchoolLocation">
            <summary>
            入學前學校位置
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.ClassName">
            <summary>
            入學前班級名稱
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.SeatNo">
            <summary>
            入學前班級座號
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.Memo">
            <summary>
            備忘資訊
            </summary>
        </member>
        <member name="P:K12.Data.BeforeEnrollmentRecord.GraduateSchoolYear">
            <summary>
            國中畢業學年度
            </summary>
        </member>
        <member name="T:K12.Data.StudentTag">
            <summary>
            學生標籤類別，提供方法用來取得、新增、修改及刪除學生標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.StudentTag.SelectAll">
            <summary>
            取得所有學生標籤列表。
            </summary>
            <returns>List&lt;StudentTagRecord&gt;，代表多筆學生標籤物件。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;StudentTagRecord&gt; records = StudentTag.SelectAll();
                    
                    foreach(StudentTagRecord record in records)
                        System.Console.WriteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.SelectAll``1">
            <summary>
            取得所有學生標籤列表。
            </summary>
            <returns>List&lt;StudentTagRecord&gt;，代表多筆學生標籤物件。</returns>
            <seealso cref="T:K12.Data.ClassTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;StudentTagRecord&gt; records = StudentTag.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生編號取得學生標籤列表。
            </summary>
            <param name="StudentID">學生編號</param>
            <returns>List&lt;StudentTagRecord&gt;，代表多筆學生標籤物件。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentID(StudentID);
                    
                    foreach(StudentTagRecord record in records)
                      System.Console.WriteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生編號取得學生標籤列表。
            </summary>
            <param name="StudentID">學生編號</param>
            <returns>List&lt;StudentTagRecord&gt;，代表多筆學生標籤物件。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentID(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生標籤列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;StudentTagRecord&gt;，代表多筆學生標籤物件。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentIDs(StudentIDs);
                
                forech(StudentTagRecord record in records)
                    System.Console.WriteLine(record.Name);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生標籤列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;StudentTagRecord&gt;，代表多筆學生標籤物件。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ClassTagRecord&gt; records = ClassTag.SelectByClassIDs(ClassIDs);
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.Insert(K12.Data.StudentTagRecord)">
            <summary>
            新增單學生標籤記錄
            </summary>
            <param name="StudentTagRecord">學生標籤記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                StudentTagRecord  record = new StudentTagRecord(StudentID, TagConfigID); 
                string NewID = StudentTag.Insert(record);  
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為學生編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks> 
        </member>
        <member name="M:K12.Data.StudentTag.Insert(System.Collections.Generic.IEnumerable{K12.Data.StudentTagRecord})">
            <summary>
            新增多筆學生標籤記錄
            </summary>
            <param name="StudentTagRecords">多筆學生標籤記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                StudentTagRecord record = new StudentTagRecord(StudentID, TagConfigID); 
                List&lt;StudentTagRecord&gt; records = new List&lt;StudentTagRecord&gt;();
                records.Add(record);
                List&lt;string&gt; NewIDs = StudentTag.Insert(records);  
                </code>
            </example>
            <remarks>
            1.新增傳入的參數為學生編號以及標籤編號。
            2.回傳值為新增物件的系統編號。
            </remarks>
        </member>
        <member name="M:K12.Data.StudentTag.Update(K12.Data.StudentTagRecord)">
            <summary>
            更新單筆學生標籤記錄
            </summary>
            <param name="StudentTagRecord">學生標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentID(StudentID);        
                    records[0].RefEntityID = StudentID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = StudentTag.Update(record[0]);
                </code>
            </example>
            <remarks>
            1.更新的欄位值只有StudentID及TagConfigID，其它為唯讀欄位。
            2.傳回值為成功更新的筆數。
            </remarks>
        </member>
        <member name="M:K12.Data.StudentTag.Update(System.Collections.Generic.IEnumerable{K12.Data.StudentTagRecord})">
            <summary>
            更新多筆學生標籤記錄
            </summary>
            <param name="StudentTagRecords">多筆學生標籤記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentID(StudentID);        
                    records[0].RefEntityID = StudentID;
                    records[0].RefTagID = TagConfigID;
                    int UpdateCount = StudentTag.Update(records);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.StudentTag.Delete(System.Collections.Generic.IEnumerable{K12.Data.StudentTagRecord})">
            <summary>
            刪除多筆學生標籤記錄
            </summary>
            <param name="StudentTagRecords">多筆標籤記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentTagRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentID(StudentID);
                    int DeleteCount = StudentTag.Delete(records);
                </code>
            </example>
            <remarks>
            傳回值為成功刪除的筆數。
            </remarks>        
        </member>
        <member name="M:K12.Data.StudentTag.Delete(K12.Data.StudentTagRecord)">
            <summary>
            刪除單筆學生記錄
            </summary>
            <param name="StudentTagRecord">學生記錄物件</param>
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    List&lt;StudentTagRecord&gt; records = StudentTag.SelectByStudentID(StudentID);
                    int DeleteCount = StudentTag.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="E:K12.Data.StudentTag.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.StudentTag.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.StudentTag.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.Phone">
            <summary>
            學生電話類別，提供方法用來取得及修改學生電話資訊
            </summary>
        </member>
        <member name="M:K12.Data.Phone.SelectAll">
            <summary>
            取得所有學生電話記錄物件。
            </summary>
            <returns>List&lt;PhoneRecord&gt;，代表多筆學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;PhoneRecord&gt; records = Phone.SelectAll();
                
                foreach(PhoneRecord record in records)
                    Console.WrlteLine(record.Permanent);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Phone.SelectAll``1">
            <summary>
            取得所有學生電話記錄物件。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudentID(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生電話記錄物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>PhoneRecord，代表學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                PhoneRecord record = Phone.SelectByStudentID(StudentID);
                
               if (record != null)
                   System.Console.WriteLine(record.Permanent);
                </code>
            </example>
            <remarks>若是Student不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudentID``1(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生電話記錄物件。
            </summary>
            <param name="StudentID">學生記錄編號</param>
            <returns>PhoneRecord，代表學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                PhoneRecord phonerec = Phone.SelectByStudent(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudent(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生電話記錄物件。
            </summary>
            <param name="Student">學生記錄物件</param>
            <returns>PhoneRecord，代表學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                PhoneRecord record = Phone.SelectByStudent(Student);
                
               if (record != null)
                   System.Console.WriteLine(record.Permanent);
                </code>
            </example>
            <remarks>若是Student不則在則會傳回null</remarks>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudent``1(K12.Data.StudentRecord)">
            <summary>
            根據單筆學生記錄物件取得學生電話記錄物件。
            </summary>
            <param name="StudentRecord">學生記錄物件</param>
            <returns>PhoneRecord，代表學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                PhoneRecord phonerec = Phone.SelectByStudent(Student);
            </example>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudents(System.Collections.Generic.List{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生電話記錄物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;PhoneRecord&gt;，代表多筆學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;PhoneRecord&gt; records = Phone.SelectByStudents(Students);
                
                foreach(PhoneRecord record in records)
                    Console.WrlteLine(record.Permanent);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudents``1(System.Collections.Generic.List{K12.Data.StudentRecord})">
            <summary>
            根據多筆學生記錄物件取得學生電話記錄物件列表。
            </summary>
            <param name="Students">多筆學生記錄物件</param>
            <returns>List&lt;PhoneRecord&gt;，代表多筆學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <seealso cref="T:K12.Data.StudentRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;PhoneRecord&gt; phonerecs = Phone.SelectByStudents(Students);
            </example>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生電話記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;PhoneRecord&gt;，代表多筆學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;PhoneRecord&gt; records = Phone.SelectByStudentIDs(StudentIDs);
                
                foreach(PhoneRecord record in records)
                    Console.WrlteLine(record.Permanent);
                </code>
            </example>
            <remarks>可能情況若是傳5筆學生，但是其中1筆沒有資料，就只會回傳4筆資料</remarks>
        </member>
        <member name="M:K12.Data.Phone.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生電話記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;PhoneRecord&gt;，代表多筆學生電話記錄物件。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;PhoneRecord&gt; phonerecs = Phone.SelectByStudents(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.Phone.Update(K12.Data.PhoneRecord)">
            <summary>
            更新單筆學生電話記錄
            </summary>
            <param name="PhoneRecord">學生電話記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                PhoneRecord record = Phone.SelectByStudentID(StudentID);
                record.Permanent = (new System.Random()).NextDouble().ToString();
                int UpdateCount = Phone.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Phone.Update(System.Collections.Generic.IEnumerable{K12.Data.PhoneRecord})">
            <summary>
            更新多筆學生電話記錄
            </summary>
            <param name="PhoneRecords">多筆學生電話記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.PhoneRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                PhoneRecord record = Phone.SelectByStudentID(StudentID);
                record.Permanent = (new System.Random()).NextDouble().ToString();
                List&lt;PhoneRecord&gt; records = new List&lt;PhoneRecord&gt;();
                records.Add(record);
                int UpdateCount = Phone.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="E:K12.Data.Phone.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.ScoreCalcRuleRecord">
            <summary>
            成績計算規則資訊
            </summary>
        </member>
        <member name="M:K12.Data.ScoreCalcRuleRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.ScoreCalcRuleRecord.#ctor(System.String,System.Xml.XmlElement)">
            <summary>
            新增成績計算規則記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="Name">名稱</param>
            <param name="Content">內容</param>
        </member>
        <member name="M:K12.Data.ScoreCalcRuleRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.ScoreCalcRuleRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.ScoreCalcRuleRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.ScoreCalcRuleRecord.Name">
            <summary>
            名稱，必填
            </summary>
        </member>
        <member name="P:K12.Data.ScoreCalcRuleRecord.Content">
            <summary>
            內容，必填
            </summary>
        </member>
        <member name="T:K12.Data.Exam">
            <summary>
            試別項目類別，提供方法用來取得、新增、修改及刪除試別項目資訊
            </summary>
        </member>
        <member name="M:K12.Data.Exam.SelectAll">
            <summary>
            取得所有試別項目列表。
            </summary>
            <returns>List&lt;ExamRecord&gt;，代表多筆試別項目記錄物件。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ExamRecord&gt; records = Exam.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.Exam.SelectAll``1">
            <summary>
            取得所有試別項目列表。
            </summary>
            <returns>List&lt;ExamRecord&gt;，代表多筆試別項目記錄物件。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ExamRecord&gt; records = Exam.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.Exam.SelectByID(System.String)">
            <summary>
            根據單筆試別項目編號取得試別項目。
            </summary>
            <param name="ExamID">單筆試別項目編號</param>
            <returns>ExamRecord，代表單筆試別項目記錄物件。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                ExamRecord record = Exam.SelectByID(ExamID);
            </example>
        </member>
        <member name="M:K12.Data.Exam.SelectByID``1(System.String)">
            <summary>
            根據單筆試別項目編號取得試別項目。
            </summary>
            <param name="ExamID">單筆試別項目編號</param>
            <returns>ExamRecord，代表單筆試別項目記錄物件。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                ExamRecord record = Exam.SelectByID(ExamID);
            </example>
        </member>
        <member name="M:K12.Data.Exam.SelectByIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆試別項目編號取得試別項目列表。
            </summary>
            <param name="ExamIDs">多筆試別項目編號</param>
            <returns>List&lt;ExamRecord&gt;，代表多筆試別項目記錄物件。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ExamRecord&gt; records = Exam.SelectByIDs(ExamIDs);
            </example>
        </member>
        <member name="M:K12.Data.Exam.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆試別項目編號取得試別項目列表。
            </summary>
            <param name="ExamIDs">多筆試別項目編號</param>
            <returns>List&lt;ExamRecord&gt;，代表多筆試別項目記錄物件。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;ExamRecord&gt; records = Exam.SelectByIDs(ExamIDs);
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.Exam.Insert(K12.Data.ExamRecord)" -->
        <!-- Badly formed XML comment ignored for member "M:K12.Data.Exam.Insert(System.Collections.Generic.IEnumerable{K12.Data.ExamRecord})" -->
        <member name="M:K12.Data.Exam.Update(K12.Data.ExamRecord)">
            <summary>
            更新單筆試別項目記錄
            </summary>
            <param name="ExamRecord">試別項目記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Exam.Update(System.Collections.Generic.IEnumerable{K12.Data.ExamRecord})">
            <summary>
            更新多筆試別項目記錄
            </summary>
            <param name="ExamRecords">多筆試別項目記錄</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Exam.Delete(K12.Data.ExamRecord)">
            <summary>
            刪除單筆試別項目記錄
            </summary>
            <param name="ExamRecord">試別項目記錄物件</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Exam.Delete(System.String)">
            <summary>
            刪除單筆試別項目記錄
            </summary>
            <param name="ExamRecordID">試別項目記錄編號</param> 
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Exam.Delete(System.Collections.Generic.IEnumerable{K12.Data.ExamRecord})">
            <summary>
            刪除多筆試別項目記錄
            </summary>
            <param name="ExamRecords">多筆試別項目記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.ExamRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Exam.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆試別項目記錄
            </summary>
            <param name="ExamRecordIDs">多筆試別項目記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.Configuration.ConfigProvider_User">
            <summary>
            實作組態存取介面，核心會透過此類別存取組態資料。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.Behavior_Extends.SaveAsync(K12.Data.Configuration.ConfigData)">
            <summary>
            非同步儲存資料，適用於不希望擋住畫面運作...。
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:K12.Data.ClassTagRecord">
            <summary>
            班級標籤資訊
            </summary>
        </member>
        <member name="M:K12.Data.ClassTagRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.ClassTagRecord.#ctor(System.String,System.String)">
            <summary>
            新增用建構式
            </summary>
            <param name="RefEntityID">RefEntityID，班級編號</param>
            <param name="RefTagID">RefTagID，標籤編號</param>
        </member>
        <member name="M:K12.Data.ClassTagRecord.GetID(System.Xml.XmlElement)">
            <summary>
            取得班級標籤編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.ClassTagRecord.GetEntityID(System.Xml.XmlElement)">
            <summary>
            取得班級編號
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:K12.Data.ClassTagRecord.RefClassID">
            <summary>
            所屬班級編號
            </summary>
        </member>
        <member name="P:K12.Data.ClassTagRecord.Class">
            <summary>
            所屬班級記錄物件
            </summary>
        </member>
        <member name="T:K12.Data.PeriodMappingInfo">
            <summary>
            節次對照表資訊，一個物件代表一個節次的假別對照資訊
            </summary>
        </member>
        <member name="M:K12.Data.PeriodMappingInfo.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.PeriodMappingInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:K12.Data.PeriodMappingInfo.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]> 
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.PeriodMappingInfo.Name">
            <summary>
            節次名稱，如早自習、升旗
            </summary>
        </member>
        <member name="P:K12.Data.PeriodMappingInfo.Type">
            <summary>
            節次類別，如一般、集會
            </summary>
        </member>
        <member name="P:K12.Data.PeriodMappingInfo.Sort">
            <summary>
            節次順序
            </summary>
        </member>
        <member name="P:K12.Data.PeriodMappingInfo.Aggregated">
            <summary>
            統計權重，一般而言一節是1，但像早修、升旗的時間比較短，其值可能是0.5；目前在計算特殊學生表現時會用到。
            </summary>
        </member>
        <member name="T:K12.Data.PeriodMapping">
            <summary>
            節次對照表類別，提供方法用來取得節次對照資訊
            </summary>
        </member>
        <member name="M:K12.Data.PeriodMapping.SelectAll">
            <summary>
            取得所有節次對照表清單
            </summary>
            <returns>List&lt;PeriodMappingInfo&gt;，代表節次對照資訊物件列表。</returns>
        </member>
        <member name="M:K12.Data.PeriodMapping.SelectAll``1">
            <summary>
            取得節次對照表清單
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:K12.Data.PeriodMapping.Update(System.Collections.Generic.IEnumerable{K12.Data.PeriodMappingInfo})" -->
        <member name="E:K12.Data.PeriodMapping.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="T:K12.Data.Discipline">
            <summary>
            學生獎懲類別，提供方法用來取得、新增、修改及刪除學生獎懲資訊
            </summary>
        </member>
        <member name="M:K12.Data.Discipline.SelectAll">
            <summary>
            取得所有學生獎懲記錄物件列表。
            </summary>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DisciplineRecord&gt; records = Discipline.SelectAll();
                
                foreach(DisciplineRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectAll``1">
            <summary>
            取得所有學生獎懲記錄物件列表。
            </summary>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎勵記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DisciplineRecord&gt; records = Discipline.SelectAll();
                
                foreach(DisciplineRecord record in records)
                    System.Console.WriteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectByStudentIDs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DisciplineRecord&gt; records = Discipline.SelectByStudentIDs(StudentIDs);
                
                foreach(DisciplineRecord record in records)
                    Console.WrlteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectByStudentIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生編號取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectRegisterDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DisciplineRecord&gt; records = Discipline.SelectRegisterDate(StudentIDs,StartRegisterDate,EndRegisterDate);
                
                foreach(DisciplineRecord record in records)
                    Console.WrlteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectByRegisterDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DisciplineRecord&gt; records = Discipline.SelectRegisterDate(StudentIDs,StartRegisterDate,EndRegisterDate);
                
                foreach(DisciplineRecord record in records)
                    Console.WrlteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectByRegisterDate``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及登錄日期取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartRegisterDate">登錄開始日期</param>
            <param name="EndRegisterDate">登錄結束日期</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectByOccurDate(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及發生日期取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartOccurDate">發生開始日期</param>
            <param name="EndOccurDate">發生結束日期</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                List&lt;DisciplineRecord&gt; records = Discipline.SelectByOccurDate(StudentIDs,StartOccurDate,EndOccurDate);
                
                foreach(DisciplineRecord record in records)
                    Console.WrlteLine(record.RefStudentID);
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.SelectByOccurDate``1(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            根據多筆學生編號及發生日期取得學生獎懲記錄物件列表。
            </summary>
            <param name="StudentIDs">多筆學生編號</param>
            <param name="StartOccurDate">發生開始日期</param>
            <param name="EndOccurDate">發生結束日期</param>
            <returns>List&lt;DisciplineRecord&gt;，代表多筆學生獎懲記錄物件。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.Discipline.Insert(K12.Data.DisciplineRecord)">
            <summary>
            新增單筆學生獎懲記錄
            </summary>
            <param name="DisciplineRecord">學生獎懲記錄物件</param>
            <returns>string，傳回新增物件的系統編號。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    DisciplineRecord newrecord = new DisciplineRecord();
                    newrecord.RefStudentID = RefStudentID;
                    newrecord.SchoolYear = SchoolYear;
                    newrecord.Semester = Semester;
                    newrecord.OccurDate = DateTime.Today;
                    strng NewID = Discipline.Insert(newrecord)
                    DisciplineRecord record = Discipline.SelectByID(NewID);
                    System.Console.Writeln(record.RefStudentID);
                </code>
            </example>
            <remarks>
            1.新增一律傳回新增物件的編號。
            2.新增必填欄位為學生記錄編號（RefStudentID）、學年度（SchoolYear）、學期（Semester）、缺曠日期（OccurDate）。
            </remarks>
        </member>
        <member name="M:K12.Data.Discipline.Insert(System.Collections.Generic.IEnumerable{K12.Data.DisciplineRecord})">
            <summary>
            新增多筆學生獎懲記錄
            </summary>
            <param name="DisciplineRecords">多筆學生獎懲記錄物件</param> 
            <returns>List&lt;string&gt;，傳回新增物件的系統編號列表。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                    DisciplineRecord record = new DisciplineRecord();
                    newrecord.RefStudentID = RefStudentID;
                    newrecord.SchoolYear = SchoolYear;
                    newrecord.Semester = Semester;
                    newrecord.OccurDate = DateTime.Today;
                    
                    List&lt;DisciplineRecord&gt; records = new List&lt;DisciplineRecord&gt;();
                    records.Add(record);
                    List&lt;string&gt; NewID = Discipline.Insert(records)
                </code>
            </example>
        </member>
        <member name="M:K12.Data.Discipline.Update(K12.Data.DisciplineRecord)">
            <summary>
            更新單筆學生獎懲記錄
            </summary>
            <param name="DisciplineRecord">學生獎懲記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                DisciplineRecord record = Discipline.SelectByStudentIDs(StudentIDs)[0];
                record.OccurDate = DateTime.Today;
                int UpdateCount = Discipline.Update(record);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Discipline.Update(System.Collections.Generic.IEnumerable{K12.Data.DisciplineRecord})">
            <summary>
            更新多筆學生獎勵記錄
            </summary>
            <param name="DisciplineRecords">多筆學生獎勵記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                DisciplineRecord record = Discipline.SelectByStudentIDs(StudentIDs)[0];
                record.OccurDate = DateTime.Today;
                List&lt;DisciplineRecord&gt; records = new List&lt;DisciplineRecord&gt;();
                records.Add(record);
                int UpdateCount = Discipline.Update(records);
                </code>
            </example>
            <remarks>傳回值為成功更新的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Discipline.Delete(K12.Data.DisciplineRecord)">
            <summary>
            刪除單筆學生獎懲記錄
            </summary>
            <param name="DisciplineRecord">學生獎懲記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;DisciplineRecord&gt; records = Discipline.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Discipline.Delete(records[0]);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Discipline.Delete(System.String)">
            <summary>
            刪除單筆學生獎懲記錄
            </summary>
            <param name="DisciplineID">學生獎懲記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Discipline.Delete(DisciplineID);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Discipline.Delete(System.Collections.Generic.IEnumerable{K12.Data.DisciplineRecord})">
            <summary>
            刪除多筆學生獎懲記錄
            </summary>
            <param name="DisciplineRecords">多筆學生獎懲記錄物件</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <seealso cref="T:K12.Data.DisciplineRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  List&lt;DisciplineRecord&gt; records = Discipline.SelectByStudentIDs(StudentIDs);
                  int DeleteCount = Discipline.Delete(records);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Discipline.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            刪除多筆學生獎懲記錄
            </summary>
            <param name="DisciplineIDs">多筆學生獎懲記錄編號</param>
            <returns>int，傳回成功刪除的筆數。</returns>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                <code>
                  int DeleteCount = Discipline.Delete(DisciplineIDs);
                </code>
            </example>
            <remarks>傳回值為成功刪除的筆數。</remarks>
        </member>
        <member name="M:K12.Data.Discipline.GetDetailContent(K12.Data.DisciplineRecord)">
            <summary>
            組合出 Detail 節點的內容。新增和修改的 Request Doc 都會用到。
            </summary>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="E:K12.Data.Discipline.AfterInsert">
            <summary>
            新增之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Discipline.AfterUpdate">
            <summary>
            更新之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Discipline.AfterDelete">
            <summary>
            刪除之後所觸發的事件
            </summary>
        </member>
        <member name="E:K12.Data.Discipline.AfterChange">
            <summary>
            資料改變之後所觸發的事件，新增、更新、刪除都會觸發
            </summary>
        </member>
        <member name="M:K12.Data.Utility.FunctionSpliter`2.Execute(System.Collections.Generic.List{`0})">
            <summary>
            執行方法，內部會以多執行緒執行，但是只有當所有執行緒完成時，才會回傳。
            </summary>
            <param name="parameters">參數。</param>
            <returns>執行結果。</returns>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.Function">
            <summary>
            要分批執行的動作。
            </summary>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.ProgressChange">
            <summary>
            分批執行進度，以每完成一個執行緒為單位回報。
            </summary>
        </member>
        <member name="T:K12.Data.Utility.FunctionSpliter`2.MultiThreadWorker`1">
            <summary>
            切割封包並以多執行緒模式逐一處理各個封包
            </summary>
        </member>
        <member name="M:K12.Data.Utility.FunctionSpliter`2.MultiThreadWorker`1.Run(System.Collections.Generic.IEnumerable{`2},System.Object)">
            <summary>
            執行
            </summary>
            <param name="list">要處理的資料</param>
            <param name="argument">額外的參數</param>
        </member>
        <member name="M:K12.Data.Utility.FunctionSpliter`2.MultiThreadWorker`1.Run(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            執行
            </summary>
            <param name="list">要處理的資料</param>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.MultiThreadWorker`1.PackageSize">
            <summary>
            每個封包的最大容量
            </summary>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.MultiThreadWorker`1.MaxThreads">
            <summary>
            同時執行的最大執行緒數量
            </summary>
        </member>
        <member name="E:K12.Data.Utility.FunctionSpliter`2.MultiThreadWorker`1.PackageWorker">
            <summary>
            處理單一封包
            </summary>
        </member>
        <member name="T:K12.Data.Utility.FunctionSpliter`2.PackageWorkEventArgs`1">
            <summary>
            處理單一封包事件傳遞
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.PackageWorkEventArgs`1.HasException">
            <summary>
            是否發生錯誤
            </summary>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.PackageWorkEventArgs`1.Exception">
            <summary>
            發生錯誤時的錯誤內容
            </summary>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.PackageWorkEventArgs`1.List">
            <summary>
            封包內容
            </summary>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.PackageWorkEventArgs`1.Result">
            <summary>
            回傳
            </summary>
        </member>
        <member name="P:K12.Data.Utility.FunctionSpliter`2.PackageWorkEventArgs`1.Argument">
            <summary>
            額外的參數
            </summary>
        </member>
        <member name="T:K12.Data.TeacherRecord">
            <summary>
            教師資訊
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.ID">
            <summary>
            系統編號
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Nickname">
            <summary>
            暱稱
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Status">
            <summary>
            狀態
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.StatusStr">
            <summary>
            狀態字串，若要設定請使用Status屬性
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Gender">
            <summary>
            姓別
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.IDNumber">
            <summary>
            身份證號
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.ContactPhone">
            <summary>
            連絡電話
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Category">
            <summary>
            分類
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.TALoginName">
            <summary>
            Teacher Access的登入名稱
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.TAPassword">
            <summary>
            Teacher Access的登入密碼
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.AccountType">
            <summary>
            帳號類型
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Email">
            <summary>
            電子郵件
            </summary>
        </member>
        <member name="P:K12.Data.TeacherRecord.Photo">
            <summary>
            照片
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationManager.NamespacePreprocess(System.String)">
            <summary>
            提供一個時機，處理當使用者要求指定的 Namespace 組態資料時，可以變更實際傳送到底層的 Namespace 名稱。
            </summary>
            <param name="configNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationManager.Sync(System.String)">
            <summary>
            向主機同步組態資料。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationManager.Remove(K12.Data.Configuration.ConfigData)">
            <summary>
            刪除指定的組態。
            </summary>
            <param name="conf"></param>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationManager.#ctor(K12.Data.Configuration.IConfigurationProvider)">
            <summary>
            建立實體。
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationManager.Cache">
            <summary>
            Configuration 的快取。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationManager.Provider">
            <summary>
            負責提供 Configuration 的資料。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationManager.Readonly">
            <summary>
            指示此組態是否為可讀寫的。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationManager.Item(System.String)">
            <summary>
            取得組態資料，如果指定的名稱存在則回傳資料，不存在則自動建立新的組態。
            </summary>
            <param name="configName"></param>
            <returns></returns>
        </member>
        <member name="E:K12.Data.Configuration.ConfigurationManager.ConfigurationUpdated">
            <summary>
            當組態被更新時引發，參數中的「PrimaryKeys」是被更新的組態名稱清單。
            </summary>
        </member>
        <member name="T:K12.Data.DemeritRecord">
            <summary>
            學生懲戒資訊，新增物件時會直接將MeritFlag屬性設為0
            </summary>
        </member>
        <member name="M:K12.Data.DemeritRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.DemeritRecord.#ctor(System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            新增學生懲戒記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <param name="OccurDate">懲戒日期</param>
        </member>
        <member name="M:K12.Data.DemeritRecord.#ctor(System.Xml.XmlElement)">
             <summary>
             XML參數建構式
             <![CDATA[
            <Discipline ID="1097220">
                <Semester>1</Semester>
                <OccurDate>2007/12/13</OccurDate>
                <Type>1</Type>
                <StudentNumber>514163</StudentNumber>
                <SchoolYear>96</SchoolYear>
                <GradeYear>2</GradeYear>
                <MeritFlag>2</MeritFlag>
                <Name>陳文淇1</Name>
                <Detail>
                    <Discipline>
                        <Demerit A="0" B="0" C="0" ClearDate="" ClearReason="" Cleared="" />
                    </Discipline>
                </Detail>
                <SeatNo />
                <Gender>女</Gender>
                <RefStudentID>169968</RefStudentID>
                <ClassName>綜二義</ClassName>
                <Reason>長太醜, 該死</Reason>
            </Discipline>
             ]]>
             </summary>
             <param name="element"></param>
        </member>
        <member name="M:K12.Data.DemeritRecord.Load(System.Xml.XmlElement)">
             <summary>
             從XML載入設定值
             <![CDATA[
            <Discipline ID="1097220">
                <Semester>1</Semester>
                <OccurDate>2007/12/13</OccurDate>
                <Type>1</Type>
                <StudentNumber>514163</StudentNumber>
                <SchoolYear>96</SchoolYear>
                <GradeYear>2</GradeYear>
                <MeritFlag>2</MeritFlag>
                <Name>陳文淇1</Name>
                <Detail>
                    <Discipline>
                        <Demerit A="0" B="0" C="0" ClearDate="" ClearReason="" Cleared="" />
                    </Discipline>
                </Detail>
                <SeatNo />
                <Gender>女</Gender>
                <RefStudentID>169968</RefStudentID>
                <ClassName>綜二義</ClassName>
                <Reason>長太醜, 該死</Reason>
            </Discipline>
             ]]>
             </summary>
             <param name="data"></param>
        </member>
        <member name="P:K12.Data.DemeritRecord.RefStudentID">
            <summary>
            所屬學生記錄編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.ID">
            <summary>
            學生懲戒記錄系統編號
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.OccurDate">
            <summary>
            日期，必填
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.MeritFlag">
            <summary>
            獎勵懲戒類別，0是懲戒,1是獎勵,2是留校察看
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.Reason">
            <summary>
            事由
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.DemeritA">
            <summary>
            大過數
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.DemeritB">
            <summary>
            小過數
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.DemeritC">
            <summary>
            警告數
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.RegisterDate">
            <summary>
            登錄獎懲記錄日期
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.ClearDate">
            <summary>
            銷過日期
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.ClearReason">
            <summary>
            銷過事由
            </summary>
        </member>
        <member name="P:K12.Data.DemeritRecord.Cleared">
            <summary>
            是否銷過
            </summary>
        </member>
        <member name="T:K12.Data.AbsenceMappingInfo">
            <summary>
            假別對照表資訊
            </summary>
        </member>
        <member name="M:K12.Data.AbsenceMappingInfo.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.AbsenceMappingInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:K12.Data.AbsenceMappingInfo.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.AbsenceMappingInfo.Name">
            <summary>
            假別名稱
            </summary>
        </member>
        <member name="P:K12.Data.AbsenceMappingInfo.Abbreviation">
            <summary>
            假別簡稱
            </summary>
        </member>
        <member name="P:K12.Data.AbsenceMappingInfo.HotKey">
            <summary>
            假別快速鍵
            </summary>
        </member>
        <member name="P:K12.Data.AbsenceMappingInfo.Noabsence">
            <summary>
            是否不列入缺曠計算
            </summary>
        </member>
        <member name="T:K12.Data.GradScore">
            <summary>
            學生畢業成績類別，提供方法用來取得及修改學生畢業成績資訊
            </summary>
        </member>
        <member name="M:K12.Data.GradScore.SelectAll``1">
            <summary>
            取得所有學生畢業成績項目列表。
            </summary>
            <returns>List&lt;GradScoreRecord&gt;，代表多筆學生畢業成績記錄物件。</returns>
            <seealso cref="T:K12.Data.GradScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;GradScoreRecord&gt; records = GradeScore.SelectAll();
            </example>
        </member>
        <member name="M:K12.Data.GradScore.SelectByID``1(System.String)">
            <summary>
            根據單筆學生記錄編號取得學生畢業成績記錄物件。
            </summary>
            <param name="StudentID">單筆學生記錄編號</param>
            <returns>GradScoreRecord，代表單筆學生畢業成績記錄物件。</returns>
            <seealso cref="T:K12.Data.GradScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                GradScoreRecord record = GradeScore.SelectByID(StudentID);
            </example>
        </member>
        <member name="M:K12.Data.GradScore.SelectByIDs``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根據多筆學生記錄編號取得學生畢業成績記錄。
            </summary>
            <param name="StudentIDs">多筆學生記錄編號</param>
            <returns>List&lt;GradScoreRecord&gt;，代表多筆學生畢業成績記錄物件。</returns>
            <seealso cref="T:K12.Data.GradScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                List&lt;GradScoreRecord&gt; records = GradeScore.SelectByIDs(StudentIDs);
            </example>
        </member>
        <member name="M:K12.Data.GradScore.Update(K12.Data.GradScoreRecord)">
            <summary>
            更新單筆學生畢業成績記錄
            </summary>
            <param name="GradScoreRecord">學生畢業成績記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.GradScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="M:K12.Data.GradScore.Update(System.Collections.Generic.IEnumerable{K12.Data.GradScoreRecord})">
            <summary>
            更新多筆學生畢業成績記錄
            </summary>
            <param name="GradScoreRecords">多筆學生畢業成績記錄物件</param> 
            <returns>int，傳回成功更新的筆數。</returns>
            <seealso cref="T:K12.Data.GradScoreRecord"/>
            <exception cref="T:System.Exception">
            </exception>
            <example>
                
            </example>
        </member>
        <member name="T:K12.Data.SiblingRecord">
            <summary>
            學生手足資訊
            </summary>
        </member>
        <member name="M:K12.Data.SiblingRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.SiblingRecord.#ctor(System.Data.DataRow)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="Row"></param>
        </member>
        <member name="M:K12.Data.SiblingRecord.Load(System.Data.DataRow)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="Row"></param>
        </member>
        <member name="P:K12.Data.SiblingRecord.RefStudentID">
            <summary>
            所屬學生編號
            </summary>
        </member>
        <member name="P:K12.Data.SiblingRecord.SiblingItems">
            <summary>
            手足名單
            </summary>
        </member>
        <member name="P:K12.Data.SiblingRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="T:K12.Data.SiblingItem">
            <summary>
            手足項目
            </summary>
        </member>
        <member name="M:K12.Data.SiblingItem.#ctor">
            <summary>
            無參數建構式
            </summary>
        </member>
        <member name="M:K12.Data.SiblingItem.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            </summary>
            <param name="Element"></param>
        </member>
        <member name="M:K12.Data.SiblingItem.Load(System.Xml.XmlElement)">
             <summary>
             從XML載入值
             <![CDATA[
            <SiblingInfo>
                <Relationship>兄</Relationship>
                <Name>王大明</Name>
                <Birthdate/>
                <School/>
                <SchoolLocation/>
                <ClassName/>
                <SeatNo/>
                <Memo/>
            <SiblingInfo>
             ]]>
             </summary>
             <param name="Element"></param>
        </member>
        <member name="P:K12.Data.SiblingItem.RefStudentID">
            <summary>
            所屬學生編號，此為唯讀屬性，若需設定請使用SemesterHistoryRecord的RefStudentID屬性。
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.Student">
            <summary>
            所屬學生記錄物件，此為唯讀屬性
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.Name">
            <summary>
            兄弟姊妹姓名
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.Relationship">
            <summary>
            關係，兄弟或姊妹
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.BirthDate">
            <summary>
            生日，兄弟或姊妹
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.SchoolName">
            <summary>
            兄弟姊妹學校名稱
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.SchoolLocation">
            <summary>
            兄弟姊妹學校地點
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.ClassName">
            <summary>
            兄弟姊妹班級名稱
            </summary>
        </member>
        <member name="P:K12.Data.SiblingItem.Memo">
            <summary>
            兄弟姊妹班級備註
            </summary>
        </member>
        <member name="T:K12.Data.SchoolRecord">
            <summary>
            學校資訊記錄物件
            </summary>
        </member>
        <member name="M:K12.Data.SchoolRecord.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.SchoolRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.SchoolRecord.County">
            <summary>
            縣市名稱
            </summary>
        </member>
        <member name="P:K12.Data.SchoolRecord.Code">
            <summary>
            學校代碼
            </summary>
        </member>
        <member name="P:K12.Data.SchoolRecord.Name">
            <summary>
            學校名稱
            </summary>
        </member>
        <member name="T:K12.Data.Properties.Resources">
            <summary>
              用於查詢當地語系化字串等的強型別資源類別
            </summary>
        </member>
        <member name="P:K12.Data.Properties.Resources.ResourceManager">
            <summary>
              傳回這個類別使用的快取的 ResourceManager 執行個體。
            </summary>
        </member>
        <member name="P:K12.Data.Properties.Resources.Culture">
            <summary>
              覆寫目前執行緒的 CurrentUICulture 屬性，對象是所有
              使用這個強型別資源類別的資源查閱。
            </summary>
        </member>
        <member name="T:K12.Data.Configuration.ConfigurationRecord">
            <summary>
            負責包存 Configuration 的原始資料。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationRecord.#ctor(System.String)">
            <summary>
            建立新增的「組態記錄」。
            </summary>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationRecord.#ctor(System.String,System.Xml.XmlElement)">
            <summary>
            建立可更新的「組態記錄」。
            </summary>
            <param name="data">組態的  Xml 資料。</param>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationRecord.Clone">
            <summary>
            複製一份資料。
            </summary>
            <returns></returns>
        </member>
        <member name="M:K12.Data.Configuration.ConfigurationRecord.GetXml">
            <summary>
            取得用於儲存的 Xml 資料。
            </summary>
            <returns>合法的 Xml 資料。</returns>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationRecord.EditAction">
            <summary>
            儲存動作(1:新增,2:修改,3:刪除)。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationRecord.Namespace">
            <summary>
            取得組態名稱。
            </summary>
        </member>
        <member name="P:K12.Data.Configuration.ConfigurationRecord.PreviousData">
            <summary>
            前版的組態資料，這是為了相容舊的資料而提供的成員，在一般情況是 Null。
            </summary>
        </member>
        <member name="T:K12.Data.AttendanceRecord">
            <summary>
            學生缺曠資訊
            </summary>
        </member>
        <member name="M:K12.Data.AttendanceRecord.#ctor">
            <summary>
            預設建構式，將學生編號及缺曠編號設為空字串
            </summary>
        </member>
        <member name="M:K12.Data.AttendanceRecord.#ctor(System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            新增缺曠記錄建構式，參數為新增記錄的必填欄位
            </summary>
            <param name="RefStudentID">所屬學生編號</param>
            <param name="SchoolYear">學年度</param>
            <param name="Semester">學期</param>
            <param name="OccurDate">缺曠日期</param>
        </member>
        <member name="M:K12.Data.AttendanceRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:K12.Data.AttendanceRecord.Load(System.Xml.XmlElement)">
            <summary>
            從XML載入設定值
            <![CDATA[
            ]]>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:K12.Data.AttendanceRecord.RefStudentID">
            <summary>
            所屬學生編號，必填
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.Student">
            <summary>
            所屬學生
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.ID">
            <summary>
            學生缺曠記錄系統編號
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.SchoolYear">
            <summary>
            學年度，必填
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.Semester">
            <summary>
            學期，必填
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.OccurDate">
            <summary>
            缺曠日期，必填
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.DayOfWeek">
            <summary>
            缺曠日期屬於週幾
            </summary>
        </member>
        <member name="P:K12.Data.AttendanceRecord.PeriodDetail">
            <summary>
            學生缺曠記錄詳細內容，以節為單位記錄缺曠資訊
            </summary>
        </member>
        <member name="T:K12.Data.AttendancePeriod">
            <summary>
            學生缺曠記錄詳細內容，以節為單位記錄缺曠資訊
            </summary>
        </member>
        <member name="M:K12.Data.AttendancePeriod.#ctor">
            <summary>
            預設建構式
            </summary>
        </member>
        <member name="M:K12.Data.AttendancePeriod.#ctor(System.Xml.XmlElement)">
            <summary>
            XML參數建構式
            <![CDATA[
            ]]>
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:K12.Data.AttendancePeriod.ID">
            <summary>
            缺曠記錄系統編號，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.RefStudentID">
            <summary>
            所屬學生編號，此為唯讀屬性，要修改請使用AttendanceRecord.RefStudentID屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.SchoolYear">
            <summary>
            學年度，此為唯讀屬性，要修改請使用AttendanceRecord.SchoolYear屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.Semester">
            <summary>
            學期，此為唯讀屬性，要修改請使用AttendanceRecord.Semester屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.OccurDate">
            <summary>
            缺曠日期，此為唯讀屬性，要修改請使用AttendanceRecord.OccurDate屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.DayOfWeek">
            <summary>
            缺曠日期屬於週幾，此為唯讀屬性。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.Period">
            <summary>
            節次 
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.PeriodType">
            <summary>
            節次類型，此屬性已不再使用，為唯讀屬性，目前節次類別是存在於『節次對照表』當中，請使用PeriodMapping類別來取得。
            </summary>
        </member>
        <member name="P:K12.Data.AttendancePeriod.AbsenceType">
            <summary>
            假別，例曠課、事假、喪假…等
            </summary>
        </member>
    </members>
</doc>
